using System.Linq;
using DDEX_Deserialiser.AutoGenerated;
using NUnit.Framework;

namespace Deserialiser.Unit.Tests
{
    [TestFixture]
    public class ImageTests : BigDdexXml
    {
        private Image GetImage()
        {
            return ddex.Root.ResourceList.Images.Single();
        }

        private ImageDetailsByTerritory GetImageDetails()
        {
            return GetImage().ImageDetailsByTerritorys.Single();
        }

        private TechnicalImageDetails GetImageTechnicalDetails()
        {
            return GetImageDetails().TechnicalImageDetails.Single();
        }

        private File GetImageFile()
        {
            return GetImageTechnicalDetails().Files.Single();
        }

        [Test]
        public void Should_image_be_a_cover_image()
        {
            Assert.That(GetImage().ImageType.Value, Is.EqualTo("FrontCoverImage"));
        }

        [Test]
        public void Should_image_have_proprietary_id()
        {
            Assert.That((string)GetImage().ImageIds.Single().ProprietaryIds.Single(), Is.EqualTo("ICPN_VALUE.jpg"));
        }

        [Test]
        public void Should_image_have_resource_reference()
        {
            Assert.That(GetImage().ResourceReference, Is.EqualTo("A3"));
        }

        [Test]
        public void Should_image_have_worldwide_territory_details()
        {
            Assert.That(GetImageDetails().TerritoryCodes.Single(), Is.EqualTo("Worldwide"));
        }

        [Test]
        public void Should_image_technical_details_have_techinical_resource_reference()
        {
            Assert.That(GetImageTechnicalDetails().TechnicalResourceDetailsReference, Is.EqualTo("T2"));
        }

        [Test]
        public void Should_image_technical_details_have_codec_type()
        {
            Assert.That((string)GetImageTechnicalDetails().ImageCodecType, Is.EqualTo("JPEG"));
        }

        [Test]
        public void Should_image_technical_details_have_image_size()
        {
            Assert.That((string)GetImageTechnicalDetails().ImageWidth, Is.EqualTo("640"));
            Assert.That((string)GetImageTechnicalDetails().ImageHeight, Is.EqualTo("480"));
        }

        [Test]
        public void Should_image_file_have_name()
        {
            Assert.That(GetImageFile().FileName, Is.EqualTo("ICPN_VALUE.jpg"));
        }

        [Test]
        public void Should_image_file_have_path()
        {
            Assert.That(GetImageFile().FilePath, Is.EqualTo("/resources"));
        }

        [Test]
        public void Should_image_file_have_hash_sum()
        {
            Assert.That(GetImageFile().HashSum.HashSumAlgorithmType.ToString(), Is.EqualTo("MD5"));
            Assert.That(GetImageFile().HashSum.HashSumProp, Is.EqualTo("e2h23d23e32a65463245634ff27364cc"));
        }
    }
}
