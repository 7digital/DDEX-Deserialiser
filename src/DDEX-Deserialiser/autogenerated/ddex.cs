using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
#pragma warning disable 660,661

namespace DDEX_Deserialiser.AutoGenerated
{
	public partial class NewReleaseMessage
	{
		public virtual MessageHeader MessageHeader { get; set; }
		public virtual string UpdateIndicator { get; set; }
		public virtual CatalogTransfer CatalogTransfer { get; set; }
		public virtual WorkList WorkList { get; set; }
		public virtual CueSheetList CueSheetList { get; set; }
		public virtual ResourceList ResourceList { get; set; }
		public virtual CollectionList CollectionList { get; set; }
		public virtual ReleaseList ReleaseList { get; set; }
		public virtual DealList DealList { get; set; }
		public virtual string MessageSchemaVersionId { get; set; }
		public virtual string BusinessProfileVersionId { get; set; }
		public virtual string ReleaseProfileVersionId { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public NewReleaseMessage(XElement element)
		{
			MessageHeader = element.Elements().Where(e => e.Name == "MessageHeader").Select(e => new MessageHeader(e)).SingleOrDefault() ?? new NullMessageHeader();
			UpdateIndicator = element.Elements().Where(e => e.Name == "UpdateIndicator").Select(e => e.Value).SingleOrDefault();
			CatalogTransfer = element.Elements().Where(e => e.Name == "CatalogTransfer").Select(e => new CatalogTransfer(e)).SingleOrDefault() ?? new NullCatalogTransfer();
			WorkList = element.Elements().Where(e => e.Name == "WorkList").Select(e => new WorkList(e)).SingleOrDefault() ?? new NullWorkList();
			CueSheetList = element.Elements().Where(e => e.Name == "CueSheetList").Select(e => new CueSheetList(e)).SingleOrDefault() ?? new NullCueSheetList();
			ResourceList = element.Elements().Where(e => e.Name == "ResourceList").Select(e => new ResourceList(e)).SingleOrDefault() ?? new NullResourceList();
			CollectionList = element.Elements().Where(e => e.Name == "CollectionList").Select(e => new CollectionList(e)).SingleOrDefault() ?? new NullCollectionList();
			ReleaseList = element.Elements().Where(e => e.Name == "ReleaseList").Select(e => new ReleaseList(e)).SingleOrDefault() ?? new NullReleaseList();
			DealList = element.Elements().Where(e => e.Name == "DealList").Select(e => new DealList(e)).SingleOrDefault() ?? new NullDealList();
			MessageSchemaVersionId = element.Attributes().Where(e => e.Name == "MessageSchemaVersionId").Select(e => e.Value).SingleOrDefault();
			BusinessProfileVersionId = element.Attributes().Where(e => e.Name == "BusinessProfileVersionId").Select(e => e.Value).SingleOrDefault();
			ReleaseProfileVersionId = element.Attributes().Where(e => e.Name == "ReleaseProfileVersionId").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public NewReleaseMessage()
		{ }

		public static bool operator ==(NewReleaseMessage left, NewReleaseMessage right)
		{
			return Utils.ValidatedEquals<NullNewReleaseMessage>(left, right);
		}

		public static bool operator !=(NewReleaseMessage left, NewReleaseMessage right)
		{
			return !(left == right);
		}
	}

	internal class NullNewReleaseMessage : NewReleaseMessage
	{
		public override MessageHeader MessageHeader { get { throw this.NullAccess("MessageHeader"); } }
		public override string UpdateIndicator { get { throw this.NullAccess("UpdateIndicator"); } }
		public override CatalogTransfer CatalogTransfer { get { throw this.NullAccess("CatalogTransfer"); } }
		public override WorkList WorkList { get { throw this.NullAccess("WorkList"); } }
		public override CueSheetList CueSheetList { get { throw this.NullAccess("CueSheetList"); } }
		public override ResourceList ResourceList { get { throw this.NullAccess("ResourceList"); } }
		public override CollectionList CollectionList { get { throw this.NullAccess("CollectionList"); } }
		public override ReleaseList ReleaseList { get { throw this.NullAccess("ReleaseList"); } }
		public override DealList DealList { get { throw this.NullAccess("DealList"); } }
		public override string MessageSchemaVersionId { get { throw this.NullAccess("MessageSchemaVersionId"); } }
		public override string BusinessProfileVersionId { get { throw this.NullAccess("BusinessProfileVersionId"); } }
		public override string ReleaseProfileVersionId { get { throw this.NullAccess("ReleaseProfileVersionId"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CatalogListMessage
	{
		public virtual MessageHeader MessageHeader { get; set; }
		public virtual DateTime? PublicationDate { get; set; }
		public virtual IList<CatalogItem> CatalogItems { get; set; }
		public virtual string MessageSchemaVersionId { get; set; }
		public virtual string BusinessProfileVersionId { get; set; }
		public virtual string ReleaseProfileVersionId { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public CatalogListMessage(XElement element)
		{
			MessageHeader = element.Elements().Where(e => e.Name == "MessageHeader").Select(e => new MessageHeader(e)).SingleOrDefault() ?? new NullMessageHeader();
			PublicationDate = element.Elements().Where(e => e.Name == "PublicationDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
			CatalogItems = element.Elements().Where(e => e.Name == "CatalogItem").Select(e => new CatalogItem(e)).ToList();
			MessageSchemaVersionId = element.Attributes().Where(e => e.Name == "MessageSchemaVersionId").Select(e => e.Value).SingleOrDefault();
			BusinessProfileVersionId = element.Attributes().Where(e => e.Name == "BusinessProfileVersionId").Select(e => e.Value).SingleOrDefault();
			ReleaseProfileVersionId = element.Attributes().Where(e => e.Name == "ReleaseProfileVersionId").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public CatalogListMessage()
		{ }

		public static bool operator ==(CatalogListMessage left, CatalogListMessage right)
		{
			return Utils.ValidatedEquals<NullCatalogListMessage>(left, right);
		}

		public static bool operator !=(CatalogListMessage left, CatalogListMessage right)
		{
			return !(left == right);
		}
	}

	internal class NullCatalogListMessage : CatalogListMessage
	{
		public override MessageHeader MessageHeader { get { throw this.NullAccess("MessageHeader"); } }
		public override DateTime? PublicationDate { get { throw this.NullAccess("PublicationDate"); } }
		public override IList<CatalogItem> CatalogItems { get { throw this.NullAccess("CatalogItems"); } }
		public override string MessageSchemaVersionId { get { throw this.NullAccess("MessageSchemaVersionId"); } }
		public override string BusinessProfileVersionId { get { throw this.NullAccess("BusinessProfileVersionId"); } }
		public override string ReleaseProfileVersionId { get { throw this.NullAccess("ReleaseProfileVersionId"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CatalogItem
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<ReleaseId> ReleaseIds { get; set; }
		public virtual Title Title { get; set; }
		public virtual Name DisplayArtistName { get; set; }
		public virtual IList<Name> ContributorNames { get; set; }
		public virtual ReferenceTitle DisplayTitle { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual EventDate ReleaseDate { get; set; }

		public CatalogItem(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			Title = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).SingleOrDefault() ?? new NullTitle();
			DisplayArtistName = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			ContributorNames = element.Elements().Where(e => e.Name == "ContributorName").Select(e => new Name(e)).ToList();
			DisplayTitle = element.Elements().Where(e => e.Name == "DisplayTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			ReleaseDate = element.Elements().Where(e => e.Name == "ReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
		}

		public CatalogItem()
		{ }

		public static bool operator ==(CatalogItem left, CatalogItem right)
		{
			return Utils.ValidatedEquals<NullCatalogItem>(left, right);
		}

		public static bool operator !=(CatalogItem left, CatalogItem right)
		{
			return !(left == right);
		}
	}

	internal class NullCatalogItem : CatalogItem
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<ReleaseId> ReleaseIds { get { throw this.NullAccess("ReleaseIds"); } }
		public override Title Title { get { throw this.NullAccess("Title"); } }
		public override Name DisplayArtistName { get { throw this.NullAccess("DisplayArtistName"); } }
		public override IList<Name> ContributorNames { get { throw this.NullAccess("ContributorNames"); } }
		public override ReferenceTitle DisplayTitle { get { throw this.NullAccess("DisplayTitle"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override EventDate ReleaseDate { get { throw this.NullAccess("ReleaseDate"); } }
	}

	public partial class CatalogReleaseReferenceList
	{
		public virtual IList<string> CatalogReleaseReferences { get; set; }

		public CatalogReleaseReferenceList(XElement element)
		{
			CatalogReleaseReferences = element.Elements().Where(e => e.Name == "CatalogReleaseReference").Select(e => e.Value).ToList();
		}

		public CatalogReleaseReferenceList()
		{ }

		public static bool operator ==(CatalogReleaseReferenceList left, CatalogReleaseReferenceList right)
		{
			return Utils.ValidatedEquals<NullCatalogReleaseReferenceList>(left, right);
		}

		public static bool operator !=(CatalogReleaseReferenceList left, CatalogReleaseReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullCatalogReleaseReferenceList : CatalogReleaseReferenceList
	{
		public override IList<string> CatalogReleaseReferences { get { throw this.NullAccess("CatalogReleaseReferences"); } }
	}

	public partial class CatalogTransfer
	{
		public virtual bool? CatalogTransferCompleted { get; set; }
		public virtual EventDate EffectiveTransferDate { get; set; }
		public virtual CatalogReleaseReferenceList CatalogReleaseReferenceList { get; set; }
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual PartyDescriptor TransferringFrom { get; set; }
		public virtual PartyDescriptor TransferringTo { get; set; }

		public CatalogTransfer(XElement element)
		{
			CatalogTransferCompleted = element.Elements().Where(e => e.Name == "CatalogTransferCompleted").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			EffectiveTransferDate = element.Elements().Where(e => e.Name == "EffectiveTransferDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			CatalogReleaseReferenceList = element.Elements().Where(e => e.Name == "CatalogReleaseReferenceList").Select(e => new CatalogReleaseReferenceList(e)).SingleOrDefault() ?? new NullCatalogReleaseReferenceList();
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			TransferringFrom = element.Elements().Where(e => e.Name == "TransferringFrom").Select(e => new PartyDescriptor(e)).SingleOrDefault() ?? new NullPartyDescriptor();
			TransferringTo = element.Elements().Where(e => e.Name == "TransferringTo").Select(e => new PartyDescriptor(e)).SingleOrDefault() ?? new NullPartyDescriptor();
		}

		public CatalogTransfer()
		{ }

		public static bool operator ==(CatalogTransfer left, CatalogTransfer right)
		{
			return Utils.ValidatedEquals<NullCatalogTransfer>(left, right);
		}

		public static bool operator !=(CatalogTransfer left, CatalogTransfer right)
		{
			return !(left == right);
		}
	}

	internal class NullCatalogTransfer : CatalogTransfer
	{
		public override bool? CatalogTransferCompleted { get { throw this.NullAccess("CatalogTransferCompleted"); } }
		public override EventDate EffectiveTransferDate { get { throw this.NullAccess("EffectiveTransferDate"); } }
		public override CatalogReleaseReferenceList CatalogReleaseReferenceList { get { throw this.NullAccess("CatalogReleaseReferenceList"); } }
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override PartyDescriptor TransferringFrom { get { throw this.NullAccess("TransferringFrom"); } }
		public override PartyDescriptor TransferringTo { get { throw this.NullAccess("TransferringTo"); } }
	}

	public partial class Collection
	{
		public virtual IList<CollectionId> CollectionIds { get; set; }
		public virtual IList<CollectionType> CollectionTypes { get; set; }
		public virtual string CollectionReference { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<ResourceContributor> Contributors { get; set; }
		public virtual IList<Character> Characters { get; set; }
		public virtual CollectionCollectionReferenceList CollectionCollectionReferenceList { get; set; }
		public virtual bool? IsComplete { get; set; }
		public virtual string Duration { get; set; }
		public virtual string DurationOfMusicalContent { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual EventDate OriginalReleaseDate { get; set; }
		public virtual string OriginalLanguage { get; set; }
		public virtual IList<CollectionDetailsByTerritory> CollectionDetailsByTerritorys { get; set; }
		public virtual CollectionResourceReferenceList CollectionResourceReferenceList { get; set; }
		public virtual CollectionWorkReferenceList CollectionWorkReferenceList { get; set; }
		public virtual string RepresentativeImageReference { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Collection(XElement element)
		{
			CollectionIds = element.Elements().Where(e => e.Name == "CollectionId").Select(e => new CollectionId(e)).ToList();
			CollectionTypes = element.Elements().Where(e => e.Name == "CollectionType").Select(e => new CollectionType(e)).ToList();
			CollectionReference = element.Elements().Where(e => e.Name == "CollectionReference").Select(e => e.Value).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
			CollectionCollectionReferenceList = element.Elements().Where(e => e.Name == "CollectionCollectionReferenceList").Select(e => new CollectionCollectionReferenceList(e)).SingleOrDefault() ?? new NullCollectionCollectionReferenceList();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			DurationOfMusicalContent = element.Elements().Where(e => e.Name == "DurationOfMusicalContent").Select(e => e.Value).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalLanguage = element.Elements().Where(e => e.Name == "OriginalLanguage").Select(e => e.Value).SingleOrDefault();
			CollectionDetailsByTerritorys = element.Elements().Where(e => e.Name == "CollectionDetailsByTerritory").Select(e => new CollectionDetailsByTerritory(e)).ToList();
			CollectionResourceReferenceList = element.Elements().Where(e => e.Name == "CollectionResourceReferenceList").Select(e => new CollectionResourceReferenceList(e)).SingleOrDefault() ?? new NullCollectionResourceReferenceList();
			CollectionWorkReferenceList = element.Elements().Where(e => e.Name == "CollectionWorkReferenceList").Select(e => new CollectionWorkReferenceList(e)).SingleOrDefault() ?? new NullCollectionWorkReferenceList();
			RepresentativeImageReference = element.Elements().Where(e => e.Name == "RepresentativeImageReference").Select(e => e.Value).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Collection()
		{ }

		public static bool operator ==(Collection left, Collection right)
		{
			return Utils.ValidatedEquals<NullCollection>(left, right);
		}

		public static bool operator !=(Collection left, Collection right)
		{
			return !(left == right);
		}
	}

	internal class NullCollection : Collection
	{
		public override IList<CollectionId> CollectionIds { get { throw this.NullAccess("CollectionIds"); } }
		public override IList<CollectionType> CollectionTypes { get { throw this.NullAccess("CollectionTypes"); } }
		public override string CollectionReference { get { throw this.NullAccess("CollectionReference"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<ResourceContributor> Contributors { get { throw this.NullAccess("Contributors"); } }
		public override IList<Character> Characters { get { throw this.NullAccess("Characters"); } }
		public override CollectionCollectionReferenceList CollectionCollectionReferenceList { get { throw this.NullAccess("CollectionCollectionReferenceList"); } }
		public override bool? IsComplete { get { throw this.NullAccess("IsComplete"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override string DurationOfMusicalContent { get { throw this.NullAccess("DurationOfMusicalContent"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override EventDate OriginalReleaseDate { get { throw this.NullAccess("OriginalReleaseDate"); } }
		public override string OriginalLanguage { get { throw this.NullAccess("OriginalLanguage"); } }
		public override IList<CollectionDetailsByTerritory> CollectionDetailsByTerritorys { get { throw this.NullAccess("CollectionDetailsByTerritorys"); } }
		public override CollectionResourceReferenceList CollectionResourceReferenceList { get { throw this.NullAccess("CollectionResourceReferenceList"); } }
		public override CollectionWorkReferenceList CollectionWorkReferenceList { get { throw this.NullAccess("CollectionWorkReferenceList"); } }
		public override string RepresentativeImageReference { get { throw this.NullAccess("RepresentativeImageReference"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CollectionDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<ResourceContributor> Contributors { get; set; }
		public virtual bool? IsComplete { get; set; }
		public virtual IList<Character> Characters { get; set; }

		public CollectionDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
		}

		public CollectionDetailsByTerritory()
		{ }

		public static bool operator ==(CollectionDetailsByTerritory left, CollectionDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullCollectionDetailsByTerritory>(left, right);
		}

		public static bool operator !=(CollectionDetailsByTerritory left, CollectionDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionDetailsByTerritory : CollectionDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<ResourceContributor> Contributors { get { throw this.NullAccess("Contributors"); } }
		public override bool? IsComplete { get { throw this.NullAccess("IsComplete"); } }
		public override IList<Character> Characters { get { throw this.NullAccess("Characters"); } }
	}

	public partial class CollectionList
	{
		public virtual IList<Collection> Collections { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public CollectionList(XElement element)
		{
			Collections = element.Elements().Where(e => e.Name == "Collection").Select(e => new Collection(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionList()
		{ }

		public static bool operator ==(CollectionList left, CollectionList right)
		{
			return Utils.ValidatedEquals<NullCollectionList>(left, right);
		}

		public static bool operator !=(CollectionList left, CollectionList right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionList : CollectionList
	{
		public override IList<Collection> Collections { get { throw this.NullAccess("Collections"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CollectionResourceReference
	{
		public virtual string CollectionResourceReferenceProp { get; set; }
		public virtual string Duration { get; set; }

		public CollectionResourceReference(XElement element)
		{
			CollectionResourceReferenceProp = element.Elements().Where(e => e.Name == "CollectionResourceReference").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionResourceReference()
		{ }

		public static bool operator ==(CollectionResourceReference left, CollectionResourceReference right)
		{
			return Utils.ValidatedEquals<NullCollectionResourceReference>(left, right);
		}

		public static bool operator !=(CollectionResourceReference left, CollectionResourceReference right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionResourceReference : CollectionResourceReference
	{
		public override string CollectionResourceReferenceProp { get { throw this.NullAccess("CollectionResourceReferenceProp"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
	}

	public partial class CollectionResourceReferenceList
	{
		public virtual IList<CollectionResourceReference> CollectionResourceReferences { get; set; }

		public CollectionResourceReferenceList(XElement element)
		{
			CollectionResourceReferences = element.Elements().Where(e => e.Name == "CollectionResourceReference").Select(e => new CollectionResourceReference(e)).ToList();
		}

		public CollectionResourceReferenceList()
		{ }

		public static bool operator ==(CollectionResourceReferenceList left, CollectionResourceReferenceList right)
		{
			return Utils.ValidatedEquals<NullCollectionResourceReferenceList>(left, right);
		}

		public static bool operator !=(CollectionResourceReferenceList left, CollectionResourceReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionResourceReferenceList : CollectionResourceReferenceList
	{
		public override IList<CollectionResourceReference> CollectionResourceReferences { get { throw this.NullAccess("CollectionResourceReferences"); } }
	}

	public partial class CollectionWorkReference
	{
		public virtual string CollectionWorkReferenceProp { get; set; }
		public virtual string Duration { get; set; }

		public CollectionWorkReference(XElement element)
		{
			CollectionWorkReferenceProp = element.Elements().Where(e => e.Name == "CollectionWorkReference").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionWorkReference()
		{ }

		public static bool operator ==(CollectionWorkReference left, CollectionWorkReference right)
		{
			return Utils.ValidatedEquals<NullCollectionWorkReference>(left, right);
		}

		public static bool operator !=(CollectionWorkReference left, CollectionWorkReference right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionWorkReference : CollectionWorkReference
	{
		public override string CollectionWorkReferenceProp { get { throw this.NullAccess("CollectionWorkReferenceProp"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
	}

	public partial class CollectionWorkReferenceList
	{
		public virtual IList<CollectionWorkReference> CollectionWorkReferences { get; set; }

		public CollectionWorkReferenceList(XElement element)
		{
			CollectionWorkReferences = element.Elements().Where(e => e.Name == "CollectionWorkReference").Select(e => new CollectionWorkReference(e)).ToList();
		}

		public CollectionWorkReferenceList()
		{ }

		public static bool operator ==(CollectionWorkReferenceList left, CollectionWorkReferenceList right)
		{
			return Utils.ValidatedEquals<NullCollectionWorkReferenceList>(left, right);
		}

		public static bool operator !=(CollectionWorkReferenceList left, CollectionWorkReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionWorkReferenceList : CollectionWorkReferenceList
	{
		public override IList<CollectionWorkReference> CollectionWorkReferences { get { throw this.NullAccess("CollectionWorkReferences"); } }
	}

	public partial class Condition
	{
		public virtual decimal? Value { get; set; }
		public virtual string Unit { get; set; }
		public virtual string RelationalRelator { get; set; }

		public Condition(XElement element)
		{
			Value = element.Elements().Where(e => e.Name == "Value").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			Unit = element.Elements().Where(e => e.Name == "Unit").Select(e => e.Value).SingleOrDefault();
			RelationalRelator = element.Elements().Where(e => e.Name == "RelationalRelator").Select(e => e.Value).SingleOrDefault();
		}

		public Condition()
		{ }

		public static bool operator ==(Condition left, Condition right)
		{
			return Utils.ValidatedEquals<NullCondition>(left, right);
		}

		public static bool operator !=(Condition left, Condition right)
		{
			return !(left == right);
		}
	}

	internal class NullCondition : Condition
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string Unit { get { throw this.NullAccess("Unit"); } }
		public override string RelationalRelator { get { throw this.NullAccess("RelationalRelator"); } }
	}

	public partial class Cue
	{
		public virtual CueUseType CueUseType { get; set; }
		public virtual CueThemeType CueThemeType { get; set; }
		public virtual CueVocalType CueVocalType { get; set; }
		public virtual bool? IsDance { get; set; }
		public virtual CueVisualPerceptionType CueVisualPerceptionType { get; set; }
		public virtual CueOrigin CueOrigin { get; set; }
		public virtual IList<CueCreationReference> CueCreationReferences { get; set; }
		public virtual string ReferencedCreationType { get; set; }
		public virtual CreationId ReferencedCreationId { get; set; }
		public virtual IList<Title> ReferencedCreationTitles { get; set; }
		public virtual IList<ResourceContributor> ReferencedCreationContributors { get; set; }
		public virtual IList<Character> ReferencedCreationCharacters { get; set; }
		public virtual bool? HasMusicalContent { get; set; }
		public virtual string StartTime { get; set; }
		public virtual string Duration { get; set; }
		public virtual string EndTime { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }

		public Cue(XElement element)
		{
			CueUseType = element.Elements().Where(e => e.Name == "CueUseType").Select(e => new CueUseType(e)).SingleOrDefault() ?? new NullCueUseType();
			CueThemeType = element.Elements().Where(e => e.Name == "CueThemeType").Select(e => new CueThemeType(e)).SingleOrDefault() ?? new NullCueThemeType();
			CueVocalType = element.Elements().Where(e => e.Name == "CueVocalType").Select(e => new CueVocalType(e)).SingleOrDefault() ?? new NullCueVocalType();
			IsDance = element.Elements().Where(e => e.Name == "IsDance").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			CueVisualPerceptionType = element.Elements().Where(e => e.Name == "CueVisualPerceptionType").Select(e => new CueVisualPerceptionType(e)).SingleOrDefault() ?? new NullCueVisualPerceptionType();
			CueOrigin = element.Elements().Where(e => e.Name == "CueOrigin").Select(e => new CueOrigin(e)).SingleOrDefault() ?? new NullCueOrigin();
			CueCreationReferences = element.Elements().Where(e => e.Name == "CueCreationReference").Select(e => new CueCreationReference(e)).ToList();
			ReferencedCreationType = element.Elements().Where(e => e.Name == "ReferencedCreationType").Select(e => e.Value).SingleOrDefault();
			ReferencedCreationId = element.Elements().Where(e => e.Name == "ReferencedCreationId").Select(e => new CreationId(e)).SingleOrDefault() ?? new NullCreationId();
			ReferencedCreationTitles = element.Elements().Where(e => e.Name == "ReferencedCreationTitle").Select(e => new Title(e)).ToList();
			ReferencedCreationContributors = element.Elements().Where(e => e.Name == "ReferencedCreationContributor").Select(e => new ResourceContributor(e)).ToList();
			ReferencedCreationCharacters = element.Elements().Where(e => e.Name == "ReferencedCreationCharacter").Select(e => new Character(e)).ToList();
			HasMusicalContent = element.Elements().Where(e => e.Name == "HasMusicalContent").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
		}

		public Cue()
		{ }

		public static bool operator ==(Cue left, Cue right)
		{
			return Utils.ValidatedEquals<NullCue>(left, right);
		}

		public static bool operator !=(Cue left, Cue right)
		{
			return !(left == right);
		}
	}

	internal class NullCue : Cue
	{
		public override CueUseType CueUseType { get { throw this.NullAccess("CueUseType"); } }
		public override CueThemeType CueThemeType { get { throw this.NullAccess("CueThemeType"); } }
		public override CueVocalType CueVocalType { get { throw this.NullAccess("CueVocalType"); } }
		public override bool? IsDance { get { throw this.NullAccess("IsDance"); } }
		public override CueVisualPerceptionType CueVisualPerceptionType { get { throw this.NullAccess("CueVisualPerceptionType"); } }
		public override CueOrigin CueOrigin { get { throw this.NullAccess("CueOrigin"); } }
		public override IList<CueCreationReference> CueCreationReferences { get { throw this.NullAccess("CueCreationReferences"); } }
		public override string ReferencedCreationType { get { throw this.NullAccess("ReferencedCreationType"); } }
		public override CreationId ReferencedCreationId { get { throw this.NullAccess("ReferencedCreationId"); } }
		public override IList<Title> ReferencedCreationTitles { get { throw this.NullAccess("ReferencedCreationTitles"); } }
		public override IList<ResourceContributor> ReferencedCreationContributors { get { throw this.NullAccess("ReferencedCreationContributors"); } }
		public override IList<Character> ReferencedCreationCharacters { get { throw this.NullAccess("ReferencedCreationCharacters"); } }
		public override bool? HasMusicalContent { get { throw this.NullAccess("HasMusicalContent"); } }
		public override string StartTime { get { throw this.NullAccess("StartTime"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override string EndTime { get { throw this.NullAccess("EndTime"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
	}

	public partial class CueSheet
	{
		public virtual IList<ProprietaryId> CueSheetIds { get; set; }
		public virtual string CueSheetReference { get; set; }
		public virtual CueSheetType CueSheetType { get; set; }
		public virtual IList<Cue> Cues { get; set; }

		public CueSheet(XElement element)
		{
			CueSheetIds = element.Elements().Where(e => e.Name == "CueSheetId").Select(e => new ProprietaryId(e)).ToList();
			CueSheetReference = element.Elements().Where(e => e.Name == "CueSheetReference").Select(e => e.Value).SingleOrDefault();
			CueSheetType = element.Elements().Where(e => e.Name == "CueSheetType").Select(e => new CueSheetType(e)).SingleOrDefault() ?? new NullCueSheetType();
			Cues = element.Elements().Where(e => e.Name == "Cue").Select(e => new Cue(e)).ToList();
		}

		public CueSheet()
		{ }

		public static bool operator ==(CueSheet left, CueSheet right)
		{
			return Utils.ValidatedEquals<NullCueSheet>(left, right);
		}

		public static bool operator !=(CueSheet left, CueSheet right)
		{
			return !(left == right);
		}
	}

	internal class NullCueSheet : CueSheet
	{
		public override IList<ProprietaryId> CueSheetIds { get { throw this.NullAccess("CueSheetIds"); } }
		public override string CueSheetReference { get { throw this.NullAccess("CueSheetReference"); } }
		public override CueSheetType CueSheetType { get { throw this.NullAccess("CueSheetType"); } }
		public override IList<Cue> Cues { get { throw this.NullAccess("Cues"); } }
	}

	public partial class CueSheetList
	{
		public virtual IList<CueSheet> CueSheets { get; set; }

		public CueSheetList(XElement element)
		{
			CueSheets = element.Elements().Where(e => e.Name == "CueSheet").Select(e => new CueSheet(e)).ToList();
		}

		public CueSheetList()
		{ }

		public static bool operator ==(CueSheetList left, CueSheetList right)
		{
			return Utils.ValidatedEquals<NullCueSheetList>(left, right);
		}

		public static bool operator !=(CueSheetList left, CueSheetList right)
		{
			return !(left == right);
		}
	}

	internal class NullCueSheetList : CueSheetList
	{
		public override IList<CueSheet> CueSheets { get { throw this.NullAccess("CueSheets"); } }
	}

	public partial class Deal
	{
		public virtual IList<DealReference> DealReferences { get; set; }
		public virtual DealTerms DealTerms { get; set; }
		public virtual ResourceUsage ResourceUsage { get; set; }
		public virtual DealTechnicalResourceDetailsReferenceList DealTechnicalResourceDetailsReferenceList { get; set; }
		public virtual IList<WebPage> DistributionChannelPages { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Deal(XElement element)
		{
			DealReferences = element.Elements().Where(e => e.Name == "DealReference").Select(e => new DealReference(e)).ToList();
			DealTerms = element.Elements().Where(e => e.Name == "DealTerms").Select(e => new DealTerms(e)).SingleOrDefault() ?? new NullDealTerms();
			ResourceUsage = element.Elements().Where(e => e.Name == "ResourceUsage").Select(e => new ResourceUsage(e)).SingleOrDefault() ?? new NullResourceUsage();
			DealTechnicalResourceDetailsReferenceList = element.Elements().Where(e => e.Name == "DealTechnicalResourceDetailsReferenceList").Select(e => new DealTechnicalResourceDetailsReferenceList(e)).SingleOrDefault() ?? new NullDealTechnicalResourceDetailsReferenceList();
			DistributionChannelPages = element.Elements().Where(e => e.Name == "DistributionChannelPage").Select(e => new WebPage(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Deal()
		{ }

		public static bool operator ==(Deal left, Deal right)
		{
			return Utils.ValidatedEquals<NullDeal>(left, right);
		}

		public static bool operator !=(Deal left, Deal right)
		{
			return !(left == right);
		}
	}

	internal class NullDeal : Deal
	{
		public override IList<DealReference> DealReferences { get { throw this.NullAccess("DealReferences"); } }
		public override DealTerms DealTerms { get { throw this.NullAccess("DealTerms"); } }
		public override ResourceUsage ResourceUsage { get { throw this.NullAccess("ResourceUsage"); } }
		public override DealTechnicalResourceDetailsReferenceList DealTechnicalResourceDetailsReferenceList { get { throw this.NullAccess("DealTechnicalResourceDetailsReferenceList"); } }
		public override IList<WebPage> DistributionChannelPages { get { throw this.NullAccess("DistributionChannelPages"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class DealList
	{
		public virtual IList<ReleaseDeal> ReleaseDeals { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public DealList(XElement element)
		{
			ReleaseDeals = element.Elements().Where(e => e.Name == "ReleaseDeal").Select(e => new ReleaseDeal(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public DealList()
		{ }

		public static bool operator ==(DealList left, DealList right)
		{
			return Utils.ValidatedEquals<NullDealList>(left, right);
		}

		public static bool operator !=(DealList left, DealList right)
		{
			return !(left == right);
		}
	}

	internal class NullDealList : DealList
	{
		public override IList<ReleaseDeal> ReleaseDeals { get { throw this.NullAccess("ReleaseDeals"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class DealTechnicalResourceDetailsReferenceList
	{
		public virtual IList<string> DealTechnicalResourceDetailsReferences { get; set; }

		public DealTechnicalResourceDetailsReferenceList(XElement element)
		{
			DealTechnicalResourceDetailsReferences = element.Elements().Where(e => e.Name == "DealTechnicalResourceDetailsReference").Select(e => e.Value).ToList();
		}

		public DealTechnicalResourceDetailsReferenceList()
		{ }

		public static bool operator ==(DealTechnicalResourceDetailsReferenceList left, DealTechnicalResourceDetailsReferenceList right)
		{
			return Utils.ValidatedEquals<NullDealTechnicalResourceDetailsReferenceList>(left, right);
		}

		public static bool operator !=(DealTechnicalResourceDetailsReferenceList left, DealTechnicalResourceDetailsReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullDealTechnicalResourceDetailsReferenceList : DealTechnicalResourceDetailsReferenceList
	{
		public override IList<string> DealTechnicalResourceDetailsReferences { get { throw this.NullAccess("DealTechnicalResourceDetailsReferences"); } }
	}

	public partial class DealTerms
	{
		public virtual IList<CommercialModelType> CommercialModelTypes { get; set; }
		public virtual IList<Usage> Usages { get; set; }
		public virtual bool? AllDealsCancelled { get; set; }
		public virtual bool? TakeDown { get; set; }
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<DSP> DistributionChannels { get; set; }
		public virtual IList<DSP> ExcludedDistributionChannels { get; set; }
		public virtual IList<PriceInformation> PriceInformations { get; set; }
		public virtual bool? IsPromotional { get; set; }
		public virtual PromotionalCode PromotionalCode { get; set; }
		public virtual IList<Period> ValidityPeriods { get; set; }
		public virtual ConsumerRentalPeriod ConsumerRentalPeriod { get; set; }
		public virtual EventDate PreOrderReleaseDate { get; set; }
		public virtual EventDate PreOrderPreviewDate { get; set; }
		public virtual bool? IsExclusive { get; set; }
		public virtual IList<RelatedReleaseOfferSet> RelatedReleaseOfferSets { get; set; }
		public virtual PhysicalReturns PhysicalReturns { get; set; }
		public virtual int? NumberOfProductsPerCarton { get; set; }
		public virtual IList<RightsClaimPolicy> RightsClaimPolicys { get; set; }
		public virtual IList<WebPolicy> WebPolicys { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public DealTerms(XElement element)
		{
			CommercialModelTypes = element.Elements().Where(e => e.Name == "CommercialModelType").Select(e => new CommercialModelType(e)).ToList();
			Usages = element.Elements().Where(e => e.Name == "Usage").Select(e => new Usage(e)).ToList();
			AllDealsCancelled = element.Elements().Where(e => e.Name == "AllDealsCancelled").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			TakeDown = element.Elements().Where(e => e.Name == "TakeDown").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DistributionChannels = element.Elements().Where(e => e.Name == "DistributionChannel").Select(e => new DSP(e)).ToList();
			ExcludedDistributionChannels = element.Elements().Where(e => e.Name == "ExcludedDistributionChannel").Select(e => new DSP(e)).ToList();
			PriceInformations = element.Elements().Where(e => e.Name == "PriceInformation").Select(e => new PriceInformation(e)).ToList();
			IsPromotional = element.Elements().Where(e => e.Name == "IsPromotional").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PromotionalCode = element.Elements().Where(e => e.Name == "PromotionalCode").Select(e => new PromotionalCode(e)).SingleOrDefault() ?? new NullPromotionalCode();
			ValidityPeriods = element.Elements().Where(e => e.Name == "ValidityPeriod").Select(e => new Period(e)).ToList();
			ConsumerRentalPeriod = element.Elements().Where(e => e.Name == "ConsumerRentalPeriod").Select(e => new ConsumerRentalPeriod(e)).SingleOrDefault() ?? new NullConsumerRentalPeriod();
			PreOrderReleaseDate = element.Elements().Where(e => e.Name == "PreOrderReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			PreOrderPreviewDate = element.Elements().Where(e => e.Name == "PreOrderPreviewDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			IsExclusive = element.Elements().Where(e => e.Name == "IsExclusive").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			RelatedReleaseOfferSets = element.Elements().Where(e => e.Name == "RelatedReleaseOfferSet").Select(e => new RelatedReleaseOfferSet(e)).ToList();
			PhysicalReturns = element.Elements().Where(e => e.Name == "PhysicalReturns").Select(e => new PhysicalReturns(e)).SingleOrDefault() ?? new NullPhysicalReturns();
			NumberOfProductsPerCarton = element.Elements().Where(e => e.Name == "NumberOfProductsPerCarton").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			RightsClaimPolicys = element.Elements().Where(e => e.Name == "RightsClaimPolicy").Select(e => new RightsClaimPolicy(e)).ToList();
			WebPolicys = element.Elements().Where(e => e.Name == "WebPolicy").Select(e => new WebPolicy(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public DealTerms()
		{ }

		public static bool operator ==(DealTerms left, DealTerms right)
		{
			return Utils.ValidatedEquals<NullDealTerms>(left, right);
		}

		public static bool operator !=(DealTerms left, DealTerms right)
		{
			return !(left == right);
		}
	}

	internal class NullDealTerms : DealTerms
	{
		public override IList<CommercialModelType> CommercialModelTypes { get { throw this.NullAccess("CommercialModelTypes"); } }
		public override IList<Usage> Usages { get { throw this.NullAccess("Usages"); } }
		public override bool? AllDealsCancelled { get { throw this.NullAccess("AllDealsCancelled"); } }
		public override bool? TakeDown { get { throw this.NullAccess("TakeDown"); } }
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<DSP> DistributionChannels { get { throw this.NullAccess("DistributionChannels"); } }
		public override IList<DSP> ExcludedDistributionChannels { get { throw this.NullAccess("ExcludedDistributionChannels"); } }
		public override IList<PriceInformation> PriceInformations { get { throw this.NullAccess("PriceInformations"); } }
		public override bool? IsPromotional { get { throw this.NullAccess("IsPromotional"); } }
		public override PromotionalCode PromotionalCode { get { throw this.NullAccess("PromotionalCode"); } }
		public override IList<Period> ValidityPeriods { get { throw this.NullAccess("ValidityPeriods"); } }
		public override ConsumerRentalPeriod ConsumerRentalPeriod { get { throw this.NullAccess("ConsumerRentalPeriod"); } }
		public override EventDate PreOrderReleaseDate { get { throw this.NullAccess("PreOrderReleaseDate"); } }
		public override EventDate PreOrderPreviewDate { get { throw this.NullAccess("PreOrderPreviewDate"); } }
		public override bool? IsExclusive { get { throw this.NullAccess("IsExclusive"); } }
		public override IList<RelatedReleaseOfferSet> RelatedReleaseOfferSets { get { throw this.NullAccess("RelatedReleaseOfferSets"); } }
		public override PhysicalReturns PhysicalReturns { get { throw this.NullAccess("PhysicalReturns"); } }
		public override int? NumberOfProductsPerCarton { get { throw this.NullAccess("NumberOfProductsPerCarton"); } }
		public override IList<RightsClaimPolicy> RightsClaimPolicys { get { throw this.NullAccess("RightsClaimPolicys"); } }
		public override IList<WebPolicy> WebPolicys { get { throw this.NullAccess("WebPolicys"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Image
	{
		public virtual ImageType ImageType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<ImageId> ImageIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual IList<ImageDetailsByTerritory> ImageDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Image(XElement element)
		{
			ImageType = element.Elements().Where(e => e.Name == "ImageType").Select(e => new ImageType(e)).SingleOrDefault() ?? new NullImageType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			ImageIds = element.Elements().Where(e => e.Name == "ImageId").Select(e => new ImageId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			ImageDetailsByTerritorys = element.Elements().Where(e => e.Name == "ImageDetailsByTerritory").Select(e => new ImageDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Image()
		{ }

		public static bool operator ==(Image left, Image right)
		{
			return Utils.ValidatedEquals<NullImage>(left, right);
		}

		public static bool operator !=(Image left, Image right)
		{
			return !(left == right);
		}
	}

	internal class NullImage : Image
	{
		public override ImageType ImageType { get { throw this.NullAccess("ImageType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<ImageId> ImageIds { get { throw this.NullAccess("ImageIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override IList<ImageDetailsByTerritory> ImageDetailsByTerritorys { get { throw this.NullAccess("ImageDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ImageDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual Description Description { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<TechnicalImageDetails> TechnicalImageDetails { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ImageDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			Description = element.Elements().Where(e => e.Name == "Description").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalImageDetails = element.Elements().Where(e => e.Name == "TechnicalImageDetails").Select(e => new TechnicalImageDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ImageDetailsByTerritory()
		{ }

		public static bool operator ==(ImageDetailsByTerritory left, ImageDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullImageDetailsByTerritory>(left, right);
		}

		public static bool operator !=(ImageDetailsByTerritory left, ImageDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullImageDetailsByTerritory : ImageDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override Description Description { get { throw this.NullAccess("Description"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<TechnicalImageDetails> TechnicalImageDetails { get { throw this.NullAccess("TechnicalImageDetails"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MIDI
	{
		public virtual MidiType MidiType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<MidiId> MidiIds { get; set; }
		public virtual IList<MusicalWorkId> IndirectMidiIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual ReferenceTitle ReferenceTitle { get; set; }
		public virtual Description InstrumentationDescription { get; set; }
		public virtual bool? IsMedley { get; set; }
		public virtual bool? IsPotpourri { get; set; }
		public virtual bool? IsInstrumental { get; set; }
		public virtual bool? IsBackground { get; set; }
		public virtual bool? IsHiddenResource { get; set; }
		public virtual bool? IsBonusResource { get; set; }
		public virtual bool? IsComputerGenerated { get; set; }
		public virtual bool? NoSilenceBefore { get; set; }
		public virtual bool? NoSilenceAfter { get; set; }
		public virtual bool? PerformerInformationRequired { get; set; }
		public virtual string LanguageOfPerformance { get; set; }
		public virtual string Duration { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public virtual ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual EventDate MasteredDate { get; set; }
		public virtual IList<MidiDetailsByTerritory> MidiDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MIDI(XElement element)
		{
			MidiType = element.Elements().Where(e => e.Name == "MidiType").Select(e => new MidiType(e)).SingleOrDefault() ?? new NullMidiType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			MidiIds = element.Elements().Where(e => e.Name == "MidiId").Select(e => new MidiId(e)).ToList();
			IndirectMidiIds = element.Elements().Where(e => e.Name == "IndirectMidiId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			InstrumentationDescription = element.Elements().Where(e => e.Name == "InstrumentationDescription").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			IsMedley = element.Elements().Where(e => e.Name == "IsMedley").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsPotpourri = element.Elements().Where(e => e.Name == "IsPotpourri").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsInstrumental = element.Elements().Where(e => e.Name == "IsInstrumental").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBackground = element.Elements().Where(e => e.Name == "IsBackground").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsComputerGenerated = element.Elements().Where(e => e.Name == "IsComputerGenerated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			NoSilenceBefore = element.Elements().Where(e => e.Name == "NoSilenceBefore").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			NoSilenceAfter = element.Elements().Where(e => e.Name == "NoSilenceAfter").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PerformerInformationRequired = element.Elements().Where(e => e.Name == "PerformerInformationRequired").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageOfPerformance = element.Elements().Where(e => e.Name == "LanguageOfPerformance").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault() ?? new NullResourceMusicalWorkReferenceList();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceContainedResourceReferenceList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			MasteredDate = element.Elements().Where(e => e.Name == "MasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			MidiDetailsByTerritorys = element.Elements().Where(e => e.Name == "MidiDetailsByTerritory").Select(e => new MidiDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MIDI()
		{ }

		public static bool operator ==(MIDI left, MIDI right)
		{
			return Utils.ValidatedEquals<NullMIDI>(left, right);
		}

		public static bool operator !=(MIDI left, MIDI right)
		{
			return !(left == right);
		}
	}

	internal class NullMIDI : MIDI
	{
		public override MidiType MidiType { get { throw this.NullAccess("MidiType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<MidiId> MidiIds { get { throw this.NullAccess("MidiIds"); } }
		public override IList<MusicalWorkId> IndirectMidiIds { get { throw this.NullAccess("IndirectMidiIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override ReferenceTitle ReferenceTitle { get { throw this.NullAccess("ReferenceTitle"); } }
		public override Description InstrumentationDescription { get { throw this.NullAccess("InstrumentationDescription"); } }
		public override bool? IsMedley { get { throw this.NullAccess("IsMedley"); } }
		public override bool? IsPotpourri { get { throw this.NullAccess("IsPotpourri"); } }
		public override bool? IsInstrumental { get { throw this.NullAccess("IsInstrumental"); } }
		public override bool? IsBackground { get { throw this.NullAccess("IsBackground"); } }
		public override bool? IsHiddenResource { get { throw this.NullAccess("IsHiddenResource"); } }
		public override bool? IsBonusResource { get { throw this.NullAccess("IsBonusResource"); } }
		public override bool? IsComputerGenerated { get { throw this.NullAccess("IsComputerGenerated"); } }
		public override bool? NoSilenceBefore { get { throw this.NullAccess("NoSilenceBefore"); } }
		public override bool? NoSilenceAfter { get { throw this.NullAccess("NoSilenceAfter"); } }
		public override bool? PerformerInformationRequired { get { throw this.NullAccess("PerformerInformationRequired"); } }
		public override string LanguageOfPerformance { get { throw this.NullAccess("LanguageOfPerformance"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get { throw this.NullAccess("ResourceMusicalWorkReferenceList"); } }
		public override ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get { throw this.NullAccess("ResourceContainedResourceReferenceList"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override EventDate MasteredDate { get { throw this.NullAccess("MasteredDate"); } }
		public override IList<MidiDetailsByTerritory> MidiDetailsByTerritorys { get { throw this.NullAccess("MidiDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MidiDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual IList<RightsController> RightsControllers { get; set; }
		public virtual EventDate RemasteredDate { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual string SequenceNumber { get; set; }
		public virtual IList<HostSoundCarrier> HostSoundCarriers { get; set; }
		public virtual Comment MarketingComment { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual IList<TechnicalMidiDetails> TechnicalMidiDetails { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MidiDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			HostSoundCarriers = element.Elements().Where(e => e.Name == "HostSoundCarrier").Select(e => new HostSoundCarrier(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault() ?? new NullComment();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			TechnicalMidiDetails = element.Elements().Where(e => e.Name == "TechnicalMidiDetails").Select(e => new TechnicalMidiDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MidiDetailsByTerritory()
		{ }

		public static bool operator ==(MidiDetailsByTerritory left, MidiDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullMidiDetailsByTerritory>(left, right);
		}

		public static bool operator !=(MidiDetailsByTerritory left, MidiDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullMidiDetailsByTerritory : MidiDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override IList<RightsController> RightsControllers { get { throw this.NullAccess("RightsControllers"); } }
		public override EventDate RemasteredDate { get { throw this.NullAccess("RemasteredDate"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override string SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override IList<HostSoundCarrier> HostSoundCarriers { get { throw this.NullAccess("HostSoundCarriers"); } }
		public override Comment MarketingComment { get { throw this.NullAccess("MarketingComment"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override IList<TechnicalMidiDetails> TechnicalMidiDetails { get { throw this.NullAccess("TechnicalMidiDetails"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class PhysicalReturns
	{
		public virtual bool? PhysicalReturnsAllowed { get; set; }
		public virtual DateTime? LatestDateForPhysicalReturns { get; set; }

		public PhysicalReturns(XElement element)
		{
			PhysicalReturnsAllowed = element.Elements().Where(e => e.Name == "PhysicalReturnsAllowed").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LatestDateForPhysicalReturns = element.Elements().Where(e => e.Name == "LatestDateForPhysicalReturns").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
		}

		public PhysicalReturns()
		{ }

		public static bool operator ==(PhysicalReturns left, PhysicalReturns right)
		{
			return Utils.ValidatedEquals<NullPhysicalReturns>(left, right);
		}

		public static bool operator !=(PhysicalReturns left, PhysicalReturns right)
		{
			return !(left == right);
		}
	}

	internal class NullPhysicalReturns : PhysicalReturns
	{
		public override bool? PhysicalReturnsAllowed { get { throw this.NullAccess("PhysicalReturnsAllowed"); } }
		public override DateTime? LatestDateForPhysicalReturns { get { throw this.NullAccess("LatestDateForPhysicalReturns"); } }
	}

	public partial class PreviewDetails
	{
		public virtual Description PartType { get; set; }
		public virtual decimal? TopLeftCorner { get; set; }
		public virtual decimal? BottomRightCorner { get; set; }
		public virtual string ExpressionType { get; set; }

		public PreviewDetails(XElement element)
		{
			PartType = element.Elements().Where(e => e.Name == "PartType").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			TopLeftCorner = element.Elements().Where(e => e.Name == "TopLeftCorner").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			BottomRightCorner = element.Elements().Where(e => e.Name == "BottomRightCorner").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			ExpressionType = element.Elements().Where(e => e.Name == "ExpressionType").Select(e => e.Value).SingleOrDefault();
		}

		public PreviewDetails()
		{ }

		public static bool operator ==(PreviewDetails left, PreviewDetails right)
		{
			return Utils.ValidatedEquals<NullPreviewDetails>(left, right);
		}

		public static bool operator !=(PreviewDetails left, PreviewDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullPreviewDetails : PreviewDetails
	{
		public override Description PartType { get { throw this.NullAccess("PartType"); } }
		public override decimal? TopLeftCorner { get { throw this.NullAccess("TopLeftCorner"); } }
		public override decimal? BottomRightCorner { get { throw this.NullAccess("BottomRightCorner"); } }
		public override string ExpressionType { get { throw this.NullAccess("ExpressionType"); } }
	}

	public partial class RelatedReleaseOfferSet
	{
		public virtual IList<ReleaseId> ReleaseIds { get; set; }
		public virtual Description ReleaseDescription { get; set; }
		public virtual IList<Deal> Deals { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public RelatedReleaseOfferSet(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReleaseDescription = element.Elements().Where(e => e.Name == "ReleaseDescription").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			Deals = element.Elements().Where(e => e.Name == "Deal").Select(e => new Deal(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public RelatedReleaseOfferSet()
		{ }

		public static bool operator ==(RelatedReleaseOfferSet left, RelatedReleaseOfferSet right)
		{
			return Utils.ValidatedEquals<NullRelatedReleaseOfferSet>(left, right);
		}

		public static bool operator !=(RelatedReleaseOfferSet left, RelatedReleaseOfferSet right)
		{
			return !(left == right);
		}
	}

	internal class NullRelatedReleaseOfferSet : RelatedReleaseOfferSet
	{
		public override IList<ReleaseId> ReleaseIds { get { throw this.NullAccess("ReleaseIds"); } }
		public override Description ReleaseDescription { get { throw this.NullAccess("ReleaseDescription"); } }
		public override IList<Deal> Deals { get { throw this.NullAccess("Deals"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Release
	{
		public virtual IList<ReleaseId> ReleaseIds { get; set; }
		public virtual IList<string> ReleaseReferences { get; set; }
		public virtual IList<ExternalResourceLink> ExternalResourceLinks { get; set; }
		public virtual IList<SalesReportingProxyReleaseId> SalesReportingProxyReleaseIds { get; set; }
		public virtual ReferenceTitle ReferenceTitle { get; set; }
		public virtual ReleaseResourceReferenceList ReleaseResourceReferenceList { get; set; }
		public virtual ResourceOmissionReason ResourceOmissionReason { get; set; }
		public virtual ReleaseCollectionReferenceList ReleaseCollectionReferenceList { get; set; }
		public virtual IList<ReleaseType> ReleaseTypes { get; set; }
		public virtual IList<ReleaseDetailsByTerritory> ReleaseDetailsByTerritorys { get; set; }
		public virtual string Duration { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual IList<WebPage> ArtistProfilePages { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Release(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReleaseReferences = element.Elements().Where(e => e.Name == "ReleaseReference").Select(e => e.Value).ToList();
			ExternalResourceLinks = element.Elements().Where(e => e.Name == "ExternalResourceLink").Select(e => new ExternalResourceLink(e)).ToList();
			SalesReportingProxyReleaseIds = element.Elements().Where(e => e.Name == "SalesReportingProxyReleaseId").Select(e => new SalesReportingProxyReleaseId(e)).ToList();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			ReleaseResourceReferenceList = element.Elements().Where(e => e.Name == "ReleaseResourceReferenceList").Select(e => new ReleaseResourceReferenceList(e)).SingleOrDefault() ?? new NullReleaseResourceReferenceList();
			ResourceOmissionReason = element.Elements().Where(e => e.Name == "ResourceOmissionReason").Select(e => new ResourceOmissionReason(e)).SingleOrDefault() ?? new NullResourceOmissionReason();
			ReleaseCollectionReferenceList = element.Elements().Where(e => e.Name == "ReleaseCollectionReferenceList").Select(e => new ReleaseCollectionReferenceList(e)).SingleOrDefault() ?? new NullReleaseCollectionReferenceList();
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			ReleaseDetailsByTerritorys = element.Elements().Where(e => e.Name == "ReleaseDetailsByTerritory").Select(e => new ReleaseDetailsByTerritory(e)).ToList();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			ArtistProfilePages = element.Elements().Where(e => e.Name == "ArtistProfilePage").Select(e => new WebPage(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Release()
		{ }

		public static bool operator ==(Release left, Release right)
		{
			return Utils.ValidatedEquals<NullRelease>(left, right);
		}

		public static bool operator !=(Release left, Release right)
		{
			return !(left == right);
		}
	}

	internal class NullRelease : Release
	{
		public override IList<ReleaseId> ReleaseIds { get { throw this.NullAccess("ReleaseIds"); } }
		public override IList<string> ReleaseReferences { get { throw this.NullAccess("ReleaseReferences"); } }
		public override IList<ExternalResourceLink> ExternalResourceLinks { get { throw this.NullAccess("ExternalResourceLinks"); } }
		public override IList<SalesReportingProxyReleaseId> SalesReportingProxyReleaseIds { get { throw this.NullAccess("SalesReportingProxyReleaseIds"); } }
		public override ReferenceTitle ReferenceTitle { get { throw this.NullAccess("ReferenceTitle"); } }
		public override ReleaseResourceReferenceList ReleaseResourceReferenceList { get { throw this.NullAccess("ReleaseResourceReferenceList"); } }
		public override ResourceOmissionReason ResourceOmissionReason { get { throw this.NullAccess("ResourceOmissionReason"); } }
		public override ReleaseCollectionReferenceList ReleaseCollectionReferenceList { get { throw this.NullAccess("ReleaseCollectionReferenceList"); } }
		public override IList<ReleaseType> ReleaseTypes { get { throw this.NullAccess("ReleaseTypes"); } }
		public override IList<ReleaseDetailsByTerritory> ReleaseDetailsByTerritorys { get { throw this.NullAccess("ReleaseDetailsByTerritorys"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override IList<WebPage> ArtistProfilePages { get { throw this.NullAccess("ArtistProfilePages"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReleaseDeal
	{
		public virtual IList<string> DealReleaseReferences { get; set; }
		public virtual IList<Deal> Deals { get; set; }
		public virtual DateTime? EffectiveDate { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ReleaseDeal(XElement element)
		{
			DealReleaseReferences = element.Elements().Where(e => e.Name == "DealReleaseReference").Select(e => e.Value).ToList();
			Deals = element.Elements().Where(e => e.Name == "Deal").Select(e => new Deal(e)).ToList();
			EffectiveDate = element.Elements().Where(e => e.Name == "EffectiveDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseDeal()
		{ }

		public static bool operator ==(ReleaseDeal left, ReleaseDeal right)
		{
			return Utils.ValidatedEquals<NullReleaseDeal>(left, right);
		}

		public static bool operator !=(ReleaseDeal left, ReleaseDeal right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseDeal : ReleaseDeal
	{
		public override IList<string> DealReleaseReferences { get { throw this.NullAccess("DealReleaseReferences"); } }
		public override IList<Deal> Deals { get { throw this.NullAccess("Deals"); } }
		public override DateTime? EffectiveDate { get { throw this.NullAccess("EffectiveDate"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReleaseDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Name> DisplayArtistNames { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual bool? IsMultiArtistCompilation { get; set; }
		public virtual IList<AdministratingRecordCompany> AdministratingRecordCompanys { get; set; }
		public virtual IList<ReleaseType> ReleaseTypes { get; set; }
		public virtual IList<RelatedRelease> RelatedReleases { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<AvRating> AvRatings { get; set; }
		public virtual Comment MarketingComment { get; set; }
		public virtual IList<ResourceGroup> ResourceGroups { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual EventDate OriginalReleaseDate { get; set; }
		public virtual EventDate OriginalDigitalReleaseDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual IList<Character> Characters { get; set; }
		public virtual int? NumberOfUnitsPerPhysicalRelease { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ReleaseDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DisplayArtistNames = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).ToList();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			IsMultiArtistCompilation = element.Elements().Where(e => e.Name == "IsMultiArtistCompilation").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			AdministratingRecordCompanys = element.Elements().Where(e => e.Name == "AdministratingRecordCompany").Select(e => new AdministratingRecordCompany(e)).ToList();
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			RelatedReleases = element.Elements().Where(e => e.Name == "RelatedRelease").Select(e => new RelatedRelease(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			AvRatings = element.Elements().Where(e => e.Name == "AvRating").Select(e => new AvRating(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault() ?? new NullComment();
			ResourceGroups = element.Elements().Where(e => e.Name == "ResourceGroup").Select(e => new ResourceGroup(e)).ToList();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalDigitalReleaseDate = element.Elements().Where(e => e.Name == "OriginalDigitalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
			NumberOfUnitsPerPhysicalRelease = element.Elements().Where(e => e.Name == "NumberOfUnitsPerPhysicalRelease").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseDetailsByTerritory()
		{ }

		public static bool operator ==(ReleaseDetailsByTerritory left, ReleaseDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullReleaseDetailsByTerritory>(left, right);
		}

		public static bool operator !=(ReleaseDetailsByTerritory left, ReleaseDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseDetailsByTerritory : ReleaseDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Name> DisplayArtistNames { get { throw this.NullAccess("DisplayArtistNames"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override bool? IsMultiArtistCompilation { get { throw this.NullAccess("IsMultiArtistCompilation"); } }
		public override IList<AdministratingRecordCompany> AdministratingRecordCompanys { get { throw this.NullAccess("AdministratingRecordCompanys"); } }
		public override IList<ReleaseType> ReleaseTypes { get { throw this.NullAccess("ReleaseTypes"); } }
		public override IList<RelatedRelease> RelatedReleases { get { throw this.NullAccess("RelatedReleases"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<AvRating> AvRatings { get { throw this.NullAccess("AvRatings"); } }
		public override Comment MarketingComment { get { throw this.NullAccess("MarketingComment"); } }
		public override IList<ResourceGroup> ResourceGroups { get { throw this.NullAccess("ResourceGroups"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override EventDate OriginalReleaseDate { get { throw this.NullAccess("OriginalReleaseDate"); } }
		public override EventDate OriginalDigitalReleaseDate { get { throw this.NullAccess("OriginalDigitalReleaseDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override IList<Character> Characters { get { throw this.NullAccess("Characters"); } }
		public override int? NumberOfUnitsPerPhysicalRelease { get { throw this.NullAccess("NumberOfUnitsPerPhysicalRelease"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReleaseList
	{
		public virtual IList<Release> Releases { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ReleaseList(XElement element)
		{
			Releases = element.Elements().Where(e => e.Name == "Release").Select(e => new Release(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseList()
		{ }

		public static bool operator ==(ReleaseList left, ReleaseList right)
		{
			return Utils.ValidatedEquals<NullReleaseList>(left, right);
		}

		public static bool operator !=(ReleaseList left, ReleaseList right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseList : ReleaseList
	{
		public override IList<Release> Releases { get { throw this.NullAccess("Releases"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ResourceGroup
	{
		public virtual IList<Title> Titles { get; set; }
		public virtual int? SequenceNumber { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<ResourceGroup> ResourceGroups { get; set; }
		public virtual IList<ResourceGroupContentItem> ResourceGroupContentItems { get; set; }
		public virtual ResourceGroupResourceReferenceList ResourceGroupResourceReferenceList { get; set; }
		public virtual string ResourceGroupReleaseReference { get; set; }
		public virtual ReleaseId ReleaseId { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ResourceGroup(XElement element)
		{
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			ResourceGroups = element.Elements().Where(e => e.Name == "ResourceGroup").Select(e => new ResourceGroup(e)).ToList();
			ResourceGroupContentItems = element.Elements().Where(e => e.Name == "ResourceGroupContentItem").Select(e => new ResourceGroupContentItem(e)).ToList();
			ResourceGroupResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceGroupResourceReferenceList").Select(e => new ResourceGroupResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceGroupResourceReferenceList();
			ResourceGroupReleaseReference = element.Elements().Where(e => e.Name == "ResourceGroupReleaseReference").Select(e => e.Value).SingleOrDefault();
			ReleaseId = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).SingleOrDefault() ?? new NullReleaseId();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceGroup()
		{ }

		public static bool operator ==(ResourceGroup left, ResourceGroup right)
		{
			return Utils.ValidatedEquals<NullResourceGroup>(left, right);
		}

		public static bool operator !=(ResourceGroup left, ResourceGroup right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceGroup : ResourceGroup
	{
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<ResourceGroup> ResourceGroups { get { throw this.NullAccess("ResourceGroups"); } }
		public override IList<ResourceGroupContentItem> ResourceGroupContentItems { get { throw this.NullAccess("ResourceGroupContentItems"); } }
		public override ResourceGroupResourceReferenceList ResourceGroupResourceReferenceList { get { throw this.NullAccess("ResourceGroupResourceReferenceList"); } }
		public override string ResourceGroupReleaseReference { get { throw this.NullAccess("ResourceGroupReleaseReference"); } }
		public override ReleaseId ReleaseId { get { throw this.NullAccess("ReleaseId"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ResourceGroupContentItem
	{
		public virtual int? SequenceNumber { get; set; }
		public virtual int? SequenceSubNumber { get; set; }
		public virtual IList<ResourceType> ResourceTypes { get; set; }
		public virtual ReleaseResourceReference ReleaseResourceReference { get; set; }
		public virtual IList<LinkedReleaseResourceReference> LinkedReleaseResourceReferences { get; set; }
		public virtual string ResourceGroupContentItemReleaseReference { get; set; }
		public virtual ReleaseId ReleaseId { get; set; }
		public virtual string Duration { get; set; }
		public virtual bool? IsHiddenResource { get; set; }
		public virtual bool? IsBonusResource { get; set; }

		public ResourceGroupContentItem(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			SequenceSubNumber = element.Elements().Where(e => e.Name == "SequenceSubNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			ResourceTypes = element.Elements().Where(e => e.Name == "ResourceType").Select(e => new ResourceType(e)).ToList();
			ReleaseResourceReference = element.Elements().Where(e => e.Name == "ReleaseResourceReference").Select(e => new ReleaseResourceReference(e)).SingleOrDefault() ?? new NullReleaseResourceReference();
			LinkedReleaseResourceReferences = element.Elements().Where(e => e.Name == "LinkedReleaseResourceReference").Select(e => new LinkedReleaseResourceReference(e)).ToList();
			ResourceGroupContentItemReleaseReference = element.Elements().Where(e => e.Name == "ResourceGroupContentItemReleaseReference").Select(e => e.Value).SingleOrDefault();
			ReleaseId = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).SingleOrDefault() ?? new NullReleaseId();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public ResourceGroupContentItem()
		{ }

		public static bool operator ==(ResourceGroupContentItem left, ResourceGroupContentItem right)
		{
			return Utils.ValidatedEquals<NullResourceGroupContentItem>(left, right);
		}

		public static bool operator !=(ResourceGroupContentItem left, ResourceGroupContentItem right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceGroupContentItem : ResourceGroupContentItem
	{
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override int? SequenceSubNumber { get { throw this.NullAccess("SequenceSubNumber"); } }
		public override IList<ResourceType> ResourceTypes { get { throw this.NullAccess("ResourceTypes"); } }
		public override ReleaseResourceReference ReleaseResourceReference { get { throw this.NullAccess("ReleaseResourceReference"); } }
		public override IList<LinkedReleaseResourceReference> LinkedReleaseResourceReferences { get { throw this.NullAccess("LinkedReleaseResourceReferences"); } }
		public override string ResourceGroupContentItemReleaseReference { get { throw this.NullAccess("ResourceGroupContentItemReleaseReference"); } }
		public override ReleaseId ReleaseId { get { throw this.NullAccess("ReleaseId"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override bool? IsHiddenResource { get { throw this.NullAccess("IsHiddenResource"); } }
		public override bool? IsBonusResource { get { throw this.NullAccess("IsBonusResource"); } }
	}

	public partial class ResourceList
	{
		public virtual IList<SoundRecording> SoundRecordings { get; set; }
		public virtual IList<MIDI> MIDIs { get; set; }
		public virtual IList<Video> Videos { get; set; }
		public virtual IList<Image> Images { get; set; }
		public virtual IList<Text> Texts { get; set; }
		public virtual IList<SheetMusic> SheetMusics { get; set; }
		public virtual IList<Software> Softwares { get; set; }
		public virtual IList<UserDefinedResource> UserDefinedResources { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ResourceList(XElement element)
		{
			SoundRecordings = element.Elements().Where(e => e.Name == "SoundRecording").Select(e => new SoundRecording(e)).ToList();
			MIDIs = element.Elements().Where(e => e.Name == "MIDI").Select(e => new MIDI(e)).ToList();
			Videos = element.Elements().Where(e => e.Name == "Video").Select(e => new Video(e)).ToList();
			Images = element.Elements().Where(e => e.Name == "Image").Select(e => new Image(e)).ToList();
			Texts = element.Elements().Where(e => e.Name == "Text").Select(e => new Text(e)).ToList();
			SheetMusics = element.Elements().Where(e => e.Name == "SheetMusic").Select(e => new SheetMusic(e)).ToList();
			Softwares = element.Elements().Where(e => e.Name == "Software").Select(e => new Software(e)).ToList();
			UserDefinedResources = element.Elements().Where(e => e.Name == "UserDefinedResource").Select(e => new UserDefinedResource(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceList()
		{ }

		public static bool operator ==(ResourceList left, ResourceList right)
		{
			return Utils.ValidatedEquals<NullResourceList>(left, right);
		}

		public static bool operator !=(ResourceList left, ResourceList right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceList : ResourceList
	{
		public override IList<SoundRecording> SoundRecordings { get { throw this.NullAccess("SoundRecordings"); } }
		public override IList<MIDI> MIDIs { get { throw this.NullAccess("MIDIs"); } }
		public override IList<Video> Videos { get { throw this.NullAccess("Videos"); } }
		public override IList<Image> Images { get { throw this.NullAccess("Images"); } }
		public override IList<Text> Texts { get { throw this.NullAccess("Texts"); } }
		public override IList<SheetMusic> SheetMusics { get { throw this.NullAccess("SheetMusics"); } }
		public override IList<Software> Softwares { get { throw this.NullAccess("Softwares"); } }
		public override IList<UserDefinedResource> UserDefinedResources { get { throw this.NullAccess("UserDefinedResources"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ResourceUsage
	{
		public virtual IList<string> DealResourceReferences { get; set; }
		public virtual IList<Usage> Usages { get; set; }

		public ResourceUsage(XElement element)
		{
			DealResourceReferences = element.Elements().Where(e => e.Name == "DealResourceReference").Select(e => e.Value).ToList();
			Usages = element.Elements().Where(e => e.Name == "Usage").Select(e => new Usage(e)).ToList();
		}

		public ResourceUsage()
		{ }

		public static bool operator ==(ResourceUsage left, ResourceUsage right)
		{
			return Utils.ValidatedEquals<NullResourceUsage>(left, right);
		}

		public static bool operator !=(ResourceUsage left, ResourceUsage right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceUsage : ResourceUsage
	{
		public override IList<string> DealResourceReferences { get { throw this.NullAccess("DealResourceReferences"); } }
		public override IList<Usage> Usages { get { throw this.NullAccess("Usages"); } }
	}

	public partial class RightsClaimPolicy
	{
		public virtual Condition Condition { get; set; }
		public virtual string RightsClaimPolicyType { get; set; }

		public RightsClaimPolicy(XElement element)
		{
			Condition = element.Elements().Where(e => e.Name == "Condition").Select(e => new Condition(e)).SingleOrDefault() ?? new NullCondition();
			RightsClaimPolicyType = element.Elements().Where(e => e.Name == "RightsClaimPolicyType").Select(e => e.Value).SingleOrDefault();
		}

		public RightsClaimPolicy()
		{ }

		public static bool operator ==(RightsClaimPolicy left, RightsClaimPolicy right)
		{
			return Utils.ValidatedEquals<NullRightsClaimPolicy>(left, right);
		}

		public static bool operator !=(RightsClaimPolicy left, RightsClaimPolicy right)
		{
			return !(left == right);
		}
	}

	internal class NullRightsClaimPolicy : RightsClaimPolicy
	{
		public override Condition Condition { get { throw this.NullAccess("Condition"); } }
		public override string RightsClaimPolicyType { get { throw this.NullAccess("RightsClaimPolicyType"); } }
	}

	public partial class SheetMusic
	{
		public virtual SheetMusicType SheetMusicType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<SheetMusicId> SheetMusicIds { get; set; }
		public virtual IList<MusicalWorkId> IndirectSheetMusicIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual string LanguageOfLyrics { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public virtual ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public virtual ReferenceTitle ReferenceTitle { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual IList<SheetMusicDetailsByTerritory> SheetMusicDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SheetMusic(XElement element)
		{
			SheetMusicType = element.Elements().Where(e => e.Name == "SheetMusicType").Select(e => new SheetMusicType(e)).SingleOrDefault() ?? new NullSheetMusicType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			SheetMusicIds = element.Elements().Where(e => e.Name == "SheetMusicId").Select(e => new SheetMusicId(e)).ToList();
			IndirectSheetMusicIds = element.Elements().Where(e => e.Name == "IndirectSheetMusicId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			LanguageOfLyrics = element.Elements().Where(e => e.Name == "LanguageOfLyrics").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault() ?? new NullResourceMusicalWorkReferenceList();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceContainedResourceReferenceList();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			SheetMusicDetailsByTerritorys = element.Elements().Where(e => e.Name == "SheetMusicDetailsByTerritory").Select(e => new SheetMusicDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SheetMusic()
		{ }

		public static bool operator ==(SheetMusic left, SheetMusic right)
		{
			return Utils.ValidatedEquals<NullSheetMusic>(left, right);
		}

		public static bool operator !=(SheetMusic left, SheetMusic right)
		{
			return !(left == right);
		}
	}

	internal class NullSheetMusic : SheetMusic
	{
		public override SheetMusicType SheetMusicType { get { throw this.NullAccess("SheetMusicType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<SheetMusicId> SheetMusicIds { get { throw this.NullAccess("SheetMusicIds"); } }
		public override IList<MusicalWorkId> IndirectSheetMusicIds { get { throw this.NullAccess("IndirectSheetMusicIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override string LanguageOfLyrics { get { throw this.NullAccess("LanguageOfLyrics"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get { throw this.NullAccess("ResourceMusicalWorkReferenceList"); } }
		public override ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get { throw this.NullAccess("ResourceContainedResourceReferenceList"); } }
		public override ReferenceTitle ReferenceTitle { get { throw this.NullAccess("ReferenceTitle"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override IList<SheetMusicDetailsByTerritory> SheetMusicDetailsByTerritorys { get { throw this.NullAccess("SheetMusicDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SheetMusicDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<TechnicalSheetMusicDetails> TechnicalSheetMusicDetails { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SheetMusicDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalSheetMusicDetails = element.Elements().Where(e => e.Name == "TechnicalSheetMusicDetails").Select(e => new TechnicalSheetMusicDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SheetMusicDetailsByTerritory()
		{ }

		public static bool operator ==(SheetMusicDetailsByTerritory left, SheetMusicDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullSheetMusicDetailsByTerritory>(left, right);
		}

		public static bool operator !=(SheetMusicDetailsByTerritory left, SheetMusicDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullSheetMusicDetailsByTerritory : SheetMusicDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<TechnicalSheetMusicDetails> TechnicalSheetMusicDetails { get { throw this.NullAccess("TechnicalSheetMusicDetails"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Software
	{
		public virtual SoftwareType SoftwareType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<SoftwareId> SoftwareIds { get; set; }
		public virtual IList<MusicalWorkId> IndirectSoftwareIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public virtual ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual IList<SoftwareDetailsByTerritory> SoftwareDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Software(XElement element)
		{
			SoftwareType = element.Elements().Where(e => e.Name == "SoftwareType").Select(e => new SoftwareType(e)).SingleOrDefault() ?? new NullSoftwareType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			SoftwareIds = element.Elements().Where(e => e.Name == "SoftwareId").Select(e => new SoftwareId(e)).ToList();
			IndirectSoftwareIds = element.Elements().Where(e => e.Name == "IndirectSoftwareId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault() ?? new NullResourceMusicalWorkReferenceList();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceContainedResourceReferenceList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			SoftwareDetailsByTerritorys = element.Elements().Where(e => e.Name == "SoftwareDetailsByTerritory").Select(e => new SoftwareDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Software()
		{ }

		public static bool operator ==(Software left, Software right)
		{
			return Utils.ValidatedEquals<NullSoftware>(left, right);
		}

		public static bool operator !=(Software left, Software right)
		{
			return !(left == right);
		}
	}

	internal class NullSoftware : Software
	{
		public override SoftwareType SoftwareType { get { throw this.NullAccess("SoftwareType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<SoftwareId> SoftwareIds { get { throw this.NullAccess("SoftwareIds"); } }
		public override IList<MusicalWorkId> IndirectSoftwareIds { get { throw this.NullAccess("IndirectSoftwareIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get { throw this.NullAccess("ResourceMusicalWorkReferenceList"); } }
		public override ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get { throw this.NullAccess("ResourceContainedResourceReferenceList"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override IList<SoftwareDetailsByTerritory> SoftwareDetailsByTerritorys { get { throw this.NullAccess("SoftwareDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SoftwareDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<TechnicalSoftwareDetails> TechnicalSoftwareDetails { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SoftwareDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalSoftwareDetails = element.Elements().Where(e => e.Name == "TechnicalSoftwareDetails").Select(e => new TechnicalSoftwareDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SoftwareDetailsByTerritory()
		{ }

		public static bool operator ==(SoftwareDetailsByTerritory left, SoftwareDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullSoftwareDetailsByTerritory>(left, right);
		}

		public static bool operator !=(SoftwareDetailsByTerritory left, SoftwareDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullSoftwareDetailsByTerritory : SoftwareDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<TechnicalSoftwareDetails> TechnicalSoftwareDetails { get { throw this.NullAccess("TechnicalSoftwareDetails"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SoundRecording
	{
		public virtual SoundRecordingType SoundRecordingType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<SoundRecordingId> SoundRecordingIds { get; set; }
		public virtual IList<MusicalWorkId> IndirectSoundRecordingIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual ReferenceTitle ReferenceTitle { get; set; }
		public virtual Description InstrumentationDescription { get; set; }
		public virtual bool? IsMedley { get; set; }
		public virtual bool? IsPotpourri { get; set; }
		public virtual bool? IsInstrumental { get; set; }
		public virtual bool? IsBackground { get; set; }
		public virtual bool? IsHiddenResource { get; set; }
		public virtual bool? IsBonusResource { get; set; }
		public virtual bool? IsComputerGenerated { get; set; }
		public virtual bool? NoSilenceBefore { get; set; }
		public virtual bool? NoSilenceAfter { get; set; }
		public virtual bool? PerformerInformationRequired { get; set; }
		public virtual string LanguageOfPerformance { get; set; }
		public virtual string Duration { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual SoundRecordingCollectionReferenceList SoundRecordingCollectionReferenceList { get; set; }
		public virtual ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public virtual ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual EventDate MasteredDate { get; set; }
		public virtual IList<SoundRecordingDetailsByTerritory> SoundRecordingDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SoundRecording(XElement element)
		{
			SoundRecordingType = element.Elements().Where(e => e.Name == "SoundRecordingType").Select(e => new SoundRecordingType(e)).SingleOrDefault() ?? new NullSoundRecordingType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			SoundRecordingIds = element.Elements().Where(e => e.Name == "SoundRecordingId").Select(e => new SoundRecordingId(e)).ToList();
			IndirectSoundRecordingIds = element.Elements().Where(e => e.Name == "IndirectSoundRecordingId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			InstrumentationDescription = element.Elements().Where(e => e.Name == "InstrumentationDescription").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			IsMedley = element.Elements().Where(e => e.Name == "IsMedley").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsPotpourri = element.Elements().Where(e => e.Name == "IsPotpourri").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsInstrumental = element.Elements().Where(e => e.Name == "IsInstrumental").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBackground = element.Elements().Where(e => e.Name == "IsBackground").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsComputerGenerated = element.Elements().Where(e => e.Name == "IsComputerGenerated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			NoSilenceBefore = element.Elements().Where(e => e.Name == "NoSilenceBefore").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			NoSilenceAfter = element.Elements().Where(e => e.Name == "NoSilenceAfter").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PerformerInformationRequired = element.Elements().Where(e => e.Name == "PerformerInformationRequired").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageOfPerformance = element.Elements().Where(e => e.Name == "LanguageOfPerformance").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			SoundRecordingCollectionReferenceList = element.Elements().Where(e => e.Name == "SoundRecordingCollectionReferenceList").Select(e => new SoundRecordingCollectionReferenceList(e)).SingleOrDefault() ?? new NullSoundRecordingCollectionReferenceList();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault() ?? new NullResourceMusicalWorkReferenceList();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceContainedResourceReferenceList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			MasteredDate = element.Elements().Where(e => e.Name == "MasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			SoundRecordingDetailsByTerritorys = element.Elements().Where(e => e.Name == "SoundRecordingDetailsByTerritory").Select(e => new SoundRecordingDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecording()
		{ }

		public static bool operator ==(SoundRecording left, SoundRecording right)
		{
			return Utils.ValidatedEquals<NullSoundRecording>(left, right);
		}

		public static bool operator !=(SoundRecording left, SoundRecording right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecording : SoundRecording
	{
		public override SoundRecordingType SoundRecordingType { get { throw this.NullAccess("SoundRecordingType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<SoundRecordingId> SoundRecordingIds { get { throw this.NullAccess("SoundRecordingIds"); } }
		public override IList<MusicalWorkId> IndirectSoundRecordingIds { get { throw this.NullAccess("IndirectSoundRecordingIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override ReferenceTitle ReferenceTitle { get { throw this.NullAccess("ReferenceTitle"); } }
		public override Description InstrumentationDescription { get { throw this.NullAccess("InstrumentationDescription"); } }
		public override bool? IsMedley { get { throw this.NullAccess("IsMedley"); } }
		public override bool? IsPotpourri { get { throw this.NullAccess("IsPotpourri"); } }
		public override bool? IsInstrumental { get { throw this.NullAccess("IsInstrumental"); } }
		public override bool? IsBackground { get { throw this.NullAccess("IsBackground"); } }
		public override bool? IsHiddenResource { get { throw this.NullAccess("IsHiddenResource"); } }
		public override bool? IsBonusResource { get { throw this.NullAccess("IsBonusResource"); } }
		public override bool? IsComputerGenerated { get { throw this.NullAccess("IsComputerGenerated"); } }
		public override bool? NoSilenceBefore { get { throw this.NullAccess("NoSilenceBefore"); } }
		public override bool? NoSilenceAfter { get { throw this.NullAccess("NoSilenceAfter"); } }
		public override bool? PerformerInformationRequired { get { throw this.NullAccess("PerformerInformationRequired"); } }
		public override string LanguageOfPerformance { get { throw this.NullAccess("LanguageOfPerformance"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override SoundRecordingCollectionReferenceList SoundRecordingCollectionReferenceList { get { throw this.NullAccess("SoundRecordingCollectionReferenceList"); } }
		public override ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get { throw this.NullAccess("ResourceMusicalWorkReferenceList"); } }
		public override ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get { throw this.NullAccess("ResourceContainedResourceReferenceList"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override EventDate MasteredDate { get { throw this.NullAccess("MasteredDate"); } }
		public override IList<SoundRecordingDetailsByTerritory> SoundRecordingDetailsByTerritorys { get { throw this.NullAccess("SoundRecordingDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SoundRecordingDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual IList<RightsController> RightsControllers { get; set; }
		public virtual EventDate RemasteredDate { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual string SequenceNumber { get; set; }
		public virtual IList<HostSoundCarrier> HostSoundCarriers { get; set; }
		public virtual Comment MarketingComment { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<AvRating> AvRatings { get; set; }
		public virtual IList<TechnicalSoundRecordingDetails> TechnicalSoundRecordingDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SoundRecordingDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			HostSoundCarriers = element.Elements().Where(e => e.Name == "HostSoundCarrier").Select(e => new HostSoundCarrier(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault() ?? new NullComment();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			AvRatings = element.Elements().Where(e => e.Name == "AvRating").Select(e => new AvRating(e)).ToList();
			TechnicalSoundRecordingDetails = element.Elements().Where(e => e.Name == "TechnicalSoundRecordingDetails").Select(e => new TechnicalSoundRecordingDetails(e)).ToList();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecordingDetailsByTerritory()
		{ }

		public static bool operator ==(SoundRecordingDetailsByTerritory left, SoundRecordingDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullSoundRecordingDetailsByTerritory>(left, right);
		}

		public static bool operator !=(SoundRecordingDetailsByTerritory left, SoundRecordingDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecordingDetailsByTerritory : SoundRecordingDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override IList<RightsController> RightsControllers { get { throw this.NullAccess("RightsControllers"); } }
		public override EventDate RemasteredDate { get { throw this.NullAccess("RemasteredDate"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override string SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override IList<HostSoundCarrier> HostSoundCarriers { get { throw this.NullAccess("HostSoundCarriers"); } }
		public override Comment MarketingComment { get { throw this.NullAccess("MarketingComment"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<AvRating> AvRatings { get { throw this.NullAccess("AvRatings"); } }
		public override IList<TechnicalSoundRecordingDetails> TechnicalSoundRecordingDetails { get { throw this.NullAccess("TechnicalSoundRecordingDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SoundRecordingPreviewDetails
	{
		public virtual Description PartType { get; set; }
		public virtual decimal? StartPoint { get; set; }
		public virtual decimal? EndPoint { get; set; }
		public virtual string Duration { get; set; }
		public virtual decimal? TopLeftCorner { get; set; }
		public virtual decimal? BottomRightCorner { get; set; }
		public virtual string ExpressionType { get; set; }

		public SoundRecordingPreviewDetails(XElement element)
		{
			PartType = element.Elements().Where(e => e.Name == "PartType").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			StartPoint = element.Elements().Where(e => e.Name == "StartPoint").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			EndPoint = element.Elements().Where(e => e.Name == "EndPoint").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			TopLeftCorner = element.Elements().Where(e => e.Name == "TopLeftCorner").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			BottomRightCorner = element.Elements().Where(e => e.Name == "BottomRightCorner").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			ExpressionType = element.Elements().Where(e => e.Name == "ExpressionType").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecordingPreviewDetails()
		{ }

		public static bool operator ==(SoundRecordingPreviewDetails left, SoundRecordingPreviewDetails right)
		{
			return Utils.ValidatedEquals<NullSoundRecordingPreviewDetails>(left, right);
		}

		public static bool operator !=(SoundRecordingPreviewDetails left, SoundRecordingPreviewDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecordingPreviewDetails : SoundRecordingPreviewDetails
	{
		public override Description PartType { get { throw this.NullAccess("PartType"); } }
		public override decimal? StartPoint { get { throw this.NullAccess("StartPoint"); } }
		public override decimal? EndPoint { get { throw this.NullAccess("EndPoint"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override decimal? TopLeftCorner { get { throw this.NullAccess("TopLeftCorner"); } }
		public override decimal? BottomRightCorner { get { throw this.NullAccess("BottomRightCorner"); } }
		public override string ExpressionType { get { throw this.NullAccess("ExpressionType"); } }
	}

	public partial class TechnicalImageDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual DrmPlatformType DrmPlatformType { get; set; }
		public virtual ContainerFormat ContainerFormat { get; set; }
		public virtual ImageCodecType ImageCodecType { get; set; }
		public virtual Extent ImageHeight { get; set; }
		public virtual Extent ImageWidth { get; set; }
		public virtual decimal? AspectRatio { get; set; }
		public virtual int? ColorDepth { get; set; }
		public virtual int? ImageResolution { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual PreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalImageDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault() ?? new NullDrmPlatformType();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault() ?? new NullContainerFormat();
			ImageCodecType = element.Elements().Where(e => e.Name == "ImageCodecType").Select(e => new ImageCodecType(e)).SingleOrDefault() ?? new NullImageCodecType();
			ImageHeight = element.Elements().Where(e => e.Name == "ImageHeight").Select(e => new Extent(e)).SingleOrDefault() ?? new NullExtent();
			ImageWidth = element.Elements().Where(e => e.Name == "ImageWidth").Select(e => new Extent(e)).SingleOrDefault() ?? new NullExtent();
			AspectRatio = element.Elements().Where(e => e.Name == "AspectRatio").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			ColorDepth = element.Elements().Where(e => e.Name == "ColorDepth").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			ImageResolution = element.Elements().Where(e => e.Name == "ImageResolution").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault() ?? new NullPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalImageDetails()
		{ }

		public static bool operator ==(TechnicalImageDetails left, TechnicalImageDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalImageDetails>(left, right);
		}

		public static bool operator !=(TechnicalImageDetails left, TechnicalImageDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalImageDetails : TechnicalImageDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override DrmPlatformType DrmPlatformType { get { throw this.NullAccess("DrmPlatformType"); } }
		public override ContainerFormat ContainerFormat { get { throw this.NullAccess("ContainerFormat"); } }
		public override ImageCodecType ImageCodecType { get { throw this.NullAccess("ImageCodecType"); } }
		public override Extent ImageHeight { get { throw this.NullAccess("ImageHeight"); } }
		public override Extent ImageWidth { get { throw this.NullAccess("ImageWidth"); } }
		public override decimal? AspectRatio { get { throw this.NullAccess("AspectRatio"); } }
		public override int? ColorDepth { get { throw this.NullAccess("ColorDepth"); } }
		public override int? ImageResolution { get { throw this.NullAccess("ImageResolution"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override PreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TechnicalMidiDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual string Duration { get; set; }
		public virtual bool? ResourceProcessingRequired { get; set; }
		public virtual string UsableResourceDuration { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual SoundRecordingPreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual int? NumberOfVoices { get; set; }
		public virtual SoundProcessorType SoundProcessorType { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalMidiDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			ResourceProcessingRequired = element.Elements().Where(e => e.Name == "ResourceProcessingRequired").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			UsableResourceDuration = element.Elements().Where(e => e.Name == "UsableResourceDuration").Select(e => e.Value).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new SoundRecordingPreviewDetails(e)).SingleOrDefault() ?? new NullSoundRecordingPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			NumberOfVoices = element.Elements().Where(e => e.Name == "NumberOfVoices").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			SoundProcessorType = element.Elements().Where(e => e.Name == "SoundProcessorType").Select(e => new SoundProcessorType(e)).SingleOrDefault() ?? new NullSoundProcessorType();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalMidiDetails()
		{ }

		public static bool operator ==(TechnicalMidiDetails left, TechnicalMidiDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalMidiDetails>(left, right);
		}

		public static bool operator !=(TechnicalMidiDetails left, TechnicalMidiDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalMidiDetails : TechnicalMidiDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override bool? ResourceProcessingRequired { get { throw this.NullAccess("ResourceProcessingRequired"); } }
		public override string UsableResourceDuration { get { throw this.NullAccess("UsableResourceDuration"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override SoundRecordingPreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override int? NumberOfVoices { get { throw this.NullAccess("NumberOfVoices"); } }
		public override SoundProcessorType SoundProcessorType { get { throw this.NullAccess("SoundProcessorType"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TechnicalSheetMusicDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual DrmPlatformType DrmPlatformType { get; set; }
		public virtual ContainerFormat ContainerFormat { get; set; }
		public virtual SheetMusicCodecType SheetMusicCodecType { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual PreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalSheetMusicDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault() ?? new NullDrmPlatformType();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault() ?? new NullContainerFormat();
			SheetMusicCodecType = element.Elements().Where(e => e.Name == "SheetMusicCodecType").Select(e => new SheetMusicCodecType(e)).SingleOrDefault() ?? new NullSheetMusicCodecType();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault() ?? new NullPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalSheetMusicDetails()
		{ }

		public static bool operator ==(TechnicalSheetMusicDetails left, TechnicalSheetMusicDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalSheetMusicDetails>(left, right);
		}

		public static bool operator !=(TechnicalSheetMusicDetails left, TechnicalSheetMusicDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalSheetMusicDetails : TechnicalSheetMusicDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override DrmPlatformType DrmPlatformType { get { throw this.NullAccess("DrmPlatformType"); } }
		public override ContainerFormat ContainerFormat { get { throw this.NullAccess("ContainerFormat"); } }
		public override SheetMusicCodecType SheetMusicCodecType { get { throw this.NullAccess("SheetMusicCodecType"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override PreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TechnicalSoftwareDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual DrmPlatformType DrmPlatformType { get; set; }
		public virtual OperatingSystemType OperatingSystemType { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual PreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalSoftwareDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault() ?? new NullDrmPlatformType();
			OperatingSystemType = element.Elements().Where(e => e.Name == "OperatingSystemType").Select(e => new OperatingSystemType(e)).SingleOrDefault() ?? new NullOperatingSystemType();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault() ?? new NullPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalSoftwareDetails()
		{ }

		public static bool operator ==(TechnicalSoftwareDetails left, TechnicalSoftwareDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalSoftwareDetails>(left, right);
		}

		public static bool operator !=(TechnicalSoftwareDetails left, TechnicalSoftwareDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalSoftwareDetails : TechnicalSoftwareDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override DrmPlatformType DrmPlatformType { get { throw this.NullAccess("DrmPlatformType"); } }
		public override OperatingSystemType OperatingSystemType { get { throw this.NullAccess("OperatingSystemType"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override PreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TechnicalSoundRecordingDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual DrmPlatformType DrmPlatformType { get; set; }
		public virtual ContainerFormat ContainerFormat { get; set; }
		public virtual AudioCodecType AudioCodecType { get; set; }
		public virtual BitRate BitRate { get; set; }
		public virtual int? NumberOfChannels { get; set; }
		public virtual SamplingRate SamplingRate { get; set; }
		public virtual int? BitsPerSample { get; set; }
		public virtual string Duration { get; set; }
		public virtual bool? ResourceProcessingRequired { get; set; }
		public virtual string UsableResourceDuration { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual SoundRecordingPreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalSoundRecordingDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault() ?? new NullDrmPlatformType();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault() ?? new NullContainerFormat();
			AudioCodecType = element.Elements().Where(e => e.Name == "AudioCodecType").Select(e => new AudioCodecType(e)).SingleOrDefault() ?? new NullAudioCodecType();
			BitRate = element.Elements().Where(e => e.Name == "BitRate").Select(e => new BitRate(e)).SingleOrDefault() ?? new NullBitRate();
			NumberOfChannels = element.Elements().Where(e => e.Name == "NumberOfChannels").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			SamplingRate = element.Elements().Where(e => e.Name == "SamplingRate").Select(e => new SamplingRate(e)).SingleOrDefault() ?? new NullSamplingRate();
			BitsPerSample = element.Elements().Where(e => e.Name == "BitsPerSample").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			ResourceProcessingRequired = element.Elements().Where(e => e.Name == "ResourceProcessingRequired").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			UsableResourceDuration = element.Elements().Where(e => e.Name == "UsableResourceDuration").Select(e => e.Value).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new SoundRecordingPreviewDetails(e)).SingleOrDefault() ?? new NullSoundRecordingPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalSoundRecordingDetails()
		{ }

		public static bool operator ==(TechnicalSoundRecordingDetails left, TechnicalSoundRecordingDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalSoundRecordingDetails>(left, right);
		}

		public static bool operator !=(TechnicalSoundRecordingDetails left, TechnicalSoundRecordingDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalSoundRecordingDetails : TechnicalSoundRecordingDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override DrmPlatformType DrmPlatformType { get { throw this.NullAccess("DrmPlatformType"); } }
		public override ContainerFormat ContainerFormat { get { throw this.NullAccess("ContainerFormat"); } }
		public override AudioCodecType AudioCodecType { get { throw this.NullAccess("AudioCodecType"); } }
		public override BitRate BitRate { get { throw this.NullAccess("BitRate"); } }
		public override int? NumberOfChannels { get { throw this.NullAccess("NumberOfChannels"); } }
		public override SamplingRate SamplingRate { get { throw this.NullAccess("SamplingRate"); } }
		public override int? BitsPerSample { get { throw this.NullAccess("BitsPerSample"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override bool? ResourceProcessingRequired { get { throw this.NullAccess("ResourceProcessingRequired"); } }
		public override string UsableResourceDuration { get { throw this.NullAccess("UsableResourceDuration"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override SoundRecordingPreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TechnicalTextDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual DrmPlatformType DrmPlatformType { get; set; }
		public virtual ContainerFormat ContainerFormat { get; set; }
		public virtual TextCodecType TextCodecType { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual PreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalTextDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault() ?? new NullDrmPlatformType();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault() ?? new NullContainerFormat();
			TextCodecType = element.Elements().Where(e => e.Name == "TextCodecType").Select(e => new TextCodecType(e)).SingleOrDefault() ?? new NullTextCodecType();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault() ?? new NullPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalTextDetails()
		{ }

		public static bool operator ==(TechnicalTextDetails left, TechnicalTextDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalTextDetails>(left, right);
		}

		public static bool operator !=(TechnicalTextDetails left, TechnicalTextDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalTextDetails : TechnicalTextDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override DrmPlatformType DrmPlatformType { get { throw this.NullAccess("DrmPlatformType"); } }
		public override ContainerFormat ContainerFormat { get { throw this.NullAccess("ContainerFormat"); } }
		public override TextCodecType TextCodecType { get { throw this.NullAccess("TextCodecType"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override PreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TechnicalUserDefinedResourceDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual IList<UserDefinedValue> UserDefinedValues { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual PreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalUserDefinedResourceDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault() ?? new NullPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalUserDefinedResourceDetails()
		{ }

		public static bool operator ==(TechnicalUserDefinedResourceDetails left, TechnicalUserDefinedResourceDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalUserDefinedResourceDetails>(left, right);
		}

		public static bool operator !=(TechnicalUserDefinedResourceDetails left, TechnicalUserDefinedResourceDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalUserDefinedResourceDetails : TechnicalUserDefinedResourceDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override IList<UserDefinedValue> UserDefinedValues { get { throw this.NullAccess("UserDefinedValues"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override PreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TechnicalVideoDetails
	{
		public virtual string TechnicalResourceDetailsReference { get; set; }
		public virtual DrmPlatformType DrmPlatformType { get; set; }
		public virtual BitRate OverallBitRate { get; set; }
		public virtual ContainerFormat ContainerFormat { get; set; }
		public virtual VideoCodecType VideoCodecType { get; set; }
		public virtual BitRate VideoBitRate { get; set; }
		public virtual FrameRate FrameRate { get; set; }
		public virtual Extent ImageHeight { get; set; }
		public virtual Extent ImageWidth { get; set; }
		public virtual decimal? AspectRatio { get; set; }
		public virtual int? ColorDepth { get; set; }
		public virtual string VideoDefinitionType { get; set; }
		public virtual AudioCodecType AudioCodecType { get; set; }
		public virtual BitRate AudioBitRate { get; set; }
		public virtual int? NumberOfAudioChannels { get; set; }
		public virtual SamplingRate AudioSamplingRate { get; set; }
		public virtual int? AudioBitsPerSample { get; set; }
		public virtual string Duration { get; set; }
		public virtual bool? ResourceProcessingRequired { get; set; }
		public virtual string UsableResourceDuration { get; set; }
		public virtual bool? IsPreview { get; set; }
		public virtual SoundRecordingPreviewDetails PreviewDetails { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public virtual IList<Description> FileAvailabilityDescriptions { get; set; }
		public virtual IList<File> Files { get; set; }
		public virtual IList<Fingerprint> Fingerprints { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TechnicalVideoDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault() ?? new NullDrmPlatformType();
			OverallBitRate = element.Elements().Where(e => e.Name == "OverallBitRate").Select(e => new BitRate(e)).SingleOrDefault() ?? new NullBitRate();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault() ?? new NullContainerFormat();
			VideoCodecType = element.Elements().Where(e => e.Name == "VideoCodecType").Select(e => new VideoCodecType(e)).SingleOrDefault() ?? new NullVideoCodecType();
			VideoBitRate = element.Elements().Where(e => e.Name == "VideoBitRate").Select(e => new BitRate(e)).SingleOrDefault() ?? new NullBitRate();
			FrameRate = element.Elements().Where(e => e.Name == "FrameRate").Select(e => new FrameRate(e)).SingleOrDefault() ?? new NullFrameRate();
			ImageHeight = element.Elements().Where(e => e.Name == "ImageHeight").Select(e => new Extent(e)).SingleOrDefault() ?? new NullExtent();
			ImageWidth = element.Elements().Where(e => e.Name == "ImageWidth").Select(e => new Extent(e)).SingleOrDefault() ?? new NullExtent();
			AspectRatio = element.Elements().Where(e => e.Name == "AspectRatio").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			ColorDepth = element.Elements().Where(e => e.Name == "ColorDepth").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			VideoDefinitionType = element.Elements().Where(e => e.Name == "VideoDefinitionType").Select(e => e.Value).SingleOrDefault();
			AudioCodecType = element.Elements().Where(e => e.Name == "AudioCodecType").Select(e => new AudioCodecType(e)).SingleOrDefault() ?? new NullAudioCodecType();
			AudioBitRate = element.Elements().Where(e => e.Name == "AudioBitRate").Select(e => new BitRate(e)).SingleOrDefault() ?? new NullBitRate();
			NumberOfAudioChannels = element.Elements().Where(e => e.Name == "NumberOfAudioChannels").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			AudioSamplingRate = element.Elements().Where(e => e.Name == "AudioSamplingRate").Select(e => new SamplingRate(e)).SingleOrDefault() ?? new NullSamplingRate();
			AudioBitsPerSample = element.Elements().Where(e => e.Name == "AudioBitsPerSample").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			ResourceProcessingRequired = element.Elements().Where(e => e.Name == "ResourceProcessingRequired").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			UsableResourceDuration = element.Elements().Where(e => e.Name == "UsableResourceDuration").Select(e => e.Value).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new SoundRecordingPreviewDetails(e)).SingleOrDefault() ?? new NullSoundRecordingPreviewDetails();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TechnicalVideoDetails()
		{ }

		public static bool operator ==(TechnicalVideoDetails left, TechnicalVideoDetails right)
		{
			return Utils.ValidatedEquals<NullTechnicalVideoDetails>(left, right);
		}

		public static bool operator !=(TechnicalVideoDetails left, TechnicalVideoDetails right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalVideoDetails : TechnicalVideoDetails
	{
		public override string TechnicalResourceDetailsReference { get { throw this.NullAccess("TechnicalResourceDetailsReference"); } }
		public override DrmPlatformType DrmPlatformType { get { throw this.NullAccess("DrmPlatformType"); } }
		public override BitRate OverallBitRate { get { throw this.NullAccess("OverallBitRate"); } }
		public override ContainerFormat ContainerFormat { get { throw this.NullAccess("ContainerFormat"); } }
		public override VideoCodecType VideoCodecType { get { throw this.NullAccess("VideoCodecType"); } }
		public override BitRate VideoBitRate { get { throw this.NullAccess("VideoBitRate"); } }
		public override FrameRate FrameRate { get { throw this.NullAccess("FrameRate"); } }
		public override Extent ImageHeight { get { throw this.NullAccess("ImageHeight"); } }
		public override Extent ImageWidth { get { throw this.NullAccess("ImageWidth"); } }
		public override decimal? AspectRatio { get { throw this.NullAccess("AspectRatio"); } }
		public override int? ColorDepth { get { throw this.NullAccess("ColorDepth"); } }
		public override string VideoDefinitionType { get { throw this.NullAccess("VideoDefinitionType"); } }
		public override AudioCodecType AudioCodecType { get { throw this.NullAccess("AudioCodecType"); } }
		public override BitRate AudioBitRate { get { throw this.NullAccess("AudioBitRate"); } }
		public override int? NumberOfAudioChannels { get { throw this.NullAccess("NumberOfAudioChannels"); } }
		public override SamplingRate AudioSamplingRate { get { throw this.NullAccess("AudioSamplingRate"); } }
		public override int? AudioBitsPerSample { get { throw this.NullAccess("AudioBitsPerSample"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override bool? ResourceProcessingRequired { get { throw this.NullAccess("ResourceProcessingRequired"); } }
		public override string UsableResourceDuration { get { throw this.NullAccess("UsableResourceDuration"); } }
		public override bool? IsPreview { get { throw this.NullAccess("IsPreview"); } }
		public override SoundRecordingPreviewDetails PreviewDetails { get { throw this.NullAccess("PreviewDetails"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override FulfillmentDate ConsumerFulfillmentDate { get { throw this.NullAccess("ConsumerFulfillmentDate"); } }
		public override IList<Description> FileAvailabilityDescriptions { get { throw this.NullAccess("FileAvailabilityDescriptions"); } }
		public override IList<File> Files { get { throw this.NullAccess("Files"); } }
		public override IList<Fingerprint> Fingerprints { get { throw this.NullAccess("Fingerprints"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Text
	{
		public virtual TextType TextType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<TextId> TextIds { get; set; }
		public virtual IList<MusicalWorkId> IndirectTextIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public virtual ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual IList<TextDetailsByTerritory> TextDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Text(XElement element)
		{
			TextType = element.Elements().Where(e => e.Name == "TextType").Select(e => new TextType(e)).SingleOrDefault() ?? new NullTextType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			TextIds = element.Elements().Where(e => e.Name == "TextId").Select(e => new TextId(e)).ToList();
			IndirectTextIds = element.Elements().Where(e => e.Name == "IndirectTextId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault() ?? new NullResourceMusicalWorkReferenceList();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceContainedResourceReferenceList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			TextDetailsByTerritorys = element.Elements().Where(e => e.Name == "TextDetailsByTerritory").Select(e => new TextDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Text()
		{ }

		public static bool operator ==(Text left, Text right)
		{
			return Utils.ValidatedEquals<NullText>(left, right);
		}

		public static bool operator !=(Text left, Text right)
		{
			return !(left == right);
		}
	}

	internal class NullText : Text
	{
		public override TextType TextType { get { throw this.NullAccess("TextType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<TextId> TextIds { get { throw this.NullAccess("TextIds"); } }
		public override IList<MusicalWorkId> IndirectTextIds { get { throw this.NullAccess("IndirectTextIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get { throw this.NullAccess("ResourceMusicalWorkReferenceList"); } }
		public override ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get { throw this.NullAccess("ResourceContainedResourceReferenceList"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override IList<TextDetailsByTerritory> TextDetailsByTerritorys { get { throw this.NullAccess("TextDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TextDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<TechnicalTextDetails> TechnicalTextDetails { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TextDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalTextDetails = element.Elements().Where(e => e.Name == "TechnicalTextDetails").Select(e => new TechnicalTextDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TextDetailsByTerritory()
		{ }

		public static bool operator ==(TextDetailsByTerritory left, TextDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullTextDetailsByTerritory>(left, right);
		}

		public static bool operator !=(TextDetailsByTerritory left, TextDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullTextDetailsByTerritory : TextDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<TechnicalTextDetails> TechnicalTextDetails { get { throw this.NullAccess("TechnicalTextDetails"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class UserDefinedResource
	{
		public virtual UserDefinedResourceType UserDefinedResourceType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<UserDefinedResourceId> UserDefinedResourceIds { get; set; }
		public virtual IList<MusicalWorkId> IndirectUserDefinedResourceIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public virtual ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<UserDefinedValue> UserDefinedValues { get; set; }
		public virtual IList<UserDefinedResourceDetailsByTerritory> UserDefinedResourceDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public UserDefinedResource(XElement element)
		{
			UserDefinedResourceType = element.Elements().Where(e => e.Name == "UserDefinedResourceType").Select(e => new UserDefinedResourceType(e)).SingleOrDefault() ?? new NullUserDefinedResourceType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			UserDefinedResourceIds = element.Elements().Where(e => e.Name == "UserDefinedResourceId").Select(e => new UserDefinedResourceId(e)).ToList();
			IndirectUserDefinedResourceIds = element.Elements().Where(e => e.Name == "IndirectUserDefinedResourceId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault() ?? new NullResourceMusicalWorkReferenceList();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceContainedResourceReferenceList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			UserDefinedResourceDetailsByTerritorys = element.Elements().Where(e => e.Name == "UserDefinedResourceDetailsByTerritory").Select(e => new UserDefinedResourceDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public UserDefinedResource()
		{ }

		public static bool operator ==(UserDefinedResource left, UserDefinedResource right)
		{
			return Utils.ValidatedEquals<NullUserDefinedResource>(left, right);
		}

		public static bool operator !=(UserDefinedResource left, UserDefinedResource right)
		{
			return !(left == right);
		}
	}

	internal class NullUserDefinedResource : UserDefinedResource
	{
		public override UserDefinedResourceType UserDefinedResourceType { get { throw this.NullAccess("UserDefinedResourceType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<UserDefinedResourceId> UserDefinedResourceIds { get { throw this.NullAccess("UserDefinedResourceIds"); } }
		public override IList<MusicalWorkId> IndirectUserDefinedResourceIds { get { throw this.NullAccess("IndirectUserDefinedResourceIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get { throw this.NullAccess("ResourceMusicalWorkReferenceList"); } }
		public override ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get { throw this.NullAccess("ResourceContainedResourceReferenceList"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<UserDefinedValue> UserDefinedValues { get { throw this.NullAccess("UserDefinedValues"); } }
		public override IList<UserDefinedResourceDetailsByTerritory> UserDefinedResourceDetailsByTerritorys { get { throw this.NullAccess("UserDefinedResourceDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class UserDefinedResourceDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<UserDefinedValue> UserDefinedValues { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<TechnicalUserDefinedResourceDetails> TechnicalUserDefinedResourceDetails { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public UserDefinedResourceDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalUserDefinedResourceDetails = element.Elements().Where(e => e.Name == "TechnicalUserDefinedResourceDetails").Select(e => new TechnicalUserDefinedResourceDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public UserDefinedResourceDetailsByTerritory()
		{ }

		public static bool operator ==(UserDefinedResourceDetailsByTerritory left, UserDefinedResourceDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullUserDefinedResourceDetailsByTerritory>(left, right);
		}

		public static bool operator !=(UserDefinedResourceDetailsByTerritory left, UserDefinedResourceDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullUserDefinedResourceDetailsByTerritory : UserDefinedResourceDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<UserDefinedValue> UserDefinedValues { get { throw this.NullAccess("UserDefinedValues"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<TechnicalUserDefinedResourceDetails> TechnicalUserDefinedResourceDetails { get { throw this.NullAccess("TechnicalUserDefinedResourceDetails"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Video
	{
		public virtual VideoType VideoType { get; set; }
		public virtual bool? IsArtistRelated { get; set; }
		public virtual IList<VideoId> VideoIds { get; set; }
		public virtual IList<MusicalWorkId> IndirectVideoIds { get; set; }
		public virtual string ResourceReference { get; set; }
		public virtual IList<VideoCueSheetReference> VideoCueSheetReferences { get; set; }
		public virtual Reason ReasonForCueSheetAbsence { get; set; }
		public virtual ReferenceTitle ReferenceTitle { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual Description InstrumentationDescription { get; set; }
		public virtual bool? IsMedley { get; set; }
		public virtual bool? IsPotpourri { get; set; }
		public virtual bool? IsInstrumental { get; set; }
		public virtual bool? IsBackground { get; set; }
		public virtual bool? IsHiddenResource { get; set; }
		public virtual bool? IsBonusResource { get; set; }
		public virtual bool? NoSilenceBefore { get; set; }
		public virtual bool? NoSilenceAfter { get; set; }
		public virtual bool? PerformerInformationRequired { get; set; }
		public virtual IList<string> LanguageOfPerformances { get; set; }
		public virtual string Duration { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual SoundRecordingCollectionReferenceList VideoCollectionReferenceList { get; set; }
		public virtual ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public virtual ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual EventDate MasteredDate { get; set; }
		public virtual IList<VideoDetailsByTerritory> VideoDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Video(XElement element)
		{
			VideoType = element.Elements().Where(e => e.Name == "VideoType").Select(e => new VideoType(e)).SingleOrDefault() ?? new NullVideoType();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			VideoIds = element.Elements().Where(e => e.Name == "VideoId").Select(e => new VideoId(e)).ToList();
			IndirectVideoIds = element.Elements().Where(e => e.Name == "IndirectVideoId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			VideoCueSheetReferences = element.Elements().Where(e => e.Name == "VideoCueSheetReference").Select(e => new VideoCueSheetReference(e)).ToList();
			ReasonForCueSheetAbsence = element.Elements().Where(e => e.Name == "ReasonForCueSheetAbsence").Select(e => new Reason(e)).SingleOrDefault() ?? new NullReason();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			InstrumentationDescription = element.Elements().Where(e => e.Name == "InstrumentationDescription").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			IsMedley = element.Elements().Where(e => e.Name == "IsMedley").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsPotpourri = element.Elements().Where(e => e.Name == "IsPotpourri").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsInstrumental = element.Elements().Where(e => e.Name == "IsInstrumental").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBackground = element.Elements().Where(e => e.Name == "IsBackground").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			NoSilenceBefore = element.Elements().Where(e => e.Name == "NoSilenceBefore").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			NoSilenceAfter = element.Elements().Where(e => e.Name == "NoSilenceAfter").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PerformerInformationRequired = element.Elements().Where(e => e.Name == "PerformerInformationRequired").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageOfPerformances = element.Elements().Where(e => e.Name == "LanguageOfPerformance").Select(e => e.Value).ToList();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			VideoCollectionReferenceList = element.Elements().Where(e => e.Name == "VideoCollectionReferenceList").Select(e => new SoundRecordingCollectionReferenceList(e)).SingleOrDefault() ?? new NullSoundRecordingCollectionReferenceList();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault() ?? new NullResourceMusicalWorkReferenceList();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault() ?? new NullResourceContainedResourceReferenceList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			MasteredDate = element.Elements().Where(e => e.Name == "MasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			VideoDetailsByTerritorys = element.Elements().Where(e => e.Name == "VideoDetailsByTerritory").Select(e => new VideoDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Video()
		{ }

		public static bool operator ==(Video left, Video right)
		{
			return Utils.ValidatedEquals<NullVideo>(left, right);
		}

		public static bool operator !=(Video left, Video right)
		{
			return !(left == right);
		}
	}

	internal class NullVideo : Video
	{
		public override VideoType VideoType { get { throw this.NullAccess("VideoType"); } }
		public override bool? IsArtistRelated { get { throw this.NullAccess("IsArtistRelated"); } }
		public override IList<VideoId> VideoIds { get { throw this.NullAccess("VideoIds"); } }
		public override IList<MusicalWorkId> IndirectVideoIds { get { throw this.NullAccess("IndirectVideoIds"); } }
		public override string ResourceReference { get { throw this.NullAccess("ResourceReference"); } }
		public override IList<VideoCueSheetReference> VideoCueSheetReferences { get { throw this.NullAccess("VideoCueSheetReferences"); } }
		public override Reason ReasonForCueSheetAbsence { get { throw this.NullAccess("ReasonForCueSheetAbsence"); } }
		public override ReferenceTitle ReferenceTitle { get { throw this.NullAccess("ReferenceTitle"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override Description InstrumentationDescription { get { throw this.NullAccess("InstrumentationDescription"); } }
		public override bool? IsMedley { get { throw this.NullAccess("IsMedley"); } }
		public override bool? IsPotpourri { get { throw this.NullAccess("IsPotpourri"); } }
		public override bool? IsInstrumental { get { throw this.NullAccess("IsInstrumental"); } }
		public override bool? IsBackground { get { throw this.NullAccess("IsBackground"); } }
		public override bool? IsHiddenResource { get { throw this.NullAccess("IsHiddenResource"); } }
		public override bool? IsBonusResource { get { throw this.NullAccess("IsBonusResource"); } }
		public override bool? NoSilenceBefore { get { throw this.NullAccess("NoSilenceBefore"); } }
		public override bool? NoSilenceAfter { get { throw this.NullAccess("NoSilenceAfter"); } }
		public override bool? PerformerInformationRequired { get { throw this.NullAccess("PerformerInformationRequired"); } }
		public override IList<string> LanguageOfPerformances { get { throw this.NullAccess("LanguageOfPerformances"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override SoundRecordingCollectionReferenceList VideoCollectionReferenceList { get { throw this.NullAccess("VideoCollectionReferenceList"); } }
		public override ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get { throw this.NullAccess("ResourceMusicalWorkReferenceList"); } }
		public override ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get { throw this.NullAccess("ResourceContainedResourceReferenceList"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override EventDate MasteredDate { get { throw this.NullAccess("MasteredDate"); } }
		public override IList<VideoDetailsByTerritory> VideoDetailsByTerritorys { get { throw this.NullAccess("VideoDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class VideoDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual IList<RightsController> RightsControllers { get; set; }
		public virtual EventDate RemasteredDate { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual string SequenceNumber { get; set; }
		public virtual IList<HostSoundCarrier> HostSoundCarriers { get; set; }
		public virtual Comment MarketingComment { get; set; }
		public virtual IList<Genre> Genres { get; set; }
		public virtual IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public virtual IList<AvRating> AvRatings { get; set; }
		public virtual FulfillmentDate FulfillmentDate { get; set; }
		public virtual IList<Keywords> Keywords { get; set; }
		public virtual Synopsis Synopsis { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual IList<TechnicalVideoDetails> TechnicalVideoDetails { get; set; }
		public virtual IList<Character> Characters { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public VideoDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			HostSoundCarriers = element.Elements().Where(e => e.Name == "HostSoundCarrier").Select(e => new HostSoundCarrier(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault() ?? new NullComment();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			AvRatings = element.Elements().Where(e => e.Name == "AvRating").Select(e => new AvRating(e)).ToList();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault() ?? new NullFulfillmentDate();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault() ?? new NullSynopsis();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			TechnicalVideoDetails = element.Elements().Where(e => e.Name == "TechnicalVideoDetails").Select(e => new TechnicalVideoDetails(e)).ToList();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public VideoDetailsByTerritory()
		{ }

		public static bool operator ==(VideoDetailsByTerritory left, VideoDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullVideoDetailsByTerritory>(left, right);
		}

		public static bool operator !=(VideoDetailsByTerritory left, VideoDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullVideoDetailsByTerritory : VideoDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override IList<RightsController> RightsControllers { get { throw this.NullAccess("RightsControllers"); } }
		public override EventDate RemasteredDate { get { throw this.NullAccess("RemasteredDate"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override string SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override IList<HostSoundCarrier> HostSoundCarriers { get { throw this.NullAccess("HostSoundCarriers"); } }
		public override Comment MarketingComment { get { throw this.NullAccess("MarketingComment"); } }
		public override IList<Genre> Genres { get { throw this.NullAccess("Genres"); } }
		public override IList<ParentalWarningType> ParentalWarningTypes { get { throw this.NullAccess("ParentalWarningTypes"); } }
		public override IList<AvRating> AvRatings { get { throw this.NullAccess("AvRatings"); } }
		public override FulfillmentDate FulfillmentDate { get { throw this.NullAccess("FulfillmentDate"); } }
		public override IList<Keywords> Keywords { get { throw this.NullAccess("Keywords"); } }
		public override Synopsis Synopsis { get { throw this.NullAccess("Synopsis"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override IList<TechnicalVideoDetails> TechnicalVideoDetails { get { throw this.NullAccess("TechnicalVideoDetails"); } }
		public override IList<Character> Characters { get { throw this.NullAccess("Characters"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class WebPolicy
	{
		public virtual Condition Condition { get; set; }
		public virtual bool? AccessBlockingRequested { get; set; }
		public virtual string AccessLimitation { get; set; }
		public virtual bool? EmbeddingAllowed { get; set; }
		public virtual bool? UserRatingAllowed { get; set; }
		public virtual bool? UserCommentAllowed { get; set; }
		public virtual bool? UserResponsesAllowed { get; set; }
		public virtual bool? SyndicationAllowed { get; set; }

		public WebPolicy(XElement element)
		{
			Condition = element.Elements().Where(e => e.Name == "Condition").Select(e => new Condition(e)).SingleOrDefault() ?? new NullCondition();
			AccessBlockingRequested = element.Elements().Where(e => e.Name == "AccessBlockingRequested").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			AccessLimitation = element.Elements().Where(e => e.Name == "AccessLimitation").Select(e => e.Value).SingleOrDefault();
			EmbeddingAllowed = element.Elements().Where(e => e.Name == "EmbeddingAllowed").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			UserRatingAllowed = element.Elements().Where(e => e.Name == "UserRatingAllowed").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			UserCommentAllowed = element.Elements().Where(e => e.Name == "UserCommentAllowed").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			UserResponsesAllowed = element.Elements().Where(e => e.Name == "UserResponsesAllowed").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			SyndicationAllowed = element.Elements().Where(e => e.Name == "SyndicationAllowed").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public WebPolicy()
		{ }

		public static bool operator ==(WebPolicy left, WebPolicy right)
		{
			return Utils.ValidatedEquals<NullWebPolicy>(left, right);
		}

		public static bool operator !=(WebPolicy left, WebPolicy right)
		{
			return !(left == right);
		}
	}

	internal class NullWebPolicy : WebPolicy
	{
		public override Condition Condition { get { throw this.NullAccess("Condition"); } }
		public override bool? AccessBlockingRequested { get { throw this.NullAccess("AccessBlockingRequested"); } }
		public override string AccessLimitation { get { throw this.NullAccess("AccessLimitation"); } }
		public override bool? EmbeddingAllowed { get { throw this.NullAccess("EmbeddingAllowed"); } }
		public override bool? UserRatingAllowed { get { throw this.NullAccess("UserRatingAllowed"); } }
		public override bool? UserCommentAllowed { get { throw this.NullAccess("UserCommentAllowed"); } }
		public override bool? UserResponsesAllowed { get { throw this.NullAccess("UserResponsesAllowed"); } }
		public override bool? SyndicationAllowed { get { throw this.NullAccess("SyndicationAllowed"); } }
	}

	public partial class AdditionalInformation
	{
		public override string ToString(){return Value;}
		public static implicit operator string(AdditionalInformation obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public AdditionalInformation(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public AdditionalInformation()
		{ }

		public static bool operator ==(AdditionalInformation left, AdditionalInformation right)
		{
			return Utils.ValidatedEquals<NullAdditionalInformation>(left, right);
		}

		public static bool operator !=(AdditionalInformation left, AdditionalInformation right)
		{
			return !(left == right);
		}
	}

	internal class NullAdditionalInformation : AdditionalInformation
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class AdministratingRecordCompany
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }
		public virtual string Role { get; set; }

		public AdministratingRecordCompany(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
			Role = element.Attributes().Where(e => e.Name == "Role").Select(e => e.Value).SingleOrDefault();
		}

		public AdministratingRecordCompany()
		{ }

		public static bool operator ==(AdministratingRecordCompany left, AdministratingRecordCompany right)
		{
			return Utils.ValidatedEquals<NullAdministratingRecordCompany>(left, right);
		}

		public static bool operator !=(AdministratingRecordCompany left, AdministratingRecordCompany right)
		{
			return !(left == right);
		}
	}

	internal class NullAdministratingRecordCompany : AdministratingRecordCompany
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
		public override string Role { get { throw this.NullAccess("Role"); } }
	}

	public partial class AmountByUseAndDistributionChannelType
	{
		public virtual decimal? Amount { get; set; }
		public virtual IList<UseType> UseTypes { get; set; }
		public virtual IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public virtual IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public virtual IList<CarrierType> CarrierTypes { get; set; }

		public AmountByUseAndDistributionChannelType(XElement element)
		{
			Amount = element.Elements().Where(e => e.Name == "Amount").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public AmountByUseAndDistributionChannelType()
		{ }

		public static bool operator ==(AmountByUseAndDistributionChannelType left, AmountByUseAndDistributionChannelType right)
		{
			return Utils.ValidatedEquals<NullAmountByUseAndDistributionChannelType>(left, right);
		}

		public static bool operator !=(AmountByUseAndDistributionChannelType left, AmountByUseAndDistributionChannelType right)
		{
			return !(left == right);
		}
	}

	internal class NullAmountByUseAndDistributionChannelType : AmountByUseAndDistributionChannelType
	{
		public override decimal? Amount { get { throw this.NullAccess("Amount"); } }
		public override IList<UseType> UseTypes { get { throw this.NullAccess("UseTypes"); } }
		public override IList<UserInterfaceType> UserInterfaceTypes { get { throw this.NullAccess("UserInterfaceTypes"); } }
		public override IList<DistributionChannelType> DistributionChannelTypes { get { throw this.NullAccess("DistributionChannelTypes"); } }
		public override IList<CarrierType> CarrierTypes { get { throw this.NullAccess("CarrierTypes"); } }
	}

	public partial class AmountPerCollection
	{
		public virtual decimal? Amount { get; set; }
		public virtual CollectionType CollectionType { get; set; }

		public AmountPerCollection(XElement element)
		{
			Amount = element.Elements().Where(e => e.Name == "Amount").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			CollectionType = element.Elements().Where(e => e.Name == "CollectionType").Select(e => new CollectionType(e)).SingleOrDefault() ?? new NullCollectionType();
		}

		public AmountPerCollection()
		{ }

		public static bool operator ==(AmountPerCollection left, AmountPerCollection right)
		{
			return Utils.ValidatedEquals<NullAmountPerCollection>(left, right);
		}

		public static bool operator !=(AmountPerCollection left, AmountPerCollection right)
		{
			return !(left == right);
		}
	}

	internal class NullAmountPerCollection : AmountPerCollection
	{
		public override decimal? Amount { get { throw this.NullAccess("Amount"); } }
		public override CollectionType CollectionType { get { throw this.NullAccess("CollectionType"); } }
	}

	public partial class Annotation
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Annotation obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Annotation(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Annotation()
		{ }

		public static bool operator ==(Annotation left, Annotation right)
		{
			return Utils.ValidatedEquals<NullAnnotation>(left, right);
		}

		public static bool operator !=(Annotation left, Annotation right)
		{
			return !(left == right);
		}
	}

	internal class NullAnnotation : Annotation
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class AppliedRoyaltyRate
	{
		public virtual decimal? Value { get; set; }
		public virtual string ValueType { get; set; }
		public virtual string RoyaltyRateType { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public AppliedRoyaltyRate(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			ValueType = element.Attributes().Where(e => e.Name == "ValueType").Select(e => e.Value).SingleOrDefault();
			RoyaltyRateType = element.Attributes().Where(e => e.Name == "RoyaltyRateType").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public AppliedRoyaltyRate()
		{ }

		public static bool operator ==(AppliedRoyaltyRate left, AppliedRoyaltyRate right)
		{
			return Utils.ValidatedEquals<NullAppliedRoyaltyRate>(left, right);
		}

		public static bool operator !=(AppliedRoyaltyRate left, AppliedRoyaltyRate right)
		{
			return !(left == right);
		}
	}

	internal class NullAppliedRoyaltyRate : AppliedRoyaltyRate
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string ValueType { get { throw this.NullAccess("ValueType"); } }
		public override string RoyaltyRateType { get { throw this.NullAccess("RoyaltyRateType"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class Artist
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual IList<ArtistRole> ArtistRoles { get; set; }
		public virtual int? SequenceNumber { get; set; }

		public Artist(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			ArtistRoles = element.Elements().Where(e => e.Name == "ArtistRole").Select(e => new ArtistRole(e)).ToList();
			SequenceNumber = element.Attributes().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public Artist()
		{ }

		public static bool operator ==(Artist left, Artist right)
		{
			return Utils.ValidatedEquals<NullArtist>(left, right);
		}

		public static bool operator !=(Artist left, Artist right)
		{
			return !(left == right);
		}
	}

	internal class NullArtist : Artist
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override IList<ArtistRole> ArtistRoles { get { throw this.NullAccess("ArtistRoles"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
	}

	public partial class ArtistRole
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ArtistRole obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ArtistRole(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ArtistRole()
		{ }

		public static bool operator ==(ArtistRole left, ArtistRole right)
		{
			return Utils.ValidatedEquals<NullArtistRole>(left, right);
		}

		public static bool operator !=(ArtistRole left, ArtistRole right)
		{
			return !(left == right);
		}
	}

	internal class NullArtistRole : ArtistRole
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class AudioCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(AudioCodecType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public AudioCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public AudioCodecType()
		{ }

		public static bool operator ==(AudioCodecType left, AudioCodecType right)
		{
			return Utils.ValidatedEquals<NullAudioCodecType>(left, right);
		}

		public static bool operator !=(AudioCodecType left, AudioCodecType right)
		{
			return !(left == right);
		}
	}

	internal class NullAudioCodecType : AudioCodecType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class AvRating
	{
		public virtual string RatingText { get; set; }
		public virtual RatingAgency RatingAgency { get; set; }

		public AvRating(XElement element)
		{
			RatingText = element.Elements().Where(e => e.Name == "RatingText").Select(e => e.Value).SingleOrDefault();
			RatingAgency = element.Elements().Where(e => e.Name == "RatingAgency").Select(e => new RatingAgency(e)).SingleOrDefault() ?? new NullRatingAgency();
		}

		public AvRating()
		{ }

		public static bool operator ==(AvRating left, AvRating right)
		{
			return Utils.ValidatedEquals<NullAvRating>(left, right);
		}

		public static bool operator !=(AvRating left, AvRating right)
		{
			return !(left == right);
		}
	}

	internal class NullAvRating : AvRating
	{
		public override string RatingText { get { throw this.NullAccess("RatingText"); } }
		public override RatingAgency RatingAgency { get { throw this.NullAccess("RatingAgency"); } }
	}

	public partial class BitRate
	{
		public virtual decimal? Value { get; set; }
		public virtual string UnitOfMeasure { get; set; }

		public BitRate(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			UnitOfMeasure = element.Attributes().Where(e => e.Name == "UnitOfMeasure").Select(e => e.Value).SingleOrDefault();
		}

		public BitRate()
		{ }

		public static bool operator ==(BitRate left, BitRate right)
		{
			return Utils.ValidatedEquals<NullBitRate>(left, right);
		}

		public static bool operator !=(BitRate left, BitRate right)
		{
			return !(left == right);
		}
	}

	internal class NullBitRate : BitRate
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string UnitOfMeasure { get { throw this.NullAccess("UnitOfMeasure"); } }
	}

	public partial class CLine
	{
		public virtual string Year { get; set; }
		public virtual string CLineCompany { get; set; }
		public virtual string CLineText { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public CLine(XElement element)
		{
			Year = element.Elements().Where(e => e.Name == "Year").Select(e => e.Value).SingleOrDefault();
			CLineCompany = element.Elements().Where(e => e.Name == "CLineCompany").Select(e => e.Value).SingleOrDefault();
			CLineText = element.Elements().Where(e => e.Name == "CLineText").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public CLine()
		{ }

		public static bool operator ==(CLine left, CLine right)
		{
			return Utils.ValidatedEquals<NullCLine>(left, right);
		}

		public static bool operator !=(CLine left, CLine right)
		{
			return !(left == right);
		}
	}

	internal class NullCLine : CLine
	{
		public override string Year { get { throw this.NullAccess("Year"); } }
		public override string CLineCompany { get { throw this.NullAccess("CLineCompany"); } }
		public override string CLineText { get { throw this.NullAccess("CLineText"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CalculationType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CalculationType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual int? SequenceNumber { get; set; }

		public CalculationType(XElement element)
		{
			Value = element.Value;
			SequenceNumber = element.Attributes().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public CalculationType()
		{ }

		public static bool operator ==(CalculationType left, CalculationType right)
		{
			return Utils.ValidatedEquals<NullCalculationType>(left, right);
		}

		public static bool operator !=(CalculationType left, CalculationType right)
		{
			return !(left == right);
		}
	}

	internal class NullCalculationType : CalculationType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
	}

	public partial class CarrierType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CarrierType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CarrierType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CarrierType()
		{ }

		public static bool operator ==(CarrierType left, CarrierType right)
		{
			return Utils.ValidatedEquals<NullCarrierType>(left, right);
		}

		public static bool operator !=(CarrierType left, CarrierType right)
		{
			return !(left == right);
		}
	}

	internal class NullCarrierType : CarrierType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class CatalogNumber
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CatalogNumber obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }

		public CatalogNumber(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
		}

		public CatalogNumber()
		{ }

		public static bool operator ==(CatalogNumber left, CatalogNumber right)
		{
			return Utils.ValidatedEquals<NullCatalogNumber>(left, right);
		}

		public static bool operator !=(CatalogNumber left, CatalogNumber right)
		{
			return !(left == right);
		}
	}

	internal class NullCatalogNumber : CatalogNumber
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
	}

	public partial class CdProtectionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CdProtectionType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CdProtectionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CdProtectionType()
		{ }

		public static bool operator ==(CdProtectionType left, CdProtectionType right)
		{
			return Utils.ValidatedEquals<NullCdProtectionType>(left, right);
		}

		public static bool operator !=(CdProtectionType left, CdProtectionType right)
		{
			return !(left == right);
		}
	}

	internal class NullCdProtectionType : CdProtectionType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class Character
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual ResourceContributor ResourceContributor { get; set; }
		public virtual int? SequenceNumber { get; set; }

		public Character(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			ResourceContributor = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).SingleOrDefault() ?? new NullResourceContributor();
			SequenceNumber = element.Attributes().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public Character()
		{ }

		public static bool operator ==(Character left, Character right)
		{
			return Utils.ValidatedEquals<NullCharacter>(left, right);
		}

		public static bool operator !=(Character left, Character right)
		{
			return !(left == right);
		}
	}

	internal class NullCharacter : Character
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override ResourceContributor ResourceContributor { get { throw this.NullAccess("ResourceContributor"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
	}

	public partial class Collection1
	{
		public virtual IList<CollectionId> CollectionIds { get; set; }
		public virtual IList<CollectionType> CollectionTypes { get; set; }
		public virtual string CollectionReference { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<ResourceContributor> Contributors { get; set; }
		public virtual CollectionCollectionReferenceList CollectionCollectionReferenceList { get; set; }
		public virtual bool? IsComplete { get; set; }
		public virtual string DurationOfMusicalContent { get; set; }
		public virtual EventDate CreationDate { get; set; }
		public virtual EventDate OriginalReleaseDate { get; set; }
		public virtual string OriginalLanguage { get; set; }
		public virtual IList<CollectionDetailsByTerritory1> CollectionDetailsByTerritorys { get; set; }
		public virtual CollectionResourceReferenceList1 CollectionResourceReferenceList { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Collection1(XElement element)
		{
			CollectionIds = element.Elements().Where(e => e.Name == "CollectionId").Select(e => new CollectionId(e)).ToList();
			CollectionTypes = element.Elements().Where(e => e.Name == "CollectionType").Select(e => new CollectionType(e)).ToList();
			CollectionReference = element.Elements().Where(e => e.Name == "CollectionReference").Select(e => e.Value).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			CollectionCollectionReferenceList = element.Elements().Where(e => e.Name == "CollectionCollectionReferenceList").Select(e => new CollectionCollectionReferenceList(e)).SingleOrDefault() ?? new NullCollectionCollectionReferenceList();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			DurationOfMusicalContent = element.Elements().Where(e => e.Name == "DurationOfMusicalContent").Select(e => e.Value).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalLanguage = element.Elements().Where(e => e.Name == "OriginalLanguage").Select(e => e.Value).SingleOrDefault();
			CollectionDetailsByTerritorys = element.Elements().Where(e => e.Name == "CollectionDetailsByTerritory").Select(e => new CollectionDetailsByTerritory1(e)).ToList();
			CollectionResourceReferenceList = element.Elements().Where(e => e.Name == "CollectionResourceReferenceList").Select(e => new CollectionResourceReferenceList1(e)).SingleOrDefault() ?? new NullCollectionResourceReferenceList1();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Collection1()
		{ }

		public static bool operator ==(Collection1 left, Collection1 right)
		{
			return Utils.ValidatedEquals<NullCollection1>(left, right);
		}

		public static bool operator !=(Collection1 left, Collection1 right)
		{
			return !(left == right);
		}
	}

	internal class NullCollection1 : Collection1
	{
		public override IList<CollectionId> CollectionIds { get { throw this.NullAccess("CollectionIds"); } }
		public override IList<CollectionType> CollectionTypes { get { throw this.NullAccess("CollectionTypes"); } }
		public override string CollectionReference { get { throw this.NullAccess("CollectionReference"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<ResourceContributor> Contributors { get { throw this.NullAccess("Contributors"); } }
		public override CollectionCollectionReferenceList CollectionCollectionReferenceList { get { throw this.NullAccess("CollectionCollectionReferenceList"); } }
		public override bool? IsComplete { get { throw this.NullAccess("IsComplete"); } }
		public override string DurationOfMusicalContent { get { throw this.NullAccess("DurationOfMusicalContent"); } }
		public override EventDate CreationDate { get { throw this.NullAccess("CreationDate"); } }
		public override EventDate OriginalReleaseDate { get { throw this.NullAccess("OriginalReleaseDate"); } }
		public override string OriginalLanguage { get { throw this.NullAccess("OriginalLanguage"); } }
		public override IList<CollectionDetailsByTerritory1> CollectionDetailsByTerritorys { get { throw this.NullAccess("CollectionDetailsByTerritorys"); } }
		public override CollectionResourceReferenceList1 CollectionResourceReferenceList { get { throw this.NullAccess("CollectionResourceReferenceList"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CollectionCollectionReference
	{
		public virtual int? SequenceNumber { get; set; }
		public virtual string CollectionCollectionReferenceProp { get; set; }
		public virtual string StartTime { get; set; }
		public virtual string Duration { get; set; }
		public virtual string EndTime { get; set; }
		public virtual DateTime? InclusionDate { get; set; }

		public CollectionCollectionReference(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			CollectionCollectionReferenceProp = element.Elements().Where(e => e.Name == "CollectionCollectionReference").Select(e => e.Value).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
			InclusionDate = element.Elements().Where(e => e.Name == "InclusionDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
		}

		public CollectionCollectionReference()
		{ }

		public static bool operator ==(CollectionCollectionReference left, CollectionCollectionReference right)
		{
			return Utils.ValidatedEquals<NullCollectionCollectionReference>(left, right);
		}

		public static bool operator !=(CollectionCollectionReference left, CollectionCollectionReference right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionCollectionReference : CollectionCollectionReference
	{
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override string CollectionCollectionReferenceProp { get { throw this.NullAccess("CollectionCollectionReferenceProp"); } }
		public override string StartTime { get { throw this.NullAccess("StartTime"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override string EndTime { get { throw this.NullAccess("EndTime"); } }
		public override DateTime? InclusionDate { get { throw this.NullAccess("InclusionDate"); } }
	}

	public partial class CollectionCollectionReferenceList
	{
		public virtual int? NumberOfCollections { get; set; }
		public virtual IList<CollectionCollectionReference> CollectionCollectionReferences { get; set; }

		public CollectionCollectionReferenceList(XElement element)
		{
			NumberOfCollections = element.Elements().Where(e => e.Name == "NumberOfCollections").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			CollectionCollectionReferences = element.Elements().Where(e => e.Name == "CollectionCollectionReference").Select(e => new CollectionCollectionReference(e)).ToList();
		}

		public CollectionCollectionReferenceList()
		{ }

		public static bool operator ==(CollectionCollectionReferenceList left, CollectionCollectionReferenceList right)
		{
			return Utils.ValidatedEquals<NullCollectionCollectionReferenceList>(left, right);
		}

		public static bool operator !=(CollectionCollectionReferenceList left, CollectionCollectionReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionCollectionReferenceList : CollectionCollectionReferenceList
	{
		public override int? NumberOfCollections { get { throw this.NullAccess("NumberOfCollections"); } }
		public override IList<CollectionCollectionReference> CollectionCollectionReferences { get { throw this.NullAccess("CollectionCollectionReferences"); } }
	}

	public partial class CollectionDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<ResourceContributor> Contributors { get; set; }
		public virtual bool? IsComplete { get; set; }

		public CollectionDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public CollectionDetailsByTerritory1()
		{ }

		public static bool operator ==(CollectionDetailsByTerritory1 left, CollectionDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullCollectionDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(CollectionDetailsByTerritory1 left, CollectionDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionDetailsByTerritory1 : CollectionDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<ResourceContributor> Contributors { get { throw this.NullAccess("Contributors"); } }
		public override bool? IsComplete { get { throw this.NullAccess("IsComplete"); } }
	}

	public partial class CollectionId
	{
		public virtual string GRid { get; set; }
		public virtual string ISRC { get; set; }
		public virtual string ISAN { get; set; }
		public virtual string VISAN { get; set; }
		public virtual ICPN ICPN { get; set; }
		public virtual CatalogNumber CatalogNumber { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public CollectionId(XElement element)
		{
			GRid = element.Elements().Where(e => e.Name == "GRid").Select(e => e.Value).SingleOrDefault();
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			ICPN = element.Elements().Where(e => e.Name == "ICPN").Select(e => new ICPN(e)).SingleOrDefault() ?? new NullICPN();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault() ?? new NullCatalogNumber();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public CollectionId()
		{ }

		public static bool operator ==(CollectionId left, CollectionId right)
		{
			return Utils.ValidatedEquals<NullCollectionId>(left, right);
		}

		public static bool operator !=(CollectionId left, CollectionId right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionId : CollectionId
	{
		public override string GRid { get { throw this.NullAccess("GRid"); } }
		public override string ISRC { get { throw this.NullAccess("ISRC"); } }
		public override string ISAN { get { throw this.NullAccess("ISAN"); } }
		public override string VISAN { get { throw this.NullAccess("VISAN"); } }
		public override ICPN ICPN { get { throw this.NullAccess("ICPN"); } }
		public override CatalogNumber CatalogNumber { get { throw this.NullAccess("CatalogNumber"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class CollectionList1
	{
		public virtual IList<Collection1> Collections { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public CollectionList1(XElement element)
		{
			Collections = element.Elements().Where(e => e.Name == "Collection").Select(e => new Collection1(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionList1()
		{ }

		public static bool operator ==(CollectionList1 left, CollectionList1 right)
		{
			return Utils.ValidatedEquals<NullCollectionList1>(left, right);
		}

		public static bool operator !=(CollectionList1 left, CollectionList1 right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionList1 : CollectionList1
	{
		public override IList<Collection1> Collections { get { throw this.NullAccess("Collections"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CollectionResourceReferenceList1
	{
		public virtual IList<string> CollectionResourceReferences { get; set; }

		public CollectionResourceReferenceList1(XElement element)
		{
			CollectionResourceReferences = element.Elements().Where(e => e.Name == "CollectionResourceReference").Select(e => e.Value).ToList();
		}

		public CollectionResourceReferenceList1()
		{ }

		public static bool operator ==(CollectionResourceReferenceList1 left, CollectionResourceReferenceList1 right)
		{
			return Utils.ValidatedEquals<NullCollectionResourceReferenceList1>(left, right);
		}

		public static bool operator !=(CollectionResourceReferenceList1 left, CollectionResourceReferenceList1 right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionResourceReferenceList1 : CollectionResourceReferenceList1
	{
		public override IList<string> CollectionResourceReferences { get { throw this.NullAccess("CollectionResourceReferences"); } }
	}

	public partial class CollectionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CollectionType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CollectionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionType()
		{ }

		public static bool operator ==(CollectionType left, CollectionType right)
		{
			return Utils.ValidatedEquals<NullCollectionType>(left, right);
		}

		public static bool operator !=(CollectionType left, CollectionType right)
		{
			return !(left == right);
		}
	}

	internal class NullCollectionType : CollectionType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class Comment
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Comment obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Comment(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Comment()
		{ }

		public static bool operator ==(Comment left, Comment right)
		{
			return Utils.ValidatedEquals<NullComment>(left, right);
		}

		public static bool operator !=(Comment left, Comment right)
		{
			return !(left == right);
		}
	}

	internal class NullComment : Comment
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CommercialModelType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CommercialModelType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CommercialModelType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CommercialModelType()
		{ }

		public static bool operator ==(CommercialModelType left, CommercialModelType right)
		{
			return Utils.ValidatedEquals<NullCommercialModelType>(left, right);
		}

		public static bool operator !=(CommercialModelType left, CommercialModelType right)
		{
			return !(left == right);
		}
	}

	internal class NullCommercialModelType : CommercialModelType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ConsumerRentalPeriod
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ConsumerRentalPeriod obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual bool? IsExtensible { get; set; }

		public ConsumerRentalPeriod(XElement element)
		{
			Value = element.Value;
			IsExtensible = element.Attributes().Where(e => e.Name == "IsExtensible").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public ConsumerRentalPeriod()
		{ }

		public static bool operator ==(ConsumerRentalPeriod left, ConsumerRentalPeriod right)
		{
			return Utils.ValidatedEquals<NullConsumerRentalPeriod>(left, right);
		}

		public static bool operator !=(ConsumerRentalPeriod left, ConsumerRentalPeriod right)
		{
			return !(left == right);
		}
	}

	internal class NullConsumerRentalPeriod : ConsumerRentalPeriod
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override bool? IsExtensible { get { throw this.NullAccess("IsExtensible"); } }
	}

	public partial class ContainerFormat
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ContainerFormat obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ContainerFormat(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ContainerFormat()
		{ }

		public static bool operator ==(ContainerFormat left, ContainerFormat right)
		{
			return Utils.ValidatedEquals<NullContainerFormat>(left, right);
		}

		public static bool operator !=(ContainerFormat left, ContainerFormat right)
		{
			return !(left == right);
		}
	}

	internal class NullContainerFormat : ContainerFormat
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class CourtesyLine
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CourtesyLine obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public CourtesyLine(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public CourtesyLine()
		{ }

		public static bool operator ==(CourtesyLine left, CourtesyLine right)
		{
			return Utils.ValidatedEquals<NullCourtesyLine>(left, right);
		}

		public static bool operator !=(CourtesyLine left, CourtesyLine right)
		{
			return !(left == right);
		}
	}

	internal class NullCourtesyLine : CourtesyLine
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class CreationId
	{
		public virtual string ISWC { get; set; }
		public virtual string OpusNumber { get; set; }
		public virtual IList<string> ComposerCatalogNumbers { get; set; }
		public virtual string ISRC { get; set; }
		public virtual string ISMN { get; set; }
		public virtual string ISAN { get; set; }
		public virtual string VISAN { get; set; }
		public virtual string ISBN { get; set; }
		public virtual string ISSN { get; set; }
		public virtual string SICI { get; set; }
		public virtual CatalogNumber CatalogNumber { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }

		public CreationId(XElement element)
		{
			ISWC = element.Elements().Where(e => e.Name == "ISWC").Select(e => e.Value).SingleOrDefault();
			OpusNumber = element.Elements().Where(e => e.Name == "OpusNumber").Select(e => e.Value).SingleOrDefault();
			ComposerCatalogNumbers = element.Elements().Where(e => e.Name == "ComposerCatalogNumber").Select(e => e.Value).ToList();
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISMN = element.Elements().Where(e => e.Name == "ISMN").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			ISBN = element.Elements().Where(e => e.Name == "ISBN").Select(e => e.Value).SingleOrDefault();
			ISSN = element.Elements().Where(e => e.Name == "ISSN").Select(e => e.Value).SingleOrDefault();
			SICI = element.Elements().Where(e => e.Name == "SICI").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault() ?? new NullCatalogNumber();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
		}

		public CreationId()
		{ }

		public static bool operator ==(CreationId left, CreationId right)
		{
			return Utils.ValidatedEquals<NullCreationId>(left, right);
		}

		public static bool operator !=(CreationId left, CreationId right)
		{
			return !(left == right);
		}
	}

	internal class NullCreationId : CreationId
	{
		public override string ISWC { get { throw this.NullAccess("ISWC"); } }
		public override string OpusNumber { get { throw this.NullAccess("OpusNumber"); } }
		public override IList<string> ComposerCatalogNumbers { get { throw this.NullAccess("ComposerCatalogNumbers"); } }
		public override string ISRC { get { throw this.NullAccess("ISRC"); } }
		public override string ISMN { get { throw this.NullAccess("ISMN"); } }
		public override string ISAN { get { throw this.NullAccess("ISAN"); } }
		public override string VISAN { get { throw this.NullAccess("VISAN"); } }
		public override string ISBN { get { throw this.NullAccess("ISBN"); } }
		public override string ISSN { get { throw this.NullAccess("ISSN"); } }
		public override string SICI { get { throw this.NullAccess("SICI"); } }
		public override CatalogNumber CatalogNumber { get { throw this.NullAccess("CatalogNumber"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
	}

	public partial class Cue1
	{
		public virtual CueUseType CueUseType { get; set; }
		public virtual CueThemeType CueThemeType { get; set; }
		public virtual CueVocalType CueVocalType { get; set; }
		public virtual bool? IsDance { get; set; }
		public virtual CueVisualPerceptionType CueVisualPerceptionType { get; set; }
		public virtual CueOrigin CueOrigin { get; set; }
		public virtual IList<CueCreationReference> CueCreationReferences { get; set; }
		public virtual string ReferencedCreationType { get; set; }
		public virtual CreationId ReferencedCreationId { get; set; }
		public virtual IList<Title> ReferencedCreationTitles { get; set; }
		public virtual IList<ResourceContributor> ReferencedCreationContributors { get; set; }
		public virtual bool? HasMusicalContent { get; set; }
		public virtual string StartTime { get; set; }
		public virtual string Duration { get; set; }
		public virtual string EndTime { get; set; }

		public Cue1(XElement element)
		{
			CueUseType = element.Elements().Where(e => e.Name == "CueUseType").Select(e => new CueUseType(e)).SingleOrDefault() ?? new NullCueUseType();
			CueThemeType = element.Elements().Where(e => e.Name == "CueThemeType").Select(e => new CueThemeType(e)).SingleOrDefault() ?? new NullCueThemeType();
			CueVocalType = element.Elements().Where(e => e.Name == "CueVocalType").Select(e => new CueVocalType(e)).SingleOrDefault() ?? new NullCueVocalType();
			IsDance = element.Elements().Where(e => e.Name == "IsDance").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			CueVisualPerceptionType = element.Elements().Where(e => e.Name == "CueVisualPerceptionType").Select(e => new CueVisualPerceptionType(e)).SingleOrDefault() ?? new NullCueVisualPerceptionType();
			CueOrigin = element.Elements().Where(e => e.Name == "CueOrigin").Select(e => new CueOrigin(e)).SingleOrDefault() ?? new NullCueOrigin();
			CueCreationReferences = element.Elements().Where(e => e.Name == "CueCreationReference").Select(e => new CueCreationReference(e)).ToList();
			ReferencedCreationType = element.Elements().Where(e => e.Name == "ReferencedCreationType").Select(e => e.Value).SingleOrDefault();
			ReferencedCreationId = element.Elements().Where(e => e.Name == "ReferencedCreationId").Select(e => new CreationId(e)).SingleOrDefault() ?? new NullCreationId();
			ReferencedCreationTitles = element.Elements().Where(e => e.Name == "ReferencedCreationTitle").Select(e => new Title(e)).ToList();
			ReferencedCreationContributors = element.Elements().Where(e => e.Name == "ReferencedCreationContributor").Select(e => new ResourceContributor(e)).ToList();
			HasMusicalContent = element.Elements().Where(e => e.Name == "HasMusicalContent").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
		}

		public Cue1()
		{ }

		public static bool operator ==(Cue1 left, Cue1 right)
		{
			return Utils.ValidatedEquals<NullCue1>(left, right);
		}

		public static bool operator !=(Cue1 left, Cue1 right)
		{
			return !(left == right);
		}
	}

	internal class NullCue1 : Cue1
	{
		public override CueUseType CueUseType { get { throw this.NullAccess("CueUseType"); } }
		public override CueThemeType CueThemeType { get { throw this.NullAccess("CueThemeType"); } }
		public override CueVocalType CueVocalType { get { throw this.NullAccess("CueVocalType"); } }
		public override bool? IsDance { get { throw this.NullAccess("IsDance"); } }
		public override CueVisualPerceptionType CueVisualPerceptionType { get { throw this.NullAccess("CueVisualPerceptionType"); } }
		public override CueOrigin CueOrigin { get { throw this.NullAccess("CueOrigin"); } }
		public override IList<CueCreationReference> CueCreationReferences { get { throw this.NullAccess("CueCreationReferences"); } }
		public override string ReferencedCreationType { get { throw this.NullAccess("ReferencedCreationType"); } }
		public override CreationId ReferencedCreationId { get { throw this.NullAccess("ReferencedCreationId"); } }
		public override IList<Title> ReferencedCreationTitles { get { throw this.NullAccess("ReferencedCreationTitles"); } }
		public override IList<ResourceContributor> ReferencedCreationContributors { get { throw this.NullAccess("ReferencedCreationContributors"); } }
		public override bool? HasMusicalContent { get { throw this.NullAccess("HasMusicalContent"); } }
		public override string StartTime { get { throw this.NullAccess("StartTime"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override string EndTime { get { throw this.NullAccess("EndTime"); } }
	}

	public partial class CueCreationReference
	{
		public virtual string CueWorkReference { get; set; }
		public virtual string CueResourceReference { get; set; }

		public CueCreationReference(XElement element)
		{
			CueWorkReference = element.Elements().Where(e => e.Name == "CueWorkReference").Select(e => e.Value).SingleOrDefault();
			CueResourceReference = element.Elements().Where(e => e.Name == "CueResourceReference").Select(e => e.Value).SingleOrDefault();
		}

		public CueCreationReference()
		{ }

		public static bool operator ==(CueCreationReference left, CueCreationReference right)
		{
			return Utils.ValidatedEquals<NullCueCreationReference>(left, right);
		}

		public static bool operator !=(CueCreationReference left, CueCreationReference right)
		{
			return !(left == right);
		}
	}

	internal class NullCueCreationReference : CueCreationReference
	{
		public override string CueWorkReference { get { throw this.NullAccess("CueWorkReference"); } }
		public override string CueResourceReference { get { throw this.NullAccess("CueResourceReference"); } }
	}

	public partial class CueOrigin
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueOrigin obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CueOrigin(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CueOrigin()
		{ }

		public static bool operator ==(CueOrigin left, CueOrigin right)
		{
			return Utils.ValidatedEquals<NullCueOrigin>(left, right);
		}

		public static bool operator !=(CueOrigin left, CueOrigin right)
		{
			return !(left == right);
		}
	}

	internal class NullCueOrigin : CueOrigin
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class CueSheet1
	{
		public virtual IList<ProprietaryId> CueSheetIds { get; set; }
		public virtual string CueSheetReference { get; set; }
		public virtual CueSheetType CueSheetType { get; set; }
		public virtual IList<Cue1> Cues { get; set; }

		public CueSheet1(XElement element)
		{
			CueSheetIds = element.Elements().Where(e => e.Name == "CueSheetId").Select(e => new ProprietaryId(e)).ToList();
			CueSheetReference = element.Elements().Where(e => e.Name == "CueSheetReference").Select(e => e.Value).SingleOrDefault();
			CueSheetType = element.Elements().Where(e => e.Name == "CueSheetType").Select(e => new CueSheetType(e)).SingleOrDefault() ?? new NullCueSheetType();
			Cues = element.Elements().Where(e => e.Name == "Cue").Select(e => new Cue1(e)).ToList();
		}

		public CueSheet1()
		{ }

		public static bool operator ==(CueSheet1 left, CueSheet1 right)
		{
			return Utils.ValidatedEquals<NullCueSheet1>(left, right);
		}

		public static bool operator !=(CueSheet1 left, CueSheet1 right)
		{
			return !(left == right);
		}
	}

	internal class NullCueSheet1 : CueSheet1
	{
		public override IList<ProprietaryId> CueSheetIds { get { throw this.NullAccess("CueSheetIds"); } }
		public override string CueSheetReference { get { throw this.NullAccess("CueSheetReference"); } }
		public override CueSheetType CueSheetType { get { throw this.NullAccess("CueSheetType"); } }
		public override IList<Cue1> Cues { get { throw this.NullAccess("Cues"); } }
	}

	public partial class CueSheetList1
	{
		public virtual IList<CueSheet1> CueSheets { get; set; }

		public CueSheetList1(XElement element)
		{
			CueSheets = element.Elements().Where(e => e.Name == "CueSheet").Select(e => new CueSheet1(e)).ToList();
		}

		public CueSheetList1()
		{ }

		public static bool operator ==(CueSheetList1 left, CueSheetList1 right)
		{
			return Utils.ValidatedEquals<NullCueSheetList1>(left, right);
		}

		public static bool operator !=(CueSheetList1 left, CueSheetList1 right)
		{
			return !(left == right);
		}
	}

	internal class NullCueSheetList1 : CueSheetList1
	{
		public override IList<CueSheet1> CueSheets { get { throw this.NullAccess("CueSheets"); } }
	}

	public partial class CueSheetType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueSheetType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CueSheetType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CueSheetType()
		{ }

		public static bool operator ==(CueSheetType left, CueSheetType right)
		{
			return Utils.ValidatedEquals<NullCueSheetType>(left, right);
		}

		public static bool operator !=(CueSheetType left, CueSheetType right)
		{
			return !(left == right);
		}
	}

	internal class NullCueSheetType : CueSheetType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class CueThemeType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueThemeType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CueThemeType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CueThemeType()
		{ }

		public static bool operator ==(CueThemeType left, CueThemeType right)
		{
			return Utils.ValidatedEquals<NullCueThemeType>(left, right);
		}

		public static bool operator !=(CueThemeType left, CueThemeType right)
		{
			return !(left == right);
		}
	}

	internal class NullCueThemeType : CueThemeType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class CueUseType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueUseType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CueUseType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CueUseType()
		{ }

		public static bool operator ==(CueUseType left, CueUseType right)
		{
			return Utils.ValidatedEquals<NullCueUseType>(left, right);
		}

		public static bool operator !=(CueUseType left, CueUseType right)
		{
			return !(left == right);
		}
	}

	internal class NullCueUseType : CueUseType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class CueVisualPerceptionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueVisualPerceptionType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CueVisualPerceptionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CueVisualPerceptionType()
		{ }

		public static bool operator ==(CueVisualPerceptionType left, CueVisualPerceptionType right)
		{
			return Utils.ValidatedEquals<NullCueVisualPerceptionType>(left, right);
		}

		public static bool operator !=(CueVisualPerceptionType left, CueVisualPerceptionType right)
		{
			return !(left == right);
		}
	}

	internal class NullCueVisualPerceptionType : CueVisualPerceptionType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class CueVocalType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueVocalType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public CueVocalType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public CueVocalType()
		{ }

		public static bool operator ==(CueVocalType left, CueVocalType right)
		{
			return Utils.ValidatedEquals<NullCueVocalType>(left, right);
		}

		public static bool operator !=(CueVocalType left, CueVocalType right)
		{
			return !(left == right);
		}
	}

	internal class NullCueVocalType : CueVocalType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class DSP
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual Name TradingName { get; set; }
		public virtual IList<string> URLs { get; set; }
		public virtual string TerritoryCode { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public DSP(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			TradingName = element.Elements().Where(e => e.Name == "TradingName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			URLs = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).ToList();
			TerritoryCode = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public DSP()
		{ }

		public static bool operator ==(DSP left, DSP right)
		{
			return Utils.ValidatedEquals<NullDSP>(left, right);
		}

		public static bool operator !=(DSP left, DSP right)
		{
			return !(left == right);
		}
	}

	internal class NullDSP : DSP
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override Name TradingName { get { throw this.NullAccess("TradingName"); } }
		public override IList<string> URLs { get { throw this.NullAccess("URLs"); } }
		public override string TerritoryCode { get { throw this.NullAccess("TerritoryCode"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class DealReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DealReference obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public DealReference(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public DealReference()
		{ }

		public static bool operator ==(DealReference left, DealReference right)
		{
			return Utils.ValidatedEquals<NullDealReference>(left, right);
		}

		public static bool operator !=(DealReference left, DealReference right)
		{
			return !(left == right);
		}
	}

	internal class NullDealReference : DealReference
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class DeductionRate
	{
		public virtual decimal? Value { get; set; }
		public virtual string DeductionRateType { get; set; }
		public virtual string DeductionDescription { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public DeductionRate(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			DeductionRateType = element.Attributes().Where(e => e.Name == "DeductionRateType").Select(e => e.Value).SingleOrDefault();
			DeductionDescription = element.Attributes().Where(e => e.Name == "DeductionDescription").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public DeductionRate()
		{ }

		public static bool operator ==(DeductionRate left, DeductionRate right)
		{
			return Utils.ValidatedEquals<NullDeductionRate>(left, right);
		}

		public static bool operator !=(DeductionRate left, DeductionRate right)
		{
			return !(left == right);
		}
	}

	internal class NullDeductionRate : DeductionRate
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string DeductionRateType { get { throw this.NullAccess("DeductionRateType"); } }
		public override string DeductionDescription { get { throw this.NullAccess("DeductionDescription"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Description
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Description obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Description(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Description()
		{ }

		public static bool operator ==(Description left, Description right)
		{
			return Utils.ValidatedEquals<NullDescription>(left, right);
		}

		public static bool operator !=(Description left, Description right)
		{
			return !(left == right);
		}
	}

	internal class NullDescription : Description
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class DistributionChannelDescriptor
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DistributionChannelDescriptor obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public DistributionChannelDescriptor(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public DistributionChannelDescriptor()
		{ }

		public static bool operator ==(DistributionChannelDescriptor left, DistributionChannelDescriptor right)
		{
			return Utils.ValidatedEquals<NullDistributionChannelDescriptor>(left, right);
		}

		public static bool operator !=(DistributionChannelDescriptor left, DistributionChannelDescriptor right)
		{
			return !(left == right);
		}
	}

	internal class NullDistributionChannelDescriptor : DistributionChannelDescriptor
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class DistributionChannelType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DistributionChannelType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public DistributionChannelType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public DistributionChannelType()
		{ }

		public static bool operator ==(DistributionChannelType left, DistributionChannelType right)
		{
			return Utils.ValidatedEquals<NullDistributionChannelType>(left, right);
		}

		public static bool operator !=(DistributionChannelType left, DistributionChannelType right)
		{
			return !(left == right);
		}
	}

	internal class NullDistributionChannelType : DistributionChannelType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class DrmPlatformType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DrmPlatformType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public DrmPlatformType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public DrmPlatformType()
		{ }

		public static bool operator ==(DrmPlatformType left, DrmPlatformType right)
		{
			return Utils.ValidatedEquals<NullDrmPlatformType>(left, right);
		}

		public static bool operator !=(DrmPlatformType left, DrmPlatformType right)
		{
			return !(left == right);
		}
	}

	internal class NullDrmPlatformType : DrmPlatformType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class DurationByUseType
	{
		public virtual string Duration { get; set; }
		public virtual IList<UseType> UseTypes { get; set; }
		public virtual IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public virtual IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public virtual IList<CarrierType> CarrierTypes { get; set; }

		public DurationByUseType(XElement element)
		{
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public DurationByUseType()
		{ }

		public static bool operator ==(DurationByUseType left, DurationByUseType right)
		{
			return Utils.ValidatedEquals<NullDurationByUseType>(left, right);
		}

		public static bool operator !=(DurationByUseType left, DurationByUseType right)
		{
			return !(left == right);
		}
	}

	internal class NullDurationByUseType : DurationByUseType
	{
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override IList<UseType> UseTypes { get { throw this.NullAccess("UseTypes"); } }
		public override IList<UserInterfaceType> UserInterfaceTypes { get { throw this.NullAccess("UserInterfaceTypes"); } }
		public override IList<DistributionChannelType> DistributionChannelTypes { get { throw this.NullAccess("DistributionChannelTypes"); } }
		public override IList<CarrierType> CarrierTypes { get { throw this.NullAccess("CarrierTypes"); } }
	}

	public partial class ErnMessageInBatch
	{
		public virtual string MessageType { get; set; }
		public virtual string MessageId { get; set; }
		public virtual string URL { get; set; }
		public virtual IList<ReleaseId> IncludedReleaseIds { get; set; }
		public virtual MessageActionType DeliveryType { get; set; }
		public virtual ProductType ProductType { get; set; }
		public virtual HashSum HashSum { get; set; }
		public virtual string Signature { get; set; }

		public ErnMessageInBatch(XElement element)
		{
			MessageType = element.Elements().Where(e => e.Name == "MessageType").Select(e => e.Value).SingleOrDefault();
			MessageId = element.Elements().Where(e => e.Name == "MessageId").Select(e => e.Value).SingleOrDefault();
			URL = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).SingleOrDefault();
			IncludedReleaseIds = element.Elements().Where(e => e.Name == "IncludedReleaseId").Select(e => new ReleaseId(e)).ToList();
			DeliveryType = element.Elements().Where(e => e.Name == "DeliveryType").Select(e => new MessageActionType(e)).SingleOrDefault() ?? new NullMessageActionType();
			ProductType = element.Elements().Where(e => e.Name == "ProductType").Select(e => new ProductType(e)).SingleOrDefault() ?? new NullProductType();
			HashSum = element.Elements().Where(e => e.Name == "HashSum").Select(e => new HashSum(e)).SingleOrDefault() ?? new NullHashSum();
			Signature = element.Elements().Where(e => e.Name == "Signature").Select(e => e.Value).SingleOrDefault();
		}

		public ErnMessageInBatch()
		{ }

		public static bool operator ==(ErnMessageInBatch left, ErnMessageInBatch right)
		{
			return Utils.ValidatedEquals<NullErnMessageInBatch>(left, right);
		}

		public static bool operator !=(ErnMessageInBatch left, ErnMessageInBatch right)
		{
			return !(left == right);
		}
	}

	internal class NullErnMessageInBatch : ErnMessageInBatch
	{
		public override string MessageType { get { throw this.NullAccess("MessageType"); } }
		public override string MessageId { get { throw this.NullAccess("MessageId"); } }
		public override string URL { get { throw this.NullAccess("URL"); } }
		public override IList<ReleaseId> IncludedReleaseIds { get { throw this.NullAccess("IncludedReleaseIds"); } }
		public override MessageActionType DeliveryType { get { throw this.NullAccess("DeliveryType"); } }
		public override ProductType ProductType { get { throw this.NullAccess("ProductType"); } }
		public override HashSum HashSum { get { throw this.NullAccess("HashSum"); } }
		public override string Signature { get { throw this.NullAccess("Signature"); } }
	}

	public partial class EventDate
	{
		public virtual DateTime? Value { get; set; }
		public virtual bool? IsApproximate { get; set; }
		public virtual bool? IsBefore { get; set; }
		public virtual bool? IsAfter { get; set; }
		public virtual string TerritoryCode { get; set; }
		public virtual string LocationDescription { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public EventDate(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (DateTime?)null : XmlConvert.ToDateTime(element.Value, XmlDateTimeSerializationMode.RoundtripKind);
			IsApproximate = element.Attributes().Where(e => e.Name == "IsApproximate").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBefore = element.Attributes().Where(e => e.Name == "IsBefore").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsAfter = element.Attributes().Where(e => e.Name == "IsAfter").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			TerritoryCode = element.Attributes().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).SingleOrDefault();
			LocationDescription = element.Attributes().Where(e => e.Name == "LocationDescription").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public EventDate()
		{ }

		public static bool operator ==(EventDate left, EventDate right)
		{
			return Utils.ValidatedEquals<NullEventDate>(left, right);
		}

		public static bool operator !=(EventDate left, EventDate right)
		{
			return !(left == right);
		}
	}

	internal class NullEventDate : EventDate
	{
		public override DateTime? Value { get { throw this.NullAccess("Value"); } }
		public override bool? IsApproximate { get { throw this.NullAccess("IsApproximate"); } }
		public override bool? IsBefore { get { throw this.NullAccess("IsBefore"); } }
		public override bool? IsAfter { get { throw this.NullAccess("IsAfter"); } }
		public override string TerritoryCode { get { throw this.NullAccess("TerritoryCode"); } }
		public override string LocationDescription { get { throw this.NullAccess("LocationDescription"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class EventDateTime
	{
		public virtual DateTime? Value { get; set; }
		public virtual bool? IsApproximate { get; set; }
		public virtual bool? IsBefore { get; set; }
		public virtual bool? IsAfter { get; set; }
		public virtual string TerritoryCode { get; set; }
		public virtual string LocationDescription { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public EventDateTime(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (DateTime?)null : XmlConvert.ToDateTime(element.Value, XmlDateTimeSerializationMode.RoundtripKind);
			IsApproximate = element.Attributes().Where(e => e.Name == "IsApproximate").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsBefore = element.Attributes().Where(e => e.Name == "IsBefore").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsAfter = element.Attributes().Where(e => e.Name == "IsAfter").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			TerritoryCode = element.Attributes().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).SingleOrDefault();
			LocationDescription = element.Attributes().Where(e => e.Name == "LocationDescription").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public EventDateTime()
		{ }

		public static bool operator ==(EventDateTime left, EventDateTime right)
		{
			return Utils.ValidatedEquals<NullEventDateTime>(left, right);
		}

		public static bool operator !=(EventDateTime left, EventDateTime right)
		{
			return !(left == right);
		}
	}

	internal class NullEventDateTime : EventDateTime
	{
		public override DateTime? Value { get { throw this.NullAccess("Value"); } }
		public override bool? IsApproximate { get { throw this.NullAccess("IsApproximate"); } }
		public override bool? IsBefore { get { throw this.NullAccess("IsBefore"); } }
		public override bool? IsAfter { get { throw this.NullAccess("IsAfter"); } }
		public override string TerritoryCode { get { throw this.NullAccess("TerritoryCode"); } }
		public override string LocationDescription { get { throw this.NullAccess("LocationDescription"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Extent
	{
		public virtual decimal? Value { get; set; }
		public virtual string UnitOfMeasure { get; set; }

		public Extent(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			UnitOfMeasure = element.Attributes().Where(e => e.Name == "UnitOfMeasure").Select(e => e.Value).SingleOrDefault();
		}

		public Extent()
		{ }

		public static bool operator ==(Extent left, Extent right)
		{
			return Utils.ValidatedEquals<NullExtent>(left, right);
		}

		public static bool operator !=(Extent left, Extent right)
		{
			return !(left == right);
		}
	}

	internal class NullExtent : Extent
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string UnitOfMeasure { get { throw this.NullAccess("UnitOfMeasure"); } }
	}

	public partial class ExternalLocationDescriptor
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ExternalLocationDescriptor obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string DescriptorSyntax { get; set; }

		public ExternalLocationDescriptor(XElement element)
		{
			Value = element.Value;
			DescriptorSyntax = element.Attributes().Where(e => e.Name == "DescriptorSyntax").Select(e => e.Value).SingleOrDefault();
		}

		public ExternalLocationDescriptor()
		{ }

		public static bool operator ==(ExternalLocationDescriptor left, ExternalLocationDescriptor right)
		{
			return Utils.ValidatedEquals<NullExternalLocationDescriptor>(left, right);
		}

		public static bool operator !=(ExternalLocationDescriptor left, ExternalLocationDescriptor right)
		{
			return !(left == right);
		}
	}

	internal class NullExternalLocationDescriptor : ExternalLocationDescriptor
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string DescriptorSyntax { get { throw this.NullAccess("DescriptorSyntax"); } }
	}

	public partial class ExternalResourceLink
	{
		public virtual IList<string> URLs { get; set; }
		public virtual Period ValidityPeriod { get; set; }
		public virtual string ExternalLink { get; set; }
		public virtual IList<ExternallyLinkedResourceType> ExternallyLinkedResourceTypes { get; set; }
		public virtual string FileFormat { get; set; }

		public ExternalResourceLink(XElement element)
		{
			URLs = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).ToList();
			ValidityPeriod = element.Elements().Where(e => e.Name == "ValidityPeriod").Select(e => new Period(e)).SingleOrDefault() ?? new NullPeriod();
			ExternalLink = element.Elements().Where(e => e.Name == "ExternalLink").Select(e => e.Value).SingleOrDefault();
			ExternallyLinkedResourceTypes = element.Elements().Where(e => e.Name == "ExternallyLinkedResourceType").Select(e => new ExternallyLinkedResourceType(e)).ToList();
			FileFormat = element.Elements().Where(e => e.Name == "FileFormat").Select(e => e.Value).SingleOrDefault();
		}

		public ExternalResourceLink()
		{ }

		public static bool operator ==(ExternalResourceLink left, ExternalResourceLink right)
		{
			return Utils.ValidatedEquals<NullExternalResourceLink>(left, right);
		}

		public static bool operator !=(ExternalResourceLink left, ExternalResourceLink right)
		{
			return !(left == right);
		}
	}

	internal class NullExternalResourceLink : ExternalResourceLink
	{
		public override IList<string> URLs { get { throw this.NullAccess("URLs"); } }
		public override Period ValidityPeriod { get { throw this.NullAccess("ValidityPeriod"); } }
		public override string ExternalLink { get { throw this.NullAccess("ExternalLink"); } }
		public override IList<ExternallyLinkedResourceType> ExternallyLinkedResourceTypes { get { throw this.NullAccess("ExternallyLinkedResourceTypes"); } }
		public override string FileFormat { get { throw this.NullAccess("FileFormat"); } }
	}

	public partial class ExternallyLinkedResourceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ExternallyLinkedResourceType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ExternallyLinkedResourceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ExternallyLinkedResourceType()
		{ }

		public static bool operator ==(ExternallyLinkedResourceType left, ExternallyLinkedResourceType right)
		{
			return Utils.ValidatedEquals<NullExternallyLinkedResourceType>(left, right);
		}

		public static bool operator !=(ExternallyLinkedResourceType left, ExternallyLinkedResourceType right)
		{
			return !(left == right);
		}
	}

	internal class NullExternallyLinkedResourceType : ExternallyLinkedResourceType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class File
	{
		public virtual string FileName { get; set; }
		public virtual string FilePath { get; set; }
		public virtual string URL { get; set; }
		public virtual HashSum HashSum { get; set; }

		public File(XElement element)
		{
			FileName = element.Elements().Where(e => e.Name == "FileName").Select(e => e.Value).SingleOrDefault();
			FilePath = element.Elements().Where(e => e.Name == "FilePath").Select(e => e.Value).SingleOrDefault();
			URL = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).SingleOrDefault();
			HashSum = element.Elements().Where(e => e.Name == "HashSum").Select(e => new HashSum(e)).SingleOrDefault() ?? new NullHashSum();
		}

		public File()
		{ }

		public static bool operator ==(File left, File right)
		{
			return Utils.ValidatedEquals<NullFile>(left, right);
		}

		public static bool operator !=(File left, File right)
		{
			return !(left == right);
		}
	}

	internal class NullFile : File
	{
		public override string FileName { get { throw this.NullAccess("FileName"); } }
		public override string FilePath { get { throw this.NullAccess("FilePath"); } }
		public override string URL { get { throw this.NullAccess("URL"); } }
		public override HashSum HashSum { get { throw this.NullAccess("HashSum"); } }
	}

	public partial class Fingerprint
	{
		public virtual string FingerprintProp { get; set; }
		public virtual FingerprintAlgorithmType FingerprintAlgorithmType { get; set; }
		public virtual string FingerprintAlgorithmVersion { get; set; }
		public virtual string FingerprintAlgorithmParameter { get; set; }

		public Fingerprint(XElement element)
		{
			FingerprintProp = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => e.Value).SingleOrDefault();
			FingerprintAlgorithmType = element.Elements().Where(e => e.Name == "FingerprintAlgorithmType").Select(e => new FingerprintAlgorithmType(e)).SingleOrDefault() ?? new NullFingerprintAlgorithmType();
			FingerprintAlgorithmVersion = element.Elements().Where(e => e.Name == "FingerprintAlgorithmVersion").Select(e => e.Value).SingleOrDefault();
			FingerprintAlgorithmParameter = element.Elements().Where(e => e.Name == "FingerprintAlgorithmParameter").Select(e => e.Value).SingleOrDefault();
		}

		public Fingerprint()
		{ }

		public static bool operator ==(Fingerprint left, Fingerprint right)
		{
			return Utils.ValidatedEquals<NullFingerprint>(left, right);
		}

		public static bool operator !=(Fingerprint left, Fingerprint right)
		{
			return !(left == right);
		}
	}

	internal class NullFingerprint : Fingerprint
	{
		public override string FingerprintProp { get { throw this.NullAccess("FingerprintProp"); } }
		public override FingerprintAlgorithmType FingerprintAlgorithmType { get { throw this.NullAccess("FingerprintAlgorithmType"); } }
		public override string FingerprintAlgorithmVersion { get { throw this.NullAccess("FingerprintAlgorithmVersion"); } }
		public override string FingerprintAlgorithmParameter { get { throw this.NullAccess("FingerprintAlgorithmParameter"); } }
	}

	public partial class FingerprintAlgorithmType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(FingerprintAlgorithmType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public FingerprintAlgorithmType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public FingerprintAlgorithmType()
		{ }

		public static bool operator ==(FingerprintAlgorithmType left, FingerprintAlgorithmType right)
		{
			return Utils.ValidatedEquals<NullFingerprintAlgorithmType>(left, right);
		}

		public static bool operator !=(FingerprintAlgorithmType left, FingerprintAlgorithmType right)
		{
			return !(left == right);
		}
	}

	internal class NullFingerprintAlgorithmType : FingerprintAlgorithmType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class FrameRate
	{
		public virtual decimal? Value { get; set; }
		public virtual string UnitOfMeasure { get; set; }

		public FrameRate(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			UnitOfMeasure = element.Attributes().Where(e => e.Name == "UnitOfMeasure").Select(e => e.Value).SingleOrDefault();
		}

		public FrameRate()
		{ }

		public static bool operator ==(FrameRate left, FrameRate right)
		{
			return Utils.ValidatedEquals<NullFrameRate>(left, right);
		}

		public static bool operator !=(FrameRate left, FrameRate right)
		{
			return !(left == right);
		}
	}

	internal class NullFrameRate : FrameRate
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string UnitOfMeasure { get { throw this.NullAccess("UnitOfMeasure"); } }
	}

	public partial class FulfillmentDate
	{
		public virtual DateTime? FulfillmentDateProp { get; set; }
		public virtual IList<string> ResourceReleaseReferences { get; set; }

		public FulfillmentDate(XElement element)
		{
			FulfillmentDateProp = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
			ResourceReleaseReferences = element.Elements().Where(e => e.Name == "ResourceReleaseReference").Select(e => e.Value).ToList();
		}

		public FulfillmentDate()
		{ }

		public static bool operator ==(FulfillmentDate left, FulfillmentDate right)
		{
			return Utils.ValidatedEquals<NullFulfillmentDate>(left, right);
		}

		public static bool operator !=(FulfillmentDate left, FulfillmentDate right)
		{
			return !(left == right);
		}
	}

	internal class NullFulfillmentDate : FulfillmentDate
	{
		public override DateTime? FulfillmentDateProp { get { throw this.NullAccess("FulfillmentDateProp"); } }
		public override IList<string> ResourceReleaseReferences { get { throw this.NullAccess("ResourceReleaseReferences"); } }
	}

	public partial class Genre
	{
		public virtual Description GenreText { get; set; }
		public virtual Description SubGenre { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Genre(XElement element)
		{
			GenreText = element.Elements().Where(e => e.Name == "GenreText").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			SubGenre = element.Elements().Where(e => e.Name == "SubGenre").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Genre()
		{ }

		public static bool operator ==(Genre left, Genre right)
		{
			return Utils.ValidatedEquals<NullGenre>(left, right);
		}

		public static bool operator !=(Genre left, Genre right)
		{
			return !(left == right);
		}
	}

	internal class NullGenre : Genre
	{
		public override Description GenreText { get { throw this.NullAccess("GenreText"); } }
		public override Description SubGenre { get { throw this.NullAccess("SubGenre"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class GoverningAgreementType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(GoverningAgreementType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public GoverningAgreementType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public GoverningAgreementType()
		{ }

		public static bool operator ==(GoverningAgreementType left, GoverningAgreementType right)
		{
			return Utils.ValidatedEquals<NullGoverningAgreementType>(left, right);
		}

		public static bool operator !=(GoverningAgreementType left, GoverningAgreementType right)
		{
			return !(left == right);
		}
	}

	internal class NullGoverningAgreementType : GoverningAgreementType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class GuaranteedAmount
	{
		public virtual decimal? Value { get; set; }
		public virtual string CurrencyCode { get; set; }
		public virtual string ReferenceUnit { get; set; }

		public GuaranteedAmount(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			CurrencyCode = element.Attributes().Where(e => e.Name == "CurrencyCode").Select(e => e.Value).SingleOrDefault();
			ReferenceUnit = element.Attributes().Where(e => e.Name == "ReferenceUnit").Select(e => e.Value).SingleOrDefault();
		}

		public GuaranteedAmount()
		{ }

		public static bool operator ==(GuaranteedAmount left, GuaranteedAmount right)
		{
			return Utils.ValidatedEquals<NullGuaranteedAmount>(left, right);
		}

		public static bool operator !=(GuaranteedAmount left, GuaranteedAmount right)
		{
			return !(left == right);
		}
	}

	internal class NullGuaranteedAmount : GuaranteedAmount
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string CurrencyCode { get { throw this.NullAccess("CurrencyCode"); } }
		public override string ReferenceUnit { get { throw this.NullAccess("ReferenceUnit"); } }
	}

	public partial class HashSum
	{
		public virtual string HashSumProp { get; set; }
		public virtual HashSumAlgorithmType HashSumAlgorithmType { get; set; }

		public HashSum(XElement element)
		{
			HashSumProp = element.Elements().Where(e => e.Name == "HashSum").Select(e => e.Value).SingleOrDefault();
			HashSumAlgorithmType = element.Elements().Where(e => e.Name == "HashSumAlgorithmType").Select(e => new HashSumAlgorithmType(e)).SingleOrDefault() ?? new NullHashSumAlgorithmType();
		}

		public HashSum()
		{ }

		public static bool operator ==(HashSum left, HashSum right)
		{
			return Utils.ValidatedEquals<NullHashSum>(left, right);
		}

		public static bool operator !=(HashSum left, HashSum right)
		{
			return !(left == right);
		}
	}

	internal class NullHashSum : HashSum
	{
		public override string HashSumProp { get { throw this.NullAccess("HashSumProp"); } }
		public override HashSumAlgorithmType HashSumAlgorithmType { get { throw this.NullAccess("HashSumAlgorithmType"); } }
	}

	public partial class HashSumAlgorithmType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(HashSumAlgorithmType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public HashSumAlgorithmType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public HashSumAlgorithmType()
		{ }

		public static bool operator ==(HashSumAlgorithmType left, HashSumAlgorithmType right)
		{
			return Utils.ValidatedEquals<NullHashSumAlgorithmType>(left, right);
		}

		public static bool operator !=(HashSumAlgorithmType left, HashSumAlgorithmType right)
		{
			return !(left == right);
		}
	}

	internal class NullHashSumAlgorithmType : HashSumAlgorithmType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class HostSoundCarrier
	{
		public virtual IList<ReleaseId> ReleaseIds { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<AdministratingRecordCompany> AdministratingRecordCompanys { get; set; }
		public virtual string TrackNumber { get; set; }
		public virtual string VolumeNumberInSet { get; set; }

		public HostSoundCarrier(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			AdministratingRecordCompanys = element.Elements().Where(e => e.Name == "AdministratingRecordCompany").Select(e => new AdministratingRecordCompany(e)).ToList();
			TrackNumber = element.Elements().Where(e => e.Name == "TrackNumber").Select(e => e.Value).SingleOrDefault();
			VolumeNumberInSet = element.Elements().Where(e => e.Name == "VolumeNumberInSet").Select(e => e.Value).SingleOrDefault();
		}

		public HostSoundCarrier()
		{ }

		public static bool operator ==(HostSoundCarrier left, HostSoundCarrier right)
		{
			return Utils.ValidatedEquals<NullHostSoundCarrier>(left, right);
		}

		public static bool operator !=(HostSoundCarrier left, HostSoundCarrier right)
		{
			return !(left == right);
		}
	}

	internal class NullHostSoundCarrier : HostSoundCarrier
	{
		public override IList<ReleaseId> ReleaseIds { get { throw this.NullAccess("ReleaseIds"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<AdministratingRecordCompany> AdministratingRecordCompanys { get { throw this.NullAccess("AdministratingRecordCompanys"); } }
		public override string TrackNumber { get { throw this.NullAccess("TrackNumber"); } }
		public override string VolumeNumberInSet { get { throw this.NullAccess("VolumeNumberInSet"); } }
	}

	public partial class ICPN
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ICPN obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual bool? IsEan { get; set; }

		public ICPN(XElement element)
		{
			Value = element.Value;
			IsEan = element.Attributes().Where(e => e.Name == "IsEan").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public ICPN()
		{ }

		public static bool operator ==(ICPN left, ICPN right)
		{
			return Utils.ValidatedEquals<NullICPN>(left, right);
		}

		public static bool operator !=(ICPN left, ICPN right)
		{
			return !(left == right);
		}
	}

	internal class NullICPN : ICPN
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override bool? IsEan { get { throw this.NullAccess("IsEan"); } }
	}

	public partial class ImageCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ImageCodecType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ImageCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ImageCodecType()
		{ }

		public static bool operator ==(ImageCodecType left, ImageCodecType right)
		{
			return Utils.ValidatedEquals<NullImageCodecType>(left, right);
		}

		public static bool operator !=(ImageCodecType left, ImageCodecType right)
		{
			return !(left == right);
		}
	}

	internal class NullImageCodecType : ImageCodecType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ImageDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual Description Description { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ImageDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			Description = element.Elements().Where(e => e.Name == "Description").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ImageDetailsByTerritory1()
		{ }

		public static bool operator ==(ImageDetailsByTerritory1 left, ImageDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullImageDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(ImageDetailsByTerritory1 left, ImageDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullImageDetailsByTerritory1 : ImageDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override Description Description { get { throw this.NullAccess("Description"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ImageId
	{
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public ImageId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public ImageId()
		{ }

		public static bool operator ==(ImageId left, ImageId right)
		{
			return Utils.ValidatedEquals<NullImageId>(left, right);
		}

		public static bool operator !=(ImageId left, ImageId right)
		{
			return !(left == right);
		}
	}

	internal class NullImageId : ImageId
	{
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class ImageType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ImageType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ImageType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ImageType()
		{ }

		public static bool operator ==(ImageType left, ImageType right)
		{
			return Utils.ValidatedEquals<NullImageType>(left, right);
		}

		public static bool operator !=(ImageType left, ImageType right)
		{
			return !(left == right);
		}
	}

	internal class NullImageType : ImageType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class IndirectResourceContributor
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual IList<MusicalWorkContributorRole> IndirectResourceContributorRoles { get; set; }
		public virtual int? SequenceNumber { get; set; }

		public IndirectResourceContributor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			IndirectResourceContributorRoles = element.Elements().Where(e => e.Name == "IndirectResourceContributorRole").Select(e => new MusicalWorkContributorRole(e)).ToList();
			SequenceNumber = element.Attributes().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public IndirectResourceContributor()
		{ }

		public static bool operator ==(IndirectResourceContributor left, IndirectResourceContributor right)
		{
			return Utils.ValidatedEquals<NullIndirectResourceContributor>(left, right);
		}

		public static bool operator !=(IndirectResourceContributor left, IndirectResourceContributor right)
		{
			return !(left == right);
		}
	}

	internal class NullIndirectResourceContributor : IndirectResourceContributor
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override IList<MusicalWorkContributorRole> IndirectResourceContributorRoles { get { throw this.NullAccess("IndirectResourceContributorRoles"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
	}

	public partial class Keywords
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Keywords obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Keywords(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Keywords()
		{ }

		public static bool operator ==(Keywords left, Keywords right)
		{
			return Utils.ValidatedEquals<NullKeywords>(left, right);
		}

		public static bool operator !=(Keywords left, Keywords right)
		{
			return !(left == right);
		}
	}

	internal class NullKeywords : Keywords
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class LabelName
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LabelName obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }
		public virtual string LabelNameType { get; set; }

		public LabelName(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
			LabelNameType = element.Attributes().Where(e => e.Name == "LabelNameType").Select(e => e.Value).SingleOrDefault();
		}

		public LabelName()
		{ }

		public static bool operator ==(LabelName left, LabelName right)
		{
			return Utils.ValidatedEquals<NullLabelName>(left, right);
		}

		public static bool operator !=(LabelName left, LabelName right)
		{
			return !(left == right);
		}
	}

	internal class NullLabelName : LabelName
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
		public override string LabelNameType { get { throw this.NullAccess("LabelNameType"); } }
	}

	public partial class LicenseOrClaimRefusalReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LicenseOrClaimRefusalReason obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public LicenseOrClaimRefusalReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public LicenseOrClaimRefusalReason()
		{ }

		public static bool operator ==(LicenseOrClaimRefusalReason left, LicenseOrClaimRefusalReason right)
		{
			return Utils.ValidatedEquals<NullLicenseOrClaimRefusalReason>(left, right);
		}

		public static bool operator !=(LicenseOrClaimRefusalReason left, LicenseOrClaimRefusalReason right)
		{
			return !(left == right);
		}
	}

	internal class NullLicenseOrClaimRefusalReason : LicenseOrClaimRefusalReason
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class LicenseOrClaimRequestUpdateReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LicenseOrClaimRequestUpdateReason obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public LicenseOrClaimRequestUpdateReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public LicenseOrClaimRequestUpdateReason()
		{ }

		public static bool operator ==(LicenseOrClaimRequestUpdateReason left, LicenseOrClaimRequestUpdateReason right)
		{
			return Utils.ValidatedEquals<NullLicenseOrClaimRequestUpdateReason>(left, right);
		}

		public static bool operator !=(LicenseOrClaimRequestUpdateReason left, LicenseOrClaimRequestUpdateReason right)
		{
			return !(left == right);
		}
	}

	internal class NullLicenseOrClaimRequestUpdateReason : LicenseOrClaimRequestUpdateReason
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class LicenseOrClaimUpdateReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LicenseOrClaimUpdateReason obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public LicenseOrClaimUpdateReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public LicenseOrClaimUpdateReason()
		{ }

		public static bool operator ==(LicenseOrClaimUpdateReason left, LicenseOrClaimUpdateReason right)
		{
			return Utils.ValidatedEquals<NullLicenseOrClaimUpdateReason>(left, right);
		}

		public static bool operator !=(LicenseOrClaimUpdateReason left, LicenseOrClaimUpdateReason right)
		{
			return !(left == right);
		}
	}

	internal class NullLicenseOrClaimUpdateReason : LicenseOrClaimUpdateReason
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class LinkedReleaseResourceReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LinkedReleaseResourceReference obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LinkDescription { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public LinkedReleaseResourceReference(XElement element)
		{
			Value = element.Value;
			LinkDescription = element.Attributes().Where(e => e.Name == "LinkDescription").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public LinkedReleaseResourceReference()
		{ }

		public static bool operator ==(LinkedReleaseResourceReference left, LinkedReleaseResourceReference right)
		{
			return Utils.ValidatedEquals<NullLinkedReleaseResourceReference>(left, right);
		}

		public static bool operator !=(LinkedReleaseResourceReference left, LinkedReleaseResourceReference right)
		{
			return !(left == right);
		}
	}

	internal class NullLinkedReleaseResourceReference : LinkedReleaseResourceReference
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LinkDescription { get { throw this.NullAccess("LinkDescription"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MessageActionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MessageActionType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public MessageActionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public MessageActionType()
		{ }

		public static bool operator ==(MessageActionType left, MessageActionType right)
		{
			return Utils.ValidatedEquals<NullMessageActionType>(left, right);
		}

		public static bool operator !=(MessageActionType left, MessageActionType right)
		{
			return !(left == right);
		}
	}

	internal class NullMessageActionType : MessageActionType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class MessageAuditTrail
	{
		public virtual IList<MessageAuditTrailEvent> MessageAuditTrailEvents { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MessageAuditTrail(XElement element)
		{
			MessageAuditTrailEvents = element.Elements().Where(e => e.Name == "MessageAuditTrailEvent").Select(e => new MessageAuditTrailEvent(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MessageAuditTrail()
		{ }

		public static bool operator ==(MessageAuditTrail left, MessageAuditTrail right)
		{
			return Utils.ValidatedEquals<NullMessageAuditTrail>(left, right);
		}

		public static bool operator !=(MessageAuditTrail left, MessageAuditTrail right)
		{
			return !(left == right);
		}
	}

	internal class NullMessageAuditTrail : MessageAuditTrail
	{
		public override IList<MessageAuditTrailEvent> MessageAuditTrailEvents { get { throw this.NullAccess("MessageAuditTrailEvents"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MessageAuditTrailEvent
	{
		public virtual MessagingParty MessagingPartyDescriptor { get; set; }
		public virtual DateTime? DateTime { get; set; }

		public MessageAuditTrailEvent(XElement element)
		{
			MessagingPartyDescriptor = element.Elements().Where(e => e.Name == "MessagingPartyDescriptor").Select(e => new MessagingParty(e)).SingleOrDefault() ?? new NullMessagingParty();
			DateTime = element.Elements().Where(e => e.Name == "DateTime").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
		}

		public MessageAuditTrailEvent()
		{ }

		public static bool operator ==(MessageAuditTrailEvent left, MessageAuditTrailEvent right)
		{
			return Utils.ValidatedEquals<NullMessageAuditTrailEvent>(left, right);
		}

		public static bool operator !=(MessageAuditTrailEvent left, MessageAuditTrailEvent right)
		{
			return !(left == right);
		}
	}

	internal class NullMessageAuditTrailEvent : MessageAuditTrailEvent
	{
		public override MessagingParty MessagingPartyDescriptor { get { throw this.NullAccess("MessagingPartyDescriptor"); } }
		public override DateTime? DateTime { get { throw this.NullAccess("DateTime"); } }
	}

	public partial class MessageHeader
	{
		public virtual string MessageThreadId { get; set; }
		public virtual string MessageId { get; set; }
		public virtual string MessageFileName { get; set; }
		public virtual MessagingParty MessageSender { get; set; }
		public virtual MessagingParty SentOnBehalfOf { get; set; }
		public virtual MessagingParty MessageRecipient { get; set; }
		public virtual DateTime? MessageCreatedDateTime { get; set; }
		public virtual MessageAuditTrail MessageAuditTrail { get; set; }
		public virtual Comment Comment { get; set; }
		public virtual string MessageControlType { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MessageHeader(XElement element)
		{
			MessageThreadId = element.Elements().Where(e => e.Name == "MessageThreadId").Select(e => e.Value).SingleOrDefault();
			MessageId = element.Elements().Where(e => e.Name == "MessageId").Select(e => e.Value).SingleOrDefault();
			MessageFileName = element.Elements().Where(e => e.Name == "MessageFileName").Select(e => e.Value).SingleOrDefault();
			MessageSender = element.Elements().Where(e => e.Name == "MessageSender").Select(e => new MessagingParty(e)).SingleOrDefault() ?? new NullMessagingParty();
			SentOnBehalfOf = element.Elements().Where(e => e.Name == "SentOnBehalfOf").Select(e => new MessagingParty(e)).SingleOrDefault() ?? new NullMessagingParty();
			MessageRecipient = element.Elements().Where(e => e.Name == "MessageRecipient").Select(e => new MessagingParty(e)).SingleOrDefault() ?? new NullMessagingParty();
			MessageCreatedDateTime = element.Elements().Where(e => e.Name == "MessageCreatedDateTime").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
			MessageAuditTrail = element.Elements().Where(e => e.Name == "MessageAuditTrail").Select(e => new MessageAuditTrail(e)).SingleOrDefault() ?? new NullMessageAuditTrail();
			Comment = element.Elements().Where(e => e.Name == "Comment").Select(e => new Comment(e)).SingleOrDefault() ?? new NullComment();
			MessageControlType = element.Elements().Where(e => e.Name == "MessageControlType").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MessageHeader()
		{ }

		public static bool operator ==(MessageHeader left, MessageHeader right)
		{
			return Utils.ValidatedEquals<NullMessageHeader>(left, right);
		}

		public static bool operator !=(MessageHeader left, MessageHeader right)
		{
			return !(left == right);
		}
	}

	internal class NullMessageHeader : MessageHeader
	{
		public override string MessageThreadId { get { throw this.NullAccess("MessageThreadId"); } }
		public override string MessageId { get { throw this.NullAccess("MessageId"); } }
		public override string MessageFileName { get { throw this.NullAccess("MessageFileName"); } }
		public override MessagingParty MessageSender { get { throw this.NullAccess("MessageSender"); } }
		public override MessagingParty SentOnBehalfOf { get { throw this.NullAccess("SentOnBehalfOf"); } }
		public override MessagingParty MessageRecipient { get { throw this.NullAccess("MessageRecipient"); } }
		public override DateTime? MessageCreatedDateTime { get { throw this.NullAccess("MessageCreatedDateTime"); } }
		public override MessageAuditTrail MessageAuditTrail { get { throw this.NullAccess("MessageAuditTrail"); } }
		public override Comment Comment { get { throw this.NullAccess("Comment"); } }
		public override string MessageControlType { get { throw this.NullAccess("MessageControlType"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MessageNotificationPeriod
	{
		public virtual DateTime? StartDate { get; set; }
		public virtual DateTime? EndDate { get; set; }

		public MessageNotificationPeriod(XElement element)
		{
			StartDate = element.Elements().Where(e => e.Name == "StartDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
			EndDate = element.Elements().Where(e => e.Name == "EndDate").Select(e => string.IsNullOrEmpty(e.Value) ? (DateTime?)null : XmlConvert.ToDateTime(e.Value, XmlDateTimeSerializationMode.RoundtripKind)).SingleOrDefault();
		}

		public MessageNotificationPeriod()
		{ }

		public static bool operator ==(MessageNotificationPeriod left, MessageNotificationPeriod right)
		{
			return Utils.ValidatedEquals<NullMessageNotificationPeriod>(left, right);
		}

		public static bool operator !=(MessageNotificationPeriod left, MessageNotificationPeriod right)
		{
			return !(left == right);
		}
	}

	internal class NullMessageNotificationPeriod : MessageNotificationPeriod
	{
		public override DateTime? StartDate { get { throw this.NullAccess("StartDate"); } }
		public override DateTime? EndDate { get { throw this.NullAccess("EndDate"); } }
	}

	public partial class MessagingParty
	{
		public virtual PartyId PartyId { get; set; }
		public virtual PartyName PartyName { get; set; }
		public virtual Name TradingName { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MessagingParty(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyName = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).SingleOrDefault() ?? new NullPartyName();
			TradingName = element.Elements().Where(e => e.Name == "TradingName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MessagingParty()
		{ }

		public static bool operator ==(MessagingParty left, MessagingParty right)
		{
			return Utils.ValidatedEquals<NullMessagingParty>(left, right);
		}

		public static bool operator !=(MessagingParty left, MessagingParty right)
		{
			return !(left == right);
		}
	}

	internal class NullMessagingParty : MessagingParty
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override PartyName PartyName { get { throw this.NullAccess("PartyName"); } }
		public override Name TradingName { get { throw this.NullAccess("TradingName"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MidiDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual IList<RightsController> RightsControllers { get; set; }
		public virtual EventDate RemasteredDate { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MidiDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MidiDetailsByTerritory1()
		{ }

		public static bool operator ==(MidiDetailsByTerritory1 left, MidiDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullMidiDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(MidiDetailsByTerritory1 left, MidiDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullMidiDetailsByTerritory1 : MidiDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override IList<RightsController> RightsControllers { get { throw this.NullAccess("RightsControllers"); } }
		public override EventDate RemasteredDate { get { throw this.NullAccess("RemasteredDate"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MidiId
	{
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public MidiId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public MidiId()
		{ }

		public static bool operator ==(MidiId left, MidiId right)
		{
			return Utils.ValidatedEquals<NullMidiId>(left, right);
		}

		public static bool operator !=(MidiId left, MidiId right)
		{
			return !(left == right);
		}
	}

	internal class NullMidiId : MidiId
	{
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class MidiType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MidiType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public MidiType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public MidiType()
		{ }

		public static bool operator ==(MidiType left, MidiType right)
		{
			return Utils.ValidatedEquals<NullMidiType>(left, right);
		}

		public static bool operator !=(MidiType left, MidiType right)
		{
			return !(left == right);
		}
	}

	internal class NullMidiType : MidiType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class MusicalWork
	{
		public virtual IList<MusicalWorkId> MusicalWorkIds { get; set; }
		public virtual string MusicalWorkReference { get; set; }
		public virtual IList<ReferenceTitle> ReferenceTitles { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<MusicalWorkContributor> MusicalWorkContributors { get; set; }
		public virtual IList<MusicalWorkType> MusicalWorkTypes { get; set; }
		public virtual IList<RightShare> RightShares { get; set; }
		public virtual IList<MusicalWorkDetailsByTerritory> MusicalWorkDetailsByTerritorys { get; set; }
		public virtual bool? IsUpdated { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MusicalWork(XElement element)
		{
			MusicalWorkIds = element.Elements().Where(e => e.Name == "MusicalWorkId").Select(e => new MusicalWorkId(e)).ToList();
			MusicalWorkReference = element.Elements().Where(e => e.Name == "MusicalWorkReference").Select(e => e.Value).SingleOrDefault();
			ReferenceTitles = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			MusicalWorkContributors = element.Elements().Where(e => e.Name == "MusicalWorkContributor").Select(e => new MusicalWorkContributor(e)).ToList();
			MusicalWorkTypes = element.Elements().Where(e => e.Name == "MusicalWorkType").Select(e => new MusicalWorkType(e)).ToList();
			RightShares = element.Elements().Where(e => e.Name == "RightShare").Select(e => new RightShare(e)).ToList();
			MusicalWorkDetailsByTerritorys = element.Elements().Where(e => e.Name == "MusicalWorkDetailsByTerritory").Select(e => new MusicalWorkDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(e => e.Name == "IsUpdated").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MusicalWork()
		{ }

		public static bool operator ==(MusicalWork left, MusicalWork right)
		{
			return Utils.ValidatedEquals<NullMusicalWork>(left, right);
		}

		public static bool operator !=(MusicalWork left, MusicalWork right)
		{
			return !(left == right);
		}
	}

	internal class NullMusicalWork : MusicalWork
	{
		public override IList<MusicalWorkId> MusicalWorkIds { get { throw this.NullAccess("MusicalWorkIds"); } }
		public override string MusicalWorkReference { get { throw this.NullAccess("MusicalWorkReference"); } }
		public override IList<ReferenceTitle> ReferenceTitles { get { throw this.NullAccess("ReferenceTitles"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<MusicalWorkContributor> MusicalWorkContributors { get { throw this.NullAccess("MusicalWorkContributors"); } }
		public override IList<MusicalWorkType> MusicalWorkTypes { get { throw this.NullAccess("MusicalWorkTypes"); } }
		public override IList<RightShare> RightShares { get { throw this.NullAccess("RightShares"); } }
		public override IList<MusicalWorkDetailsByTerritory> MusicalWorkDetailsByTerritorys { get { throw this.NullAccess("MusicalWorkDetailsByTerritorys"); } }
		public override bool? IsUpdated { get { throw this.NullAccess("IsUpdated"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MusicalWorkContributor
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual IList<MusicalWorkContributorRole> MusicalWorkContributorRoles { get; set; }
		public virtual IList<SocietyAffiliation> SocietyAffiliations { get; set; }
		public virtual int? SequenceNumber { get; set; }

		public MusicalWorkContributor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			MusicalWorkContributorRoles = element.Elements().Where(e => e.Name == "MusicalWorkContributorRole").Select(e => new MusicalWorkContributorRole(e)).ToList();
			SocietyAffiliations = element.Elements().Where(e => e.Name == "SocietyAffiliation").Select(e => new SocietyAffiliation(e)).ToList();
			SequenceNumber = element.Attributes().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public MusicalWorkContributor()
		{ }

		public static bool operator ==(MusicalWorkContributor left, MusicalWorkContributor right)
		{
			return Utils.ValidatedEquals<NullMusicalWorkContributor>(left, right);
		}

		public static bool operator !=(MusicalWorkContributor left, MusicalWorkContributor right)
		{
			return !(left == right);
		}
	}

	internal class NullMusicalWorkContributor : MusicalWorkContributor
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override IList<MusicalWorkContributorRole> MusicalWorkContributorRoles { get { throw this.NullAccess("MusicalWorkContributorRoles"); } }
		public override IList<SocietyAffiliation> SocietyAffiliations { get { throw this.NullAccess("SocietyAffiliations"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
	}

	public partial class MusicalWorkContributorRole
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MusicalWorkContributorRole obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public MusicalWorkContributorRole(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public MusicalWorkContributorRole()
		{ }

		public static bool operator ==(MusicalWorkContributorRole left, MusicalWorkContributorRole right)
		{
			return Utils.ValidatedEquals<NullMusicalWorkContributorRole>(left, right);
		}

		public static bool operator !=(MusicalWorkContributorRole left, MusicalWorkContributorRole right)
		{
			return !(left == right);
		}
	}

	internal class NullMusicalWorkContributorRole : MusicalWorkContributorRole
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class MusicalWorkDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<MusicalWorkContributor> MusicalWorkContributors { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public MusicalWorkDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			MusicalWorkContributors = element.Elements().Where(e => e.Name == "MusicalWorkContributor").Select(e => new MusicalWorkContributor(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public MusicalWorkDetailsByTerritory()
		{ }

		public static bool operator ==(MusicalWorkDetailsByTerritory left, MusicalWorkDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullMusicalWorkDetailsByTerritory>(left, right);
		}

		public static bool operator !=(MusicalWorkDetailsByTerritory left, MusicalWorkDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullMusicalWorkDetailsByTerritory : MusicalWorkDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<MusicalWorkContributor> MusicalWorkContributors { get { throw this.NullAccess("MusicalWorkContributors"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class MusicalWorkId
	{
		public virtual string ISWC { get; set; }
		public virtual string OpusNumber { get; set; }
		public virtual IList<string> ComposerCatalogNumbers { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public MusicalWorkId(XElement element)
		{
			ISWC = element.Elements().Where(e => e.Name == "ISWC").Select(e => e.Value).SingleOrDefault();
			OpusNumber = element.Elements().Where(e => e.Name == "OpusNumber").Select(e => e.Value).SingleOrDefault();
			ComposerCatalogNumbers = element.Elements().Where(e => e.Name == "ComposerCatalogNumber").Select(e => e.Value).ToList();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public MusicalWorkId()
		{ }

		public static bool operator ==(MusicalWorkId left, MusicalWorkId right)
		{
			return Utils.ValidatedEquals<NullMusicalWorkId>(left, right);
		}

		public static bool operator !=(MusicalWorkId left, MusicalWorkId right)
		{
			return !(left == right);
		}
	}

	internal class NullMusicalWorkId : MusicalWorkId
	{
		public override string ISWC { get { throw this.NullAccess("ISWC"); } }
		public override string OpusNumber { get { throw this.NullAccess("OpusNumber"); } }
		public override IList<string> ComposerCatalogNumbers { get { throw this.NullAccess("ComposerCatalogNumbers"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class MusicalWorkType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MusicalWorkType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public MusicalWorkType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public MusicalWorkType()
		{ }

		public static bool operator ==(MusicalWorkType left, MusicalWorkType right)
		{
			return Utils.ValidatedEquals<NullMusicalWorkType>(left, right);
		}

		public static bool operator !=(MusicalWorkType left, MusicalWorkType right)
		{
			return !(left == right);
		}
	}

	internal class NullMusicalWorkType : MusicalWorkType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class Name
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Name obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Name(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Name()
		{ }

		public static bool operator ==(Name left, Name right)
		{
			return Utils.ValidatedEquals<NullName>(left, right);
		}

		public static bool operator !=(Name left, Name right)
		{
			return !(left == right);
		}
	}

	internal class NullName : Name
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class NumberOfDataMismatchItems
	{
		public virtual int? Value { get; set; }
		public virtual string DataMismatchStatus { get; set; }

		public NumberOfDataMismatchItems(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (int?)null : XmlConvert.ToInt32(element.Value);
			DataMismatchStatus = element.Attributes().Where(e => e.Name == "DataMismatchStatus").Select(e => e.Value).SingleOrDefault();
		}

		public NumberOfDataMismatchItems()
		{ }

		public static bool operator ==(NumberOfDataMismatchItems left, NumberOfDataMismatchItems right)
		{
			return Utils.ValidatedEquals<NullNumberOfDataMismatchItems>(left, right);
		}

		public static bool operator !=(NumberOfDataMismatchItems left, NumberOfDataMismatchItems right)
		{
			return !(left == right);
		}
	}

	internal class NullNumberOfDataMismatchItems : NumberOfDataMismatchItems
	{
		public override int? Value { get { throw this.NullAccess("Value"); } }
		public override string DataMismatchStatus { get { throw this.NullAccess("DataMismatchStatus"); } }
	}

	public partial class NumberOfSubscribers
	{
		public virtual int? Quantity { get; set; }
		public virtual IList<UseType> UseTypes { get; set; }
		public virtual IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public virtual IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public virtual IList<CarrierType> CarrierTypes { get; set; }

		public NumberOfSubscribers(XElement element)
		{
			Quantity = element.Elements().Where(e => e.Name == "Quantity").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public NumberOfSubscribers()
		{ }

		public static bool operator ==(NumberOfSubscribers left, NumberOfSubscribers right)
		{
			return Utils.ValidatedEquals<NullNumberOfSubscribers>(left, right);
		}

		public static bool operator !=(NumberOfSubscribers left, NumberOfSubscribers right)
		{
			return !(left == right);
		}
	}

	internal class NullNumberOfSubscribers : NumberOfSubscribers
	{
		public override int? Quantity { get { throw this.NullAccess("Quantity"); } }
		public override IList<UseType> UseTypes { get { throw this.NullAccess("UseTypes"); } }
		public override IList<UserInterfaceType> UserInterfaceTypes { get { throw this.NullAccess("UserInterfaceTypes"); } }
		public override IList<DistributionChannelType> DistributionChannelTypes { get { throw this.NullAccess("DistributionChannelTypes"); } }
		public override IList<CarrierType> CarrierTypes { get { throw this.NullAccess("CarrierTypes"); } }
	}

	public partial class OperatingSystemType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(OperatingSystemType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public OperatingSystemType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public OperatingSystemType()
		{ }

		public static bool operator ==(OperatingSystemType left, OperatingSystemType right)
		{
			return Utils.ValidatedEquals<NullOperatingSystemType>(left, right);
		}

		public static bool operator !=(OperatingSystemType left, OperatingSystemType right)
		{
			return !(left == right);
		}
	}

	internal class NullOperatingSystemType : OperatingSystemType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class OrderType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(OrderType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public OrderType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public OrderType()
		{ }

		public static bool operator ==(OrderType left, OrderType right)
		{
			return Utils.ValidatedEquals<NullOrderType>(left, right);
		}

		public static bool operator !=(OrderType left, OrderType right)
		{
			return !(left == right);
		}
	}

	internal class NullOrderType : OrderType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class PLine
	{
		public virtual string Year { get; set; }
		public virtual string PLineCompany { get; set; }
		public virtual string PLineText { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }
		public virtual string PLineType { get; set; }

		public PLine(XElement element)
		{
			Year = element.Elements().Where(e => e.Name == "Year").Select(e => e.Value).SingleOrDefault();
			PLineCompany = element.Elements().Where(e => e.Name == "PLineCompany").Select(e => e.Value).SingleOrDefault();
			PLineText = element.Elements().Where(e => e.Name == "PLineText").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
			PLineType = element.Attributes().Where(e => e.Name == "PLineType").Select(e => e.Value).SingleOrDefault();
		}

		public PLine()
		{ }

		public static bool operator ==(PLine left, PLine right)
		{
			return Utils.ValidatedEquals<NullPLine>(left, right);
		}

		public static bool operator !=(PLine left, PLine right)
		{
			return !(left == right);
		}
	}

	internal class NullPLine : PLine
	{
		public override string Year { get { throw this.NullAccess("Year"); } }
		public override string PLineCompany { get { throw this.NullAccess("PLineCompany"); } }
		public override string PLineText { get { throw this.NullAccess("PLineText"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
		public override string PLineType { get { throw this.NullAccess("PLineType"); } }
	}

	public partial class ParentalWarningType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ParentalWarningType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ParentalWarningType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ParentalWarningType()
		{ }

		public static bool operator ==(ParentalWarningType left, ParentalWarningType right)
		{
			return Utils.ValidatedEquals<NullParentalWarningType>(left, right);
		}

		public static bool operator !=(ParentalWarningType left, ParentalWarningType right)
		{
			return !(left == right);
		}
	}

	internal class NullParentalWarningType : ParentalWarningType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class PartyDescriptor
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }

		public PartyDescriptor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
		}

		public PartyDescriptor()
		{ }

		public static bool operator ==(PartyDescriptor left, PartyDescriptor right)
		{
			return Utils.ValidatedEquals<NullPartyDescriptor>(left, right);
		}

		public static bool operator !=(PartyDescriptor left, PartyDescriptor right)
		{
			return !(left == right);
		}
	}

	internal class NullPartyDescriptor : PartyDescriptor
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
	}

	public partial class PartyId
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PartyId obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual bool? IsDPID { get; set; }
		public virtual bool? IsISNI { get; set; }

		public PartyId(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			IsDPID = element.Attributes().Where(e => e.Name == "IsDPID").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			IsISNI = element.Attributes().Where(e => e.Name == "IsISNI").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public PartyId()
		{ }

		public static bool operator ==(PartyId left, PartyId right)
		{
			return Utils.ValidatedEquals<NullPartyId>(left, right);
		}

		public static bool operator !=(PartyId left, PartyId right)
		{
			return !(left == right);
		}
	}

	internal class NullPartyId : PartyId
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override bool? IsDPID { get { throw this.NullAccess("IsDPID"); } }
		public override bool? IsISNI { get { throw this.NullAccess("IsISNI"); } }
	}

	public partial class PartyName
	{
		public virtual Name FullName { get; set; }
		public virtual string FullNameAsciiTranscribed { get; set; }
		public virtual Name FullNameIndexed { get; set; }
		public virtual Name NamesBeforeKeyName { get; set; }
		public virtual Name KeyName { get; set; }
		public virtual Name NamesAfterKeyName { get; set; }
		public virtual Name AbbreviatedName { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public PartyName(XElement element)
		{
			FullName = element.Elements().Where(e => e.Name == "FullName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			FullNameAsciiTranscribed = element.Elements().Where(e => e.Name == "FullNameAsciiTranscribed").Select(e => e.Value).SingleOrDefault();
			FullNameIndexed = element.Elements().Where(e => e.Name == "FullNameIndexed").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			NamesBeforeKeyName = element.Elements().Where(e => e.Name == "NamesBeforeKeyName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			KeyName = element.Elements().Where(e => e.Name == "KeyName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			NamesAfterKeyName = element.Elements().Where(e => e.Name == "NamesAfterKeyName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			AbbreviatedName = element.Elements().Where(e => e.Name == "AbbreviatedName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public PartyName()
		{ }

		public static bool operator ==(PartyName left, PartyName right)
		{
			return Utils.ValidatedEquals<NullPartyName>(left, right);
		}

		public static bool operator !=(PartyName left, PartyName right)
		{
			return !(left == right);
		}
	}

	internal class NullPartyName : PartyName
	{
		public override Name FullName { get { throw this.NullAccess("FullName"); } }
		public override string FullNameAsciiTranscribed { get { throw this.NullAccess("FullNameAsciiTranscribed"); } }
		public override Name FullNameIndexed { get { throw this.NullAccess("FullNameIndexed"); } }
		public override Name NamesBeforeKeyName { get { throw this.NullAccess("NamesBeforeKeyName"); } }
		public override Name KeyName { get { throw this.NullAccess("KeyName"); } }
		public override Name NamesAfterKeyName { get { throw this.NullAccess("NamesAfterKeyName"); } }
		public override Name AbbreviatedName { get { throw this.NullAccess("AbbreviatedName"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class Period
	{
		public virtual EventDate StartDate { get; set; }
		public virtual EventDate EndDate { get; set; }
		public virtual EventDateTime StartDateTime { get; set; }
		public virtual EventDateTime EndDateTime { get; set; }

		public Period(XElement element)
		{
			StartDate = element.Elements().Where(e => e.Name == "StartDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			EndDate = element.Elements().Where(e => e.Name == "EndDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			StartDateTime = element.Elements().Where(e => e.Name == "StartDateTime").Select(e => new EventDateTime(e)).SingleOrDefault() ?? new NullEventDateTime();
			EndDateTime = element.Elements().Where(e => e.Name == "EndDateTime").Select(e => new EventDateTime(e)).SingleOrDefault() ?? new NullEventDateTime();
		}

		public Period()
		{ }

		public static bool operator ==(Period left, Period right)
		{
			return Utils.ValidatedEquals<NullPeriod>(left, right);
		}

		public static bool operator !=(Period left, Period right)
		{
			return !(left == right);
		}
	}

	internal class NullPeriod : Period
	{
		public override EventDate StartDate { get { throw this.NullAccess("StartDate"); } }
		public override EventDate EndDate { get { throw this.NullAccess("EndDate"); } }
		public override EventDateTime StartDateTime { get { throw this.NullAccess("StartDateTime"); } }
		public override EventDateTime EndDateTime { get { throw this.NullAccess("EndDateTime"); } }
	}

	public partial class Price
	{
		public virtual decimal? Value { get; set; }
		public virtual string CurrencyCode { get; set; }

		public Price(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			CurrencyCode = element.Attributes().Where(e => e.Name == "CurrencyCode").Select(e => e.Value).SingleOrDefault();
		}

		public Price()
		{ }

		public static bool operator ==(Price left, Price right)
		{
			return Utils.ValidatedEquals<NullPrice>(left, right);
		}

		public static bool operator !=(Price left, Price right)
		{
			return !(left == right);
		}
	}

	internal class NullPrice : Price
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string CurrencyCode { get { throw this.NullAccess("CurrencyCode"); } }
	}

	public partial class PriceConsumerPaidExcSalesTax
	{
		public virtual decimal? Value { get; set; }
		public virtual string CurrencyCode { get; set; }

		public PriceConsumerPaidExcSalesTax(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			CurrencyCode = element.Attributes().Where(e => e.Name == "CurrencyCode").Select(e => e.Value).SingleOrDefault();
		}

		public PriceConsumerPaidExcSalesTax()
		{ }

		public static bool operator ==(PriceConsumerPaidExcSalesTax left, PriceConsumerPaidExcSalesTax right)
		{
			return Utils.ValidatedEquals<NullPriceConsumerPaidExcSalesTax>(left, right);
		}

		public static bool operator !=(PriceConsumerPaidExcSalesTax left, PriceConsumerPaidExcSalesTax right)
		{
			return !(left == right);
		}
	}

	internal class NullPriceConsumerPaidExcSalesTax : PriceConsumerPaidExcSalesTax
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string CurrencyCode { get { throw this.NullAccess("CurrencyCode"); } }
	}

	public partial class PriceInformation
	{
		public virtual Description Description { get; set; }
		public virtual PriceRangeType PriceRangeType { get; set; }
		public virtual PriceType PriceType { get; set; }
		public virtual Price WholesalePricePerUnit { get; set; }
		public virtual Price BulkOrderWholesalePricePerUnit { get; set; }
		public virtual Price SuggestedRetailPrice { get; set; }

		public PriceInformation(XElement element)
		{
			Description = element.Elements().Where(e => e.Name == "Description").Select(e => new Description(e)).SingleOrDefault() ?? new NullDescription();
			PriceRangeType = element.Elements().Where(e => e.Name == "PriceRangeType").Select(e => new PriceRangeType(e)).SingleOrDefault() ?? new NullPriceRangeType();
			PriceType = element.Elements().Where(e => e.Name == "PriceType").Select(e => new PriceType(e)).SingleOrDefault() ?? new NullPriceType();
			WholesalePricePerUnit = element.Elements().Where(e => e.Name == "WholesalePricePerUnit").Select(e => new Price(e)).SingleOrDefault() ?? new NullPrice();
			BulkOrderWholesalePricePerUnit = element.Elements().Where(e => e.Name == "BulkOrderWholesalePricePerUnit").Select(e => new Price(e)).SingleOrDefault() ?? new NullPrice();
			SuggestedRetailPrice = element.Elements().Where(e => e.Name == "SuggestedRetailPrice").Select(e => new Price(e)).SingleOrDefault() ?? new NullPrice();
		}

		public PriceInformation()
		{ }

		public static bool operator ==(PriceInformation left, PriceInformation right)
		{
			return Utils.ValidatedEquals<NullPriceInformation>(left, right);
		}

		public static bool operator !=(PriceInformation left, PriceInformation right)
		{
			return !(left == right);
		}
	}

	internal class NullPriceInformation : PriceInformation
	{
		public override Description Description { get { throw this.NullAccess("Description"); } }
		public override PriceRangeType PriceRangeType { get { throw this.NullAccess("PriceRangeType"); } }
		public override PriceType PriceType { get { throw this.NullAccess("PriceType"); } }
		public override Price WholesalePricePerUnit { get { throw this.NullAccess("WholesalePricePerUnit"); } }
		public override Price BulkOrderWholesalePricePerUnit { get { throw this.NullAccess("BulkOrderWholesalePricePerUnit"); } }
		public override Price SuggestedRetailPrice { get { throw this.NullAccess("SuggestedRetailPrice"); } }
	}

	public partial class PriceRangeType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PriceRangeType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }

		public PriceRangeType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
		}

		public PriceRangeType()
		{ }

		public static bool operator ==(PriceRangeType left, PriceRangeType right)
		{
			return Utils.ValidatedEquals<NullPriceRangeType>(left, right);
		}

		public static bool operator !=(PriceRangeType left, PriceRangeType right)
		{
			return !(left == right);
		}
	}

	internal class NullPriceRangeType : PriceRangeType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
	}

	public partial class PriceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PriceType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }

		public PriceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
		}

		public PriceType()
		{ }

		public static bool operator ==(PriceType left, PriceType right)
		{
			return Utils.ValidatedEquals<NullPriceType>(left, right);
		}

		public static bool operator !=(PriceType left, PriceType right)
		{
			return !(left == right);
		}
	}

	internal class NullPriceType : PriceType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
	}

	public partial class ProductType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ProductType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ProductType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ProductType()
		{ }

		public static bool operator ==(ProductType left, ProductType right)
		{
			return Utils.ValidatedEquals<NullProductType>(left, right);
		}

		public static bool operator !=(ProductType left, ProductType right)
		{
			return !(left == right);
		}
	}

	internal class NullProductType : ProductType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class PromotionalCode
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PromotionalCode obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }

		public PromotionalCode(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
		}

		public PromotionalCode()
		{ }

		public static bool operator ==(PromotionalCode left, PromotionalCode right)
		{
			return Utils.ValidatedEquals<NullPromotionalCode>(left, right);
		}

		public static bool operator !=(PromotionalCode left, PromotionalCode right)
		{
			return !(left == right);
		}
	}

	internal class NullPromotionalCode : PromotionalCode
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
	}

	public partial class ProprietaryId
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ProprietaryId obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }

		public ProprietaryId(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
		}

		public ProprietaryId()
		{ }

		public static bool operator ==(ProprietaryId left, ProprietaryId right)
		{
			return Utils.ValidatedEquals<NullProprietaryId>(left, right);
		}

		public static bool operator !=(ProprietaryId left, ProprietaryId right)
		{
			return !(left == right);
		}
	}

	internal class NullProprietaryId : ProprietaryId
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
	}

	public partial class Purpose
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Purpose obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public Purpose(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public Purpose()
		{ }

		public static bool operator ==(Purpose left, Purpose right)
		{
			return Utils.ValidatedEquals<NullPurpose>(left, right);
		}

		public static bool operator !=(Purpose left, Purpose right)
		{
			return !(left == right);
		}
	}

	internal class NullPurpose : Purpose
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class RatingAgency
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RatingAgency obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public RatingAgency(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public RatingAgency()
		{ }

		public static bool operator ==(RatingAgency left, RatingAgency right)
		{
			return Utils.ValidatedEquals<NullRatingAgency>(left, right);
		}

		public static bool operator !=(RatingAgency left, RatingAgency right)
		{
			return !(left == right);
		}
	}

	internal class NullRatingAgency : RatingAgency
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class Reason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Reason obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Reason(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Reason()
		{ }

		public static bool operator ==(Reason left, Reason right)
		{
			return Utils.ValidatedEquals<NullReason>(left, right);
		}

		public static bool operator !=(Reason left, Reason right)
		{
			return !(left == right);
		}
	}

	internal class NullReason : Reason
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReasonType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReasonType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ReasonType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ReasonType()
		{ }

		public static bool operator ==(ReasonType left, ReasonType right)
		{
			return Utils.ValidatedEquals<NullReasonType>(left, right);
		}

		public static bool operator !=(ReasonType left, ReasonType right)
		{
			return !(left == right);
		}
	}

	internal class NullReasonType : ReasonType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class RecordCompanyMarketShareData
	{
		public virtual IList<ReleaseType> ReleaseTypes { get; set; }
		public virtual int? UnitsSoldTotal { get; set; }
		public virtual IList<UseType> UseTypes { get; set; }
		public virtual IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public virtual IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public virtual IList<CarrierType> CarrierTypes { get; set; }

		public RecordCompanyMarketShareData(XElement element)
		{
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			UnitsSoldTotal = element.Elements().Where(e => e.Name == "UnitsSoldTotal").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public RecordCompanyMarketShareData()
		{ }

		public static bool operator ==(RecordCompanyMarketShareData left, RecordCompanyMarketShareData right)
		{
			return Utils.ValidatedEquals<NullRecordCompanyMarketShareData>(left, right);
		}

		public static bool operator !=(RecordCompanyMarketShareData left, RecordCompanyMarketShareData right)
		{
			return !(left == right);
		}
	}

	internal class NullRecordCompanyMarketShareData : RecordCompanyMarketShareData
	{
		public override IList<ReleaseType> ReleaseTypes { get { throw this.NullAccess("ReleaseTypes"); } }
		public override int? UnitsSoldTotal { get { throw this.NullAccess("UnitsSoldTotal"); } }
		public override IList<UseType> UseTypes { get { throw this.NullAccess("UseTypes"); } }
		public override IList<UserInterfaceType> UserInterfaceTypes { get { throw this.NullAccess("UserInterfaceTypes"); } }
		public override IList<DistributionChannelType> DistributionChannelTypes { get { throw this.NullAccess("DistributionChannelTypes"); } }
		public override IList<CarrierType> CarrierTypes { get { throw this.NullAccess("CarrierTypes"); } }
	}

	public partial class RedeliveryReasonType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RedeliveryReasonType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public RedeliveryReasonType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public RedeliveryReasonType()
		{ }

		public static bool operator ==(RedeliveryReasonType left, RedeliveryReasonType right)
		{
			return Utils.ValidatedEquals<NullRedeliveryReasonType>(left, right);
		}

		public static bool operator !=(RedeliveryReasonType left, RedeliveryReasonType right)
		{
			return !(left == right);
		}
	}

	internal class NullRedeliveryReasonType : RedeliveryReasonType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ReferenceTitle
	{
		public virtual TitleText TitleText { get; set; }
		public virtual SubTitle SubTitle { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ReferenceTitle(XElement element)
		{
			TitleText = element.Elements().Where(e => e.Name == "TitleText").Select(e => new TitleText(e)).SingleOrDefault() ?? new NullTitleText();
			SubTitle = element.Elements().Where(e => e.Name == "SubTitle").Select(e => new SubTitle(e)).SingleOrDefault() ?? new NullSubTitle();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ReferenceTitle()
		{ }

		public static bool operator ==(ReferenceTitle left, ReferenceTitle right)
		{
			return Utils.ValidatedEquals<NullReferenceTitle>(left, right);
		}

		public static bool operator !=(ReferenceTitle left, ReferenceTitle right)
		{
			return !(left == right);
		}
	}

	internal class NullReferenceTitle : ReferenceTitle
	{
		public override TitleText TitleText { get { throw this.NullAccess("TitleText"); } }
		public override SubTitle SubTitle { get { throw this.NullAccess("SubTitle"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class RelatedLicenseOrClaimId
	{
		public virtual RightsAgreementId LicenseOrClaimId { get; set; }
		public virtual LicenseOrClaimUpdateReason LicenseOrClaimUpdateReason { get; set; }

		public RelatedLicenseOrClaimId(XElement element)
		{
			LicenseOrClaimId = element.Elements().Where(e => e.Name == "LicenseOrClaimId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LicenseOrClaimUpdateReason = element.Elements().Where(e => e.Name == "LicenseOrClaimUpdateReason").Select(e => new LicenseOrClaimUpdateReason(e)).SingleOrDefault() ?? new NullLicenseOrClaimUpdateReason();
		}

		public RelatedLicenseOrClaimId()
		{ }

		public static bool operator ==(RelatedLicenseOrClaimId left, RelatedLicenseOrClaimId right)
		{
			return Utils.ValidatedEquals<NullRelatedLicenseOrClaimId>(left, right);
		}

		public static bool operator !=(RelatedLicenseOrClaimId left, RelatedLicenseOrClaimId right)
		{
			return !(left == right);
		}
	}

	internal class NullRelatedLicenseOrClaimId : RelatedLicenseOrClaimId
	{
		public override RightsAgreementId LicenseOrClaimId { get { throw this.NullAccess("LicenseOrClaimId"); } }
		public override LicenseOrClaimUpdateReason LicenseOrClaimUpdateReason { get { throw this.NullAccess("LicenseOrClaimUpdateReason"); } }
	}

	public partial class RelatedLicenseOrClaimRequestId
	{
		public virtual ProprietaryId LicenseOrClaimRequestId { get; set; }
		public virtual LicenseOrClaimRequestUpdateReason LicenseOrClaimRequestUpdateReason { get; set; }

		public RelatedLicenseOrClaimRequestId(XElement element)
		{
			LicenseOrClaimRequestId = element.Elements().Where(e => e.Name == "LicenseOrClaimRequestId").Select(e => new ProprietaryId(e)).SingleOrDefault() ?? new NullProprietaryId();
			LicenseOrClaimRequestUpdateReason = element.Elements().Where(e => e.Name == "LicenseOrClaimRequestUpdateReason").Select(e => new LicenseOrClaimRequestUpdateReason(e)).SingleOrDefault() ?? new NullLicenseOrClaimRequestUpdateReason();
		}

		public RelatedLicenseOrClaimRequestId()
		{ }

		public static bool operator ==(RelatedLicenseOrClaimRequestId left, RelatedLicenseOrClaimRequestId right)
		{
			return Utils.ValidatedEquals<NullRelatedLicenseOrClaimRequestId>(left, right);
		}

		public static bool operator !=(RelatedLicenseOrClaimRequestId left, RelatedLicenseOrClaimRequestId right)
		{
			return !(left == right);
		}
	}

	internal class NullRelatedLicenseOrClaimRequestId : RelatedLicenseOrClaimRequestId
	{
		public override ProprietaryId LicenseOrClaimRequestId { get { throw this.NullAccess("LicenseOrClaimRequestId"); } }
		public override LicenseOrClaimRequestUpdateReason LicenseOrClaimRequestUpdateReason { get { throw this.NullAccess("LicenseOrClaimRequestUpdateReason"); } }
	}

	public partial class RelatedRelease
	{
		public virtual IList<ReleaseId> ReleaseIds { get; set; }
		public virtual ReferenceTitle ReferenceTitle { get; set; }
		public virtual IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritorys { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual ReleaseRelationshipType ReleaseRelationshipType { get; set; }
		public virtual EventDate ReleaseDate { get; set; }
		public virtual EventDate OriginalReleaseDate { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public RelatedRelease(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			ReleaseSummaryDetailsByTerritorys = element.Elements().Where(e => e.Name == "ReleaseSummaryDetailsByTerritory").Select(e => new ReleaseSummaryDetailsByTerritory(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			ReleaseRelationshipType = element.Elements().Where(e => e.Name == "ReleaseRelationshipType").Select(e => new ReleaseRelationshipType(e)).SingleOrDefault() ?? new NullReleaseRelationshipType();
			ReleaseDate = element.Elements().Where(e => e.Name == "ReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public RelatedRelease()
		{ }

		public static bool operator ==(RelatedRelease left, RelatedRelease right)
		{
			return Utils.ValidatedEquals<NullRelatedRelease>(left, right);
		}

		public static bool operator !=(RelatedRelease left, RelatedRelease right)
		{
			return !(left == right);
		}
	}

	internal class NullRelatedRelease : RelatedRelease
	{
		public override IList<ReleaseId> ReleaseIds { get { throw this.NullAccess("ReleaseIds"); } }
		public override ReferenceTitle ReferenceTitle { get { throw this.NullAccess("ReferenceTitle"); } }
		public override IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritorys { get { throw this.NullAccess("ReleaseSummaryDetailsByTerritorys"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override ReleaseRelationshipType ReleaseRelationshipType { get { throw this.NullAccess("ReleaseRelationshipType"); } }
		public override EventDate ReleaseDate { get { throw this.NullAccess("ReleaseDate"); } }
		public override EventDate OriginalReleaseDate { get { throw this.NullAccess("OriginalReleaseDate"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReleaseAvailabilityStatus
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseAvailabilityStatus obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ReleaseAvailabilityStatus(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseAvailabilityStatus()
		{ }

		public static bool operator ==(ReleaseAvailabilityStatus left, ReleaseAvailabilityStatus right)
		{
			return Utils.ValidatedEquals<NullReleaseAvailabilityStatus>(left, right);
		}

		public static bool operator !=(ReleaseAvailabilityStatus left, ReleaseAvailabilityStatus right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseAvailabilityStatus : ReleaseAvailabilityStatus
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ReleaseCollectionReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseCollectionReference obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string ReleaseResourceType { get; set; }

		public ReleaseCollectionReference(XElement element)
		{
			Value = element.Value;
			ReleaseResourceType = element.Attributes().Where(e => e.Name == "ReleaseResourceType").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseCollectionReference()
		{ }

		public static bool operator ==(ReleaseCollectionReference left, ReleaseCollectionReference right)
		{
			return Utils.ValidatedEquals<NullReleaseCollectionReference>(left, right);
		}

		public static bool operator !=(ReleaseCollectionReference left, ReleaseCollectionReference right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseCollectionReference : ReleaseCollectionReference
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string ReleaseResourceType { get { throw this.NullAccess("ReleaseResourceType"); } }
	}

	public partial class ReleaseCollectionReferenceList
	{
		public virtual int? NumberOfCollections { get; set; }
		public virtual IList<ReleaseCollectionReference> ReleaseCollectionReferences { get; set; }

		public ReleaseCollectionReferenceList(XElement element)
		{
			NumberOfCollections = element.Elements().Where(e => e.Name == "NumberOfCollections").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			ReleaseCollectionReferences = element.Elements().Where(e => e.Name == "ReleaseCollectionReference").Select(e => new ReleaseCollectionReference(e)).ToList();
		}

		public ReleaseCollectionReferenceList()
		{ }

		public static bool operator ==(ReleaseCollectionReferenceList left, ReleaseCollectionReferenceList right)
		{
			return Utils.ValidatedEquals<NullReleaseCollectionReferenceList>(left, right);
		}

		public static bool operator !=(ReleaseCollectionReferenceList left, ReleaseCollectionReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseCollectionReferenceList : ReleaseCollectionReferenceList
	{
		public override int? NumberOfCollections { get { throw this.NullAccess("NumberOfCollections"); } }
		public override IList<ReleaseCollectionReference> ReleaseCollectionReferences { get { throw this.NullAccess("ReleaseCollectionReferences"); } }
	}

	public partial class ReleaseDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Name> DisplayArtistNames { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual bool? IsMultiArtistCompilation { get; set; }
		public virtual IList<AdministratingRecordCompany> AdministratingRecordCompanys { get; set; }
		public virtual IList<ReleaseType> ReleaseTypes { get; set; }
		public virtual IList<RelatedRelease> RelatedReleases { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ReleaseDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DisplayArtistNames = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).ToList();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			IsMultiArtistCompilation = element.Elements().Where(e => e.Name == "IsMultiArtistCompilation").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			AdministratingRecordCompanys = element.Elements().Where(e => e.Name == "AdministratingRecordCompany").Select(e => new AdministratingRecordCompany(e)).ToList();
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			RelatedReleases = element.Elements().Where(e => e.Name == "RelatedRelease").Select(e => new RelatedRelease(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseDetailsByTerritory1()
		{ }

		public static bool operator ==(ReleaseDetailsByTerritory1 left, ReleaseDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullReleaseDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(ReleaseDetailsByTerritory1 left, ReleaseDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseDetailsByTerritory1 : ReleaseDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Name> DisplayArtistNames { get { throw this.NullAccess("DisplayArtistNames"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override bool? IsMultiArtistCompilation { get { throw this.NullAccess("IsMultiArtistCompilation"); } }
		public override IList<AdministratingRecordCompany> AdministratingRecordCompanys { get { throw this.NullAccess("AdministratingRecordCompanys"); } }
		public override IList<ReleaseType> ReleaseTypes { get { throw this.NullAccess("ReleaseTypes"); } }
		public override IList<RelatedRelease> RelatedReleases { get { throw this.NullAccess("RelatedReleases"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReleaseId
	{
		public virtual string GRid { get; set; }
		public virtual string ISRC { get; set; }
		public virtual ICPN ICPN { get; set; }
		public virtual CatalogNumber CatalogNumber { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public ReleaseId(XElement element)
		{
			GRid = element.Elements().Where(e => e.Name == "GRid").Select(e => e.Value).SingleOrDefault();
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ICPN = element.Elements().Where(e => e.Name == "ICPN").Select(e => new ICPN(e)).SingleOrDefault() ?? new NullICPN();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault() ?? new NullCatalogNumber();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public ReleaseId()
		{ }

		public static bool operator ==(ReleaseId left, ReleaseId right)
		{
			return Utils.ValidatedEquals<NullReleaseId>(left, right);
		}

		public static bool operator !=(ReleaseId left, ReleaseId right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseId : ReleaseId
	{
		public override string GRid { get { throw this.NullAccess("GRid"); } }
		public override string ISRC { get { throw this.NullAccess("ISRC"); } }
		public override ICPN ICPN { get { throw this.NullAccess("ICPN"); } }
		public override CatalogNumber CatalogNumber { get { throw this.NullAccess("CatalogNumber"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class ReleaseRelationshipType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseRelationshipType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ReleaseRelationshipType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseRelationshipType()
		{ }

		public static bool operator ==(ReleaseRelationshipType left, ReleaseRelationshipType right)
		{
			return Utils.ValidatedEquals<NullReleaseRelationshipType>(left, right);
		}

		public static bool operator !=(ReleaseRelationshipType left, ReleaseRelationshipType right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseRelationshipType : ReleaseRelationshipType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ReleaseResourceReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseResourceReference obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string ReleaseResourceType { get; set; }

		public ReleaseResourceReference(XElement element)
		{
			Value = element.Value;
			ReleaseResourceType = element.Attributes().Where(e => e.Name == "ReleaseResourceType").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseResourceReference()
		{ }

		public static bool operator ==(ReleaseResourceReference left, ReleaseResourceReference right)
		{
			return Utils.ValidatedEquals<NullReleaseResourceReference>(left, right);
		}

		public static bool operator !=(ReleaseResourceReference left, ReleaseResourceReference right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseResourceReference : ReleaseResourceReference
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string ReleaseResourceType { get { throw this.NullAccess("ReleaseResourceType"); } }
	}

	public partial class ReleaseResourceReferenceList
	{
		public virtual IList<ReleaseResourceReference> ReleaseResourceReferences { get; set; }

		public ReleaseResourceReferenceList(XElement element)
		{
			ReleaseResourceReferences = element.Elements().Where(e => e.Name == "ReleaseResourceReference").Select(e => new ReleaseResourceReference(e)).ToList();
		}

		public ReleaseResourceReferenceList()
		{ }

		public static bool operator ==(ReleaseResourceReferenceList left, ReleaseResourceReferenceList right)
		{
			return Utils.ValidatedEquals<NullReleaseResourceReferenceList>(left, right);
		}

		public static bool operator !=(ReleaseResourceReferenceList left, ReleaseResourceReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseResourceReferenceList : ReleaseResourceReferenceList
	{
		public override IList<ReleaseResourceReference> ReleaseResourceReferences { get { throw this.NullAccess("ReleaseResourceReferences"); } }
	}

	public partial class ReleaseSummary
	{
		public virtual IList<ReleaseId> ReleaseIds { get; set; }
		public virtual ReferenceTitle ReferenceTitle { get; set; }
		public virtual IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritorys { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ReleaseSummary(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault() ?? new NullReferenceTitle();
			ReleaseSummaryDetailsByTerritorys = element.Elements().Where(e => e.Name == "ReleaseSummaryDetailsByTerritory").Select(e => new ReleaseSummaryDetailsByTerritory(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseSummary()
		{ }

		public static bool operator ==(ReleaseSummary left, ReleaseSummary right)
		{
			return Utils.ValidatedEquals<NullReleaseSummary>(left, right);
		}

		public static bool operator !=(ReleaseSummary left, ReleaseSummary right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseSummary : ReleaseSummary
	{
		public override IList<ReleaseId> ReleaseIds { get { throw this.NullAccess("ReleaseIds"); } }
		public override ReferenceTitle ReferenceTitle { get { throw this.NullAccess("ReferenceTitle"); } }
		public override IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritorys { get { throw this.NullAccess("ReleaseSummaryDetailsByTerritorys"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReleaseSummaryDetailsByTerritory
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Name> DisplayArtistNames { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public ReleaseSummaryDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DisplayArtistNames = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).ToList();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseSummaryDetailsByTerritory()
		{ }

		public static bool operator ==(ReleaseSummaryDetailsByTerritory left, ReleaseSummaryDetailsByTerritory right)
		{
			return Utils.ValidatedEquals<NullReleaseSummaryDetailsByTerritory>(left, right);
		}

		public static bool operator !=(ReleaseSummaryDetailsByTerritory left, ReleaseSummaryDetailsByTerritory right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseSummaryDetailsByTerritory : ReleaseSummaryDetailsByTerritory
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Name> DisplayArtistNames { get { throw this.NullAccess("DisplayArtistNames"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReleaseType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ReleaseType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ReleaseType()
		{ }

		public static bool operator ==(ReleaseType left, ReleaseType right)
		{
			return Utils.ValidatedEquals<NullReleaseType>(left, right);
		}

		public static bool operator !=(ReleaseType left, ReleaseType right)
		{
			return !(left == right);
		}
	}

	internal class NullReleaseType : ReleaseType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class RemittanceAdvice
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RemittanceAdvice obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public RemittanceAdvice(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public RemittanceAdvice()
		{ }

		public static bool operator ==(RemittanceAdvice left, RemittanceAdvice right)
		{
			return Utils.ValidatedEquals<NullRemittanceAdvice>(left, right);
		}

		public static bool operator !=(RemittanceAdvice left, RemittanceAdvice right)
		{
			return !(left == right);
		}
	}

	internal class NullRemittanceAdvice : RemittanceAdvice
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class ReportFormat
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReportFormat obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ReportFormat(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ReportFormat()
		{ }

		public static bool operator ==(ReportFormat left, ReportFormat right)
		{
			return Utils.ValidatedEquals<NullReportFormat>(left, right);
		}

		public static bool operator !=(ReportFormat left, ReportFormat right)
		{
			return !(left == right);
		}
	}

	internal class NullReportFormat : ReportFormat
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ReportType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReportType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ReportType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ReportType()
		{ }

		public static bool operator ==(ReportType left, ReportType right)
		{
			return Utils.ValidatedEquals<NullReportType>(left, right);
		}

		public static bool operator !=(ReportType left, ReportType right)
		{
			return !(left == right);
		}
	}

	internal class NullReportType : ReportType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ResourceContainedResourceReference
	{
		public virtual string ResourceContainedResourceReferenceProp { get; set; }
		public virtual string DurationUsed { get; set; }
		public virtual decimal? StartPoint { get; set; }
		public virtual Purpose Purpose { get; set; }

		public ResourceContainedResourceReference(XElement element)
		{
			ResourceContainedResourceReferenceProp = element.Elements().Where(e => e.Name == "ResourceContainedResourceReference").Select(e => e.Value).SingleOrDefault();
			DurationUsed = element.Elements().Where(e => e.Name == "DurationUsed").Select(e => e.Value).SingleOrDefault();
			StartPoint = element.Elements().Where(e => e.Name == "StartPoint").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			Purpose = element.Elements().Where(e => e.Name == "Purpose").Select(e => new Purpose(e)).SingleOrDefault() ?? new NullPurpose();
		}

		public ResourceContainedResourceReference()
		{ }

		public static bool operator ==(ResourceContainedResourceReference left, ResourceContainedResourceReference right)
		{
			return Utils.ValidatedEquals<NullResourceContainedResourceReference>(left, right);
		}

		public static bool operator !=(ResourceContainedResourceReference left, ResourceContainedResourceReference right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceContainedResourceReference : ResourceContainedResourceReference
	{
		public override string ResourceContainedResourceReferenceProp { get { throw this.NullAccess("ResourceContainedResourceReferenceProp"); } }
		public override string DurationUsed { get { throw this.NullAccess("DurationUsed"); } }
		public override decimal? StartPoint { get { throw this.NullAccess("StartPoint"); } }
		public override Purpose Purpose { get { throw this.NullAccess("Purpose"); } }
	}

	public partial class ResourceContainedResourceReferenceList
	{
		public virtual IList<ResourceContainedResourceReference> ResourceContainedResourceReferences { get; set; }

		public ResourceContainedResourceReferenceList(XElement element)
		{
			ResourceContainedResourceReferences = element.Elements().Where(e => e.Name == "ResourceContainedResourceReference").Select(e => new ResourceContainedResourceReference(e)).ToList();
		}

		public ResourceContainedResourceReferenceList()
		{ }

		public static bool operator ==(ResourceContainedResourceReferenceList left, ResourceContainedResourceReferenceList right)
		{
			return Utils.ValidatedEquals<NullResourceContainedResourceReferenceList>(left, right);
		}

		public static bool operator !=(ResourceContainedResourceReferenceList left, ResourceContainedResourceReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceContainedResourceReferenceList : ResourceContainedResourceReferenceList
	{
		public override IList<ResourceContainedResourceReference> ResourceContainedResourceReferences { get { throw this.NullAccess("ResourceContainedResourceReferences"); } }
	}

	public partial class ResourceContributor
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual IList<ResourceContributorRole> ResourceContributorRoles { get; set; }
		public virtual int? SequenceNumber { get; set; }

		public ResourceContributor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			ResourceContributorRoles = element.Elements().Where(e => e.Name == "ResourceContributorRole").Select(e => new ResourceContributorRole(e)).ToList();
			SequenceNumber = element.Attributes().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public ResourceContributor()
		{ }

		public static bool operator ==(ResourceContributor left, ResourceContributor right)
		{
			return Utils.ValidatedEquals<NullResourceContributor>(left, right);
		}

		public static bool operator !=(ResourceContributor left, ResourceContributor right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceContributor : ResourceContributor
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override IList<ResourceContributorRole> ResourceContributorRoles { get { throw this.NullAccess("ResourceContributorRoles"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
	}

	public partial class ResourceContributorRole
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ResourceContributorRole obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ResourceContributorRole(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceContributorRole()
		{ }

		public static bool operator ==(ResourceContributorRole left, ResourceContributorRole right)
		{
			return Utils.ValidatedEquals<NullResourceContributorRole>(left, right);
		}

		public static bool operator !=(ResourceContributorRole left, ResourceContributorRole right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceContributorRole : ResourceContributorRole
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ResourceGroupResourceReferenceList
	{
		public virtual IList<string> ResourceGroupResourceReferences { get; set; }

		public ResourceGroupResourceReferenceList(XElement element)
		{
			ResourceGroupResourceReferences = element.Elements().Where(e => e.Name == "ResourceGroupResourceReference").Select(e => e.Value).ToList();
		}

		public ResourceGroupResourceReferenceList()
		{ }

		public static bool operator ==(ResourceGroupResourceReferenceList left, ResourceGroupResourceReferenceList right)
		{
			return Utils.ValidatedEquals<NullResourceGroupResourceReferenceList>(left, right);
		}

		public static bool operator !=(ResourceGroupResourceReferenceList left, ResourceGroupResourceReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceGroupResourceReferenceList : ResourceGroupResourceReferenceList
	{
		public override IList<string> ResourceGroupResourceReferences { get { throw this.NullAccess("ResourceGroupResourceReferences"); } }
	}

	public partial class ResourceId
	{
		public virtual string ISRC { get; set; }
		public virtual string ISMN { get; set; }
		public virtual string ISAN { get; set; }
		public virtual string VISAN { get; set; }
		public virtual string ISBN { get; set; }
		public virtual string ISSN { get; set; }
		public virtual string SICI { get; set; }
		public virtual CatalogNumber CatalogNumber { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public ResourceId(XElement element)
		{
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISMN = element.Elements().Where(e => e.Name == "ISMN").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			ISBN = element.Elements().Where(e => e.Name == "ISBN").Select(e => e.Value).SingleOrDefault();
			ISSN = element.Elements().Where(e => e.Name == "ISSN").Select(e => e.Value).SingleOrDefault();
			SICI = element.Elements().Where(e => e.Name == "SICI").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault() ?? new NullCatalogNumber();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public ResourceId()
		{ }

		public static bool operator ==(ResourceId left, ResourceId right)
		{
			return Utils.ValidatedEquals<NullResourceId>(left, right);
		}

		public static bool operator !=(ResourceId left, ResourceId right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceId : ResourceId
	{
		public override string ISRC { get { throw this.NullAccess("ISRC"); } }
		public override string ISMN { get { throw this.NullAccess("ISMN"); } }
		public override string ISAN { get { throw this.NullAccess("ISAN"); } }
		public override string VISAN { get { throw this.NullAccess("VISAN"); } }
		public override string ISBN { get { throw this.NullAccess("ISBN"); } }
		public override string ISSN { get { throw this.NullAccess("ISSN"); } }
		public override string SICI { get { throw this.NullAccess("SICI"); } }
		public override CatalogNumber CatalogNumber { get { throw this.NullAccess("CatalogNumber"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class ResourceMusicalWorkReference
	{
		public virtual int? SequenceNumber { get; set; }
		public virtual string DurationUsed { get; set; }
		public virtual bool? IsFragment { get; set; }
		public virtual string ResourceMusicalWorkReferenceProp { get; set; }

		public ResourceMusicalWorkReference(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			DurationUsed = element.Elements().Where(e => e.Name == "DurationUsed").Select(e => e.Value).SingleOrDefault();
			IsFragment = element.Elements().Where(e => e.Name == "IsFragment").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			ResourceMusicalWorkReferenceProp = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReference").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceMusicalWorkReference()
		{ }

		public static bool operator ==(ResourceMusicalWorkReference left, ResourceMusicalWorkReference right)
		{
			return Utils.ValidatedEquals<NullResourceMusicalWorkReference>(left, right);
		}

		public static bool operator !=(ResourceMusicalWorkReference left, ResourceMusicalWorkReference right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceMusicalWorkReference : ResourceMusicalWorkReference
	{
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override string DurationUsed { get { throw this.NullAccess("DurationUsed"); } }
		public override bool? IsFragment { get { throw this.NullAccess("IsFragment"); } }
		public override string ResourceMusicalWorkReferenceProp { get { throw this.NullAccess("ResourceMusicalWorkReferenceProp"); } }
	}

	public partial class ResourceMusicalWorkReferenceList
	{
		public virtual IList<ResourceMusicalWorkReference> ResourceMusicalWorkReferences { get; set; }

		public ResourceMusicalWorkReferenceList(XElement element)
		{
			ResourceMusicalWorkReferences = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReference").Select(e => new ResourceMusicalWorkReference(e)).ToList();
		}

		public ResourceMusicalWorkReferenceList()
		{ }

		public static bool operator ==(ResourceMusicalWorkReferenceList left, ResourceMusicalWorkReferenceList right)
		{
			return Utils.ValidatedEquals<NullResourceMusicalWorkReferenceList>(left, right);
		}

		public static bool operator !=(ResourceMusicalWorkReferenceList left, ResourceMusicalWorkReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceMusicalWorkReferenceList : ResourceMusicalWorkReferenceList
	{
		public override IList<ResourceMusicalWorkReference> ResourceMusicalWorkReferences { get { throw this.NullAccess("ResourceMusicalWorkReferences"); } }
	}

	public partial class ResourceOmissionReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ResourceOmissionReason obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ResourceOmissionReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceOmissionReason()
		{ }

		public static bool operator ==(ResourceOmissionReason left, ResourceOmissionReason right)
		{
			return Utils.ValidatedEquals<NullResourceOmissionReason>(left, right);
		}

		public static bool operator !=(ResourceOmissionReason left, ResourceOmissionReason right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceOmissionReason : ResourceOmissionReason
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class ResourceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ResourceType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public ResourceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceType()
		{ }

		public static bool operator ==(ResourceType left, ResourceType right)
		{
			return Utils.ValidatedEquals<NullResourceType>(left, right);
		}

		public static bool operator !=(ResourceType left, ResourceType right)
		{
			return !(left == right);
		}
	}

	internal class NullResourceType : ResourceType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class RightShare
	{
		public virtual RightsAgreementId RightShareId { get; set; }
		public virtual string RightShareReference { get; set; }
		public virtual RightShareCreationReferenceList RightShareCreationReferenceList { get; set; }
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<RightsType> RightsTypes { get; set; }
		public virtual IList<UseType> UseTypes { get; set; }
		public virtual IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public virtual IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public virtual IList<CarrierType> CarrierTypes { get; set; }
		public virtual IList<CommercialModelType> CommercialModelTypes { get; set; }
		public virtual IList<string> MusicalWorkRightsClaimTypes { get; set; }
		public virtual IList<RightsController> RightsControllers { get; set; }
		public virtual Period ValidityPeriod { get; set; }
		public virtual bool? PercentageUnknown { get; set; }
		public virtual string PercentageRate { get; set; }
		public virtual TariffReference TariffReference { get; set; }
		public virtual string LicenseStatus { get; set; }
		public virtual bool? HasFirstLicenseRefusal { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public RightShare(XElement element)
		{
			RightShareId = element.Elements().Where(e => e.Name == "RightShareId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			RightShareReference = element.Elements().Where(e => e.Name == "RightShareReference").Select(e => e.Value).SingleOrDefault();
			RightShareCreationReferenceList = element.Elements().Where(e => e.Name == "RightShareCreationReferenceList").Select(e => new RightShareCreationReferenceList(e)).SingleOrDefault() ?? new NullRightShareCreationReferenceList();
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			RightsTypes = element.Elements().Where(e => e.Name == "RightsType").Select(e => new RightsType(e)).ToList();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
			CommercialModelTypes = element.Elements().Where(e => e.Name == "CommercialModelType").Select(e => new CommercialModelType(e)).ToList();
			MusicalWorkRightsClaimTypes = element.Elements().Where(e => e.Name == "MusicalWorkRightsClaimType").Select(e => e.Value).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			ValidityPeriod = element.Elements().Where(e => e.Name == "ValidityPeriod").Select(e => new Period(e)).SingleOrDefault() ?? new NullPeriod();
			PercentageUnknown = element.Elements().Where(e => e.Name == "PercentageUnknown").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			PercentageRate = element.Elements().Where(e => e.Name == "PercentageRate").Select(e => e.Value).SingleOrDefault();
			TariffReference = element.Elements().Where(e => e.Name == "TariffReference").Select(e => new TariffReference(e)).SingleOrDefault() ?? new NullTariffReference();
			LicenseStatus = element.Elements().Where(e => e.Name == "LicenseStatus").Select(e => e.Value).SingleOrDefault();
			HasFirstLicenseRefusal = element.Elements().Where(e => e.Name == "HasFirstLicenseRefusal").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public RightShare()
		{ }

		public static bool operator ==(RightShare left, RightShare right)
		{
			return Utils.ValidatedEquals<NullRightShare>(left, right);
		}

		public static bool operator !=(RightShare left, RightShare right)
		{
			return !(left == right);
		}
	}

	internal class NullRightShare : RightShare
	{
		public override RightsAgreementId RightShareId { get { throw this.NullAccess("RightShareId"); } }
		public override string RightShareReference { get { throw this.NullAccess("RightShareReference"); } }
		public override RightShareCreationReferenceList RightShareCreationReferenceList { get { throw this.NullAccess("RightShareCreationReferenceList"); } }
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<RightsType> RightsTypes { get { throw this.NullAccess("RightsTypes"); } }
		public override IList<UseType> UseTypes { get { throw this.NullAccess("UseTypes"); } }
		public override IList<UserInterfaceType> UserInterfaceTypes { get { throw this.NullAccess("UserInterfaceTypes"); } }
		public override IList<DistributionChannelType> DistributionChannelTypes { get { throw this.NullAccess("DistributionChannelTypes"); } }
		public override IList<CarrierType> CarrierTypes { get { throw this.NullAccess("CarrierTypes"); } }
		public override IList<CommercialModelType> CommercialModelTypes { get { throw this.NullAccess("CommercialModelTypes"); } }
		public override IList<string> MusicalWorkRightsClaimTypes { get { throw this.NullAccess("MusicalWorkRightsClaimTypes"); } }
		public override IList<RightsController> RightsControllers { get { throw this.NullAccess("RightsControllers"); } }
		public override Period ValidityPeriod { get { throw this.NullAccess("ValidityPeriod"); } }
		public override bool? PercentageUnknown { get { throw this.NullAccess("PercentageUnknown"); } }
		public override string PercentageRate { get { throw this.NullAccess("PercentageRate"); } }
		public override TariffReference TariffReference { get { throw this.NullAccess("TariffReference"); } }
		public override string LicenseStatus { get { throw this.NullAccess("LicenseStatus"); } }
		public override bool? HasFirstLicenseRefusal { get { throw this.NullAccess("HasFirstLicenseRefusal"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class RightShareCreationReferenceList
	{
		public virtual IList<string> RightShareWorkReferences { get; set; }
		public virtual IList<string> RightShareResourceReferences { get; set; }
		public virtual IList<string> RightShareReleaseReferences { get; set; }

		public RightShareCreationReferenceList(XElement element)
		{
			RightShareWorkReferences = element.Elements().Where(e => e.Name == "RightShareWorkReference").Select(e => e.Value).ToList();
			RightShareResourceReferences = element.Elements().Where(e => e.Name == "RightShareResourceReference").Select(e => e.Value).ToList();
			RightShareReleaseReferences = element.Elements().Where(e => e.Name == "RightShareReleaseReference").Select(e => e.Value).ToList();
		}

		public RightShareCreationReferenceList()
		{ }

		public static bool operator ==(RightShareCreationReferenceList left, RightShareCreationReferenceList right)
		{
			return Utils.ValidatedEquals<NullRightShareCreationReferenceList>(left, right);
		}

		public static bool operator !=(RightShareCreationReferenceList left, RightShareCreationReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullRightShareCreationReferenceList : RightShareCreationReferenceList
	{
		public override IList<string> RightShareWorkReferences { get { throw this.NullAccess("RightShareWorkReferences"); } }
		public override IList<string> RightShareResourceReferences { get { throw this.NullAccess("RightShareResourceReferences"); } }
		public override IList<string> RightShareReleaseReferences { get { throw this.NullAccess("RightShareReleaseReferences"); } }
	}

	public partial class RightsAgreementId
	{
		public virtual IList<string> MWLIs { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }

		public RightsAgreementId(XElement element)
		{
			MWLIs = element.Elements().Where(e => e.Name == "MWLI").Select(e => e.Value).ToList();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
		}

		public RightsAgreementId()
		{ }

		public static bool operator ==(RightsAgreementId left, RightsAgreementId right)
		{
			return Utils.ValidatedEquals<NullRightsAgreementId>(left, right);
		}

		public static bool operator !=(RightsAgreementId left, RightsAgreementId right)
		{
			return !(left == right);
		}
	}

	internal class NullRightsAgreementId : RightsAgreementId
	{
		public override IList<string> MWLIs { get { throw this.NullAccess("MWLIs"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
	}

	public partial class RightsController
	{
		public virtual PartyId PartyId { get; set; }
		public virtual IList<PartyName> PartyNames { get; set; }
		public virtual IList<string> RightsControllerRoles { get; set; }
		public virtual bool? RightShareUnknown { get; set; }
		public virtual string RightSharePercentage { get; set; }
		public virtual int? SequenceNumber { get; set; }

		public RightsController(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault() ?? new NullPartyId();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			RightsControllerRoles = element.Elements().Where(e => e.Name == "RightsControllerRole").Select(e => e.Value).ToList();
			RightShareUnknown = element.Elements().Where(e => e.Name == "RightShareUnknown").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
			RightSharePercentage = element.Elements().Where(e => e.Name == "RightSharePercentage").Select(e => e.Value).SingleOrDefault();
			SequenceNumber = element.Attributes().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public RightsController()
		{ }

		public static bool operator ==(RightsController left, RightsController right)
		{
			return Utils.ValidatedEquals<NullRightsController>(left, right);
		}

		public static bool operator !=(RightsController left, RightsController right)
		{
			return !(left == right);
		}
	}

	internal class NullRightsController : RightsController
	{
		public override PartyId PartyId { get { throw this.NullAccess("PartyId"); } }
		public override IList<PartyName> PartyNames { get { throw this.NullAccess("PartyNames"); } }
		public override IList<string> RightsControllerRoles { get { throw this.NullAccess("RightsControllerRoles"); } }
		public override bool? RightShareUnknown { get { throw this.NullAccess("RightShareUnknown"); } }
		public override string RightSharePercentage { get { throw this.NullAccess("RightSharePercentage"); } }
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
	}

	public partial class RightsType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RightsType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string TerritoryCode { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public RightsType(XElement element)
		{
			Value = element.Value;
			TerritoryCode = element.Attributes().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public RightsType()
		{ }

		public static bool operator ==(RightsType left, RightsType right)
		{
			return Utils.ValidatedEquals<NullRightsType>(left, right);
		}

		public static bool operator !=(RightsType left, RightsType right)
		{
			return !(left == right);
		}
	}

	internal class NullRightsType : RightsType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string TerritoryCode { get { throw this.NullAccess("TerritoryCode"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class RoyaltyAmount
	{
		public virtual decimal? Value { get; set; }
		public virtual string CurrencyCode { get; set; }

		public RoyaltyAmount(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			CurrencyCode = element.Attributes().Where(e => e.Name == "CurrencyCode").Select(e => e.Value).SingleOrDefault();
		}

		public RoyaltyAmount()
		{ }

		public static bool operator ==(RoyaltyAmount left, RoyaltyAmount right)
		{
			return Utils.ValidatedEquals<NullRoyaltyAmount>(left, right);
		}

		public static bool operator !=(RoyaltyAmount left, RoyaltyAmount right)
		{
			return !(left == right);
		}
	}

	internal class NullRoyaltyAmount : RoyaltyAmount
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string CurrencyCode { get { throw this.NullAccess("CurrencyCode"); } }
	}

	public partial class RoyaltyCode
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RoyaltyCode obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }

		public RoyaltyCode(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
		}

		public RoyaltyCode()
		{ }

		public static bool operator ==(RoyaltyCode left, RoyaltyCode right)
		{
			return Utils.ValidatedEquals<NullRoyaltyCode>(left, right);
		}

		public static bool operator !=(RoyaltyCode left, RoyaltyCode right)
		{
			return !(left == right);
		}
	}

	internal class NullRoyaltyCode : RoyaltyCode
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
	}

	public partial class SalesReportingProxyReleaseId
	{
		public virtual ReleaseId ReleaseId { get; set; }
		public virtual Reason Reason { get; set; }
		public virtual ReasonType ReasonType { get; set; }

		public SalesReportingProxyReleaseId(XElement element)
		{
			ReleaseId = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).SingleOrDefault() ?? new NullReleaseId();
			Reason = element.Elements().Where(e => e.Name == "Reason").Select(e => new Reason(e)).SingleOrDefault() ?? new NullReason();
			ReasonType = element.Elements().Where(e => e.Name == "ReasonType").Select(e => new ReasonType(e)).SingleOrDefault() ?? new NullReasonType();
		}

		public SalesReportingProxyReleaseId()
		{ }

		public static bool operator ==(SalesReportingProxyReleaseId left, SalesReportingProxyReleaseId right)
		{
			return Utils.ValidatedEquals<NullSalesReportingProxyReleaseId>(left, right);
		}

		public static bool operator !=(SalesReportingProxyReleaseId left, SalesReportingProxyReleaseId right)
		{
			return !(left == right);
		}
	}

	internal class NullSalesReportingProxyReleaseId : SalesReportingProxyReleaseId
	{
		public override ReleaseId ReleaseId { get { throw this.NullAccess("ReleaseId"); } }
		public override Reason Reason { get { throw this.NullAccess("Reason"); } }
		public override ReasonType ReasonType { get { throw this.NullAccess("ReasonType"); } }
	}

	public partial class SamplingRate
	{
		public virtual decimal? Value { get; set; }
		public virtual string UnitOfMeasure { get; set; }

		public SamplingRate(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			UnitOfMeasure = element.Attributes().Where(e => e.Name == "UnitOfMeasure").Select(e => e.Value).SingleOrDefault();
		}

		public SamplingRate()
		{ }

		public static bool operator ==(SamplingRate left, SamplingRate right)
		{
			return Utils.ValidatedEquals<NullSamplingRate>(left, right);
		}

		public static bool operator !=(SamplingRate left, SamplingRate right)
		{
			return !(left == right);
		}
	}

	internal class NullSamplingRate : SamplingRate
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string UnitOfMeasure { get { throw this.NullAccess("UnitOfMeasure"); } }
	}

	public partial class SheetMusicCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SheetMusicCodecType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public SheetMusicCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public SheetMusicCodecType()
		{ }

		public static bool operator ==(SheetMusicCodecType left, SheetMusicCodecType right)
		{
			return Utils.ValidatedEquals<NullSheetMusicCodecType>(left, right);
		}

		public static bool operator !=(SheetMusicCodecType left, SheetMusicCodecType right)
		{
			return !(left == right);
		}
	}

	internal class NullSheetMusicCodecType : SheetMusicCodecType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class SheetMusicDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SheetMusicDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SheetMusicDetailsByTerritory1()
		{ }

		public static bool operator ==(SheetMusicDetailsByTerritory1 left, SheetMusicDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullSheetMusicDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(SheetMusicDetailsByTerritory1 left, SheetMusicDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullSheetMusicDetailsByTerritory1 : SheetMusicDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SheetMusicId
	{
		public virtual string ISMN { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public SheetMusicId(XElement element)
		{
			ISMN = element.Elements().Where(e => e.Name == "ISMN").Select(e => e.Value).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public SheetMusicId()
		{ }

		public static bool operator ==(SheetMusicId left, SheetMusicId right)
		{
			return Utils.ValidatedEquals<NullSheetMusicId>(left, right);
		}

		public static bool operator !=(SheetMusicId left, SheetMusicId right)
		{
			return !(left == right);
		}
	}

	internal class NullSheetMusicId : SheetMusicId
	{
		public override string ISMN { get { throw this.NullAccess("ISMN"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class SheetMusicType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SheetMusicType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public SheetMusicType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public SheetMusicType()
		{ }

		public static bool operator ==(SheetMusicType left, SheetMusicType right)
		{
			return Utils.ValidatedEquals<NullSheetMusicType>(left, right);
		}

		public static bool operator !=(SheetMusicType left, SheetMusicType right)
		{
			return !(left == right);
		}
	}

	internal class NullSheetMusicType : SheetMusicType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class SocietyAffiliation
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual PartyDescriptor MusicRightsSociety { get; set; }

		public SocietyAffiliation(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			MusicRightsSociety = element.Elements().Where(e => e.Name == "MusicRightsSociety").Select(e => new PartyDescriptor(e)).SingleOrDefault() ?? new NullPartyDescriptor();
		}

		public SocietyAffiliation()
		{ }

		public static bool operator ==(SocietyAffiliation left, SocietyAffiliation right)
		{
			return Utils.ValidatedEquals<NullSocietyAffiliation>(left, right);
		}

		public static bool operator !=(SocietyAffiliation left, SocietyAffiliation right)
		{
			return !(left == right);
		}
	}

	internal class NullSocietyAffiliation : SocietyAffiliation
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override PartyDescriptor MusicRightsSociety { get { throw this.NullAccess("MusicRightsSociety"); } }
	}

	public partial class SoftwareDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SoftwareDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SoftwareDetailsByTerritory1()
		{ }

		public static bool operator ==(SoftwareDetailsByTerritory1 left, SoftwareDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullSoftwareDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(SoftwareDetailsByTerritory1 left, SoftwareDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullSoftwareDetailsByTerritory1 : SoftwareDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SoftwareId
	{
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public SoftwareId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public SoftwareId()
		{ }

		public static bool operator ==(SoftwareId left, SoftwareId right)
		{
			return Utils.ValidatedEquals<NullSoftwareId>(left, right);
		}

		public static bool operator !=(SoftwareId left, SoftwareId right)
		{
			return !(left == right);
		}
	}

	internal class NullSoftwareId : SoftwareId
	{
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class SoftwareType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SoftwareType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public SoftwareType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public SoftwareType()
		{ }

		public static bool operator ==(SoftwareType left, SoftwareType right)
		{
			return Utils.ValidatedEquals<NullSoftwareType>(left, right);
		}

		public static bool operator !=(SoftwareType left, SoftwareType right)
		{
			return !(left == right);
		}
	}

	internal class NullSoftwareType : SoftwareType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class SoundProcessorType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SoundProcessorType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public SoundProcessorType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public SoundProcessorType()
		{ }

		public static bool operator ==(SoundProcessorType left, SoundProcessorType right)
		{
			return Utils.ValidatedEquals<NullSoundProcessorType>(left, right);
		}

		public static bool operator !=(SoundProcessorType left, SoundProcessorType right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundProcessorType : SoundProcessorType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class SoundRecordingCollectionReference
	{
		public virtual int? SequenceNumber { get; set; }
		public virtual string SoundRecordingCollectionReferenceProp { get; set; }
		public virtual string StartTime { get; set; }
		public virtual string Duration { get; set; }
		public virtual string EndTime { get; set; }
		public virtual string ReleaseResourceType { get; set; }

		public SoundRecordingCollectionReference(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			SoundRecordingCollectionReferenceProp = element.Elements().Where(e => e.Name == "SoundRecordingCollectionReference").Select(e => e.Value).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
			ReleaseResourceType = element.Elements().Where(e => e.Name == "ReleaseResourceType").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecordingCollectionReference()
		{ }

		public static bool operator ==(SoundRecordingCollectionReference left, SoundRecordingCollectionReference right)
		{
			return Utils.ValidatedEquals<NullSoundRecordingCollectionReference>(left, right);
		}

		public static bool operator !=(SoundRecordingCollectionReference left, SoundRecordingCollectionReference right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecordingCollectionReference : SoundRecordingCollectionReference
	{
		public override int? SequenceNumber { get { throw this.NullAccess("SequenceNumber"); } }
		public override string SoundRecordingCollectionReferenceProp { get { throw this.NullAccess("SoundRecordingCollectionReferenceProp"); } }
		public override string StartTime { get { throw this.NullAccess("StartTime"); } }
		public override string Duration { get { throw this.NullAccess("Duration"); } }
		public override string EndTime { get { throw this.NullAccess("EndTime"); } }
		public override string ReleaseResourceType { get { throw this.NullAccess("ReleaseResourceType"); } }
	}

	public partial class SoundRecordingCollectionReferenceList
	{
		public virtual int? NumberOfCollections { get; set; }
		public virtual IList<SoundRecordingCollectionReference> SoundRecordingCollectionReferences { get; set; }

		public SoundRecordingCollectionReferenceList(XElement element)
		{
			NumberOfCollections = element.Elements().Where(e => e.Name == "NumberOfCollections").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
			SoundRecordingCollectionReferences = element.Elements().Where(e => e.Name == "SoundRecordingCollectionReference").Select(e => new SoundRecordingCollectionReference(e)).ToList();
		}

		public SoundRecordingCollectionReferenceList()
		{ }

		public static bool operator ==(SoundRecordingCollectionReferenceList left, SoundRecordingCollectionReferenceList right)
		{
			return Utils.ValidatedEquals<NullSoundRecordingCollectionReferenceList>(left, right);
		}

		public static bool operator !=(SoundRecordingCollectionReferenceList left, SoundRecordingCollectionReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecordingCollectionReferenceList : SoundRecordingCollectionReferenceList
	{
		public override int? NumberOfCollections { get { throw this.NullAccess("NumberOfCollections"); } }
		public override IList<SoundRecordingCollectionReference> SoundRecordingCollectionReferences { get { throw this.NullAccess("SoundRecordingCollectionReferences"); } }
	}

	public partial class SoundRecordingDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual IList<RightsController> RightsControllers { get; set; }
		public virtual EventDate RemasteredDate { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SoundRecordingDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecordingDetailsByTerritory1()
		{ }

		public static bool operator ==(SoundRecordingDetailsByTerritory1 left, SoundRecordingDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullSoundRecordingDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(SoundRecordingDetailsByTerritory1 left, SoundRecordingDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecordingDetailsByTerritory1 : SoundRecordingDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override IList<RightsController> RightsControllers { get { throw this.NullAccess("RightsControllers"); } }
		public override EventDate RemasteredDate { get { throw this.NullAccess("RemasteredDate"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SoundRecordingId
	{
		public virtual string ISRC { get; set; }
		public virtual CatalogNumber CatalogNumber { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public SoundRecordingId(XElement element)
		{
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault() ?? new NullCatalogNumber();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public SoundRecordingId()
		{ }

		public static bool operator ==(SoundRecordingId left, SoundRecordingId right)
		{
			return Utils.ValidatedEquals<NullSoundRecordingId>(left, right);
		}

		public static bool operator !=(SoundRecordingId left, SoundRecordingId right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecordingId : SoundRecordingId
	{
		public override string ISRC { get { throw this.NullAccess("ISRC"); } }
		public override CatalogNumber CatalogNumber { get { throw this.NullAccess("CatalogNumber"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class SoundRecordingType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SoundRecordingType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public SoundRecordingType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecordingType()
		{ }

		public static bool operator ==(SoundRecordingType left, SoundRecordingType right)
		{
			return Utils.ValidatedEquals<NullSoundRecordingType>(left, right);
		}

		public static bool operator !=(SoundRecordingType left, SoundRecordingType right)
		{
			return !(left == right);
		}
	}

	internal class NullSoundRecordingType : SoundRecordingType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class StoreLocationDescriptor
	{
		public override string ToString(){return Value;}
		public static implicit operator string(StoreLocationDescriptor obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public StoreLocationDescriptor(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public StoreLocationDescriptor()
		{ }

		public static bool operator ==(StoreLocationDescriptor left, StoreLocationDescriptor right)
		{
			return Utils.ValidatedEquals<NullStoreLocationDescriptor>(left, right);
		}

		public static bool operator !=(StoreLocationDescriptor left, StoreLocationDescriptor right)
		{
			return !(left == right);
		}
	}

	internal class NullStoreLocationDescriptor : StoreLocationDescriptor
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SubTitle
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SubTitle obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public SubTitle(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public SubTitle()
		{ }

		public static bool operator ==(SubTitle left, SubTitle right)
		{
			return Utils.ValidatedEquals<NullSubTitle>(left, right);
		}

		public static bool operator !=(SubTitle left, SubTitle right)
		{
			return !(left == right);
		}
	}

	internal class NullSubTitle : SubTitle
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class SupplyChainStatus
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SupplyChainStatus obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public SupplyChainStatus(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public SupplyChainStatus()
		{ }

		public static bool operator ==(SupplyChainStatus left, SupplyChainStatus right)
		{
			return Utils.ValidatedEquals<NullSupplyChainStatus>(left, right);
		}

		public static bool operator !=(SupplyChainStatus left, SupplyChainStatus right)
		{
			return !(left == right);
		}
	}

	internal class NullSupplyChainStatus : SupplyChainStatus
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class Synopsis
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Synopsis obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public Synopsis(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public Synopsis()
		{ }

		public static bool operator ==(Synopsis left, Synopsis right)
		{
			return Utils.ValidatedEquals<NullSynopsis>(left, right);
		}

		public static bool operator !=(Synopsis left, Synopsis right)
		{
			return !(left == right);
		}
	}

	internal class NullSynopsis : Synopsis
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TariffReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TariffReference obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }
		public virtual string TariffSubReference { get; set; }

		public TariffReference(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
			TariffSubReference = element.Attributes().Where(e => e.Name == "TariffSubReference").Select(e => e.Value).SingleOrDefault();
		}

		public TariffReference()
		{ }

		public static bool operator ==(TariffReference left, TariffReference right)
		{
			return Utils.ValidatedEquals<NullTariffReference>(left, right);
		}

		public static bool operator !=(TariffReference left, TariffReference right)
		{
			return !(left == right);
		}
	}

	internal class NullTariffReference : TariffReference
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
		public override string TariffSubReference { get { throw this.NullAccess("TariffSubReference"); } }
	}

	public partial class Tax
	{
		public virtual decimal? Value { get; set; }
		public virtual string CurrencyCode { get; set; }

		public Tax(XElement element)
		{
			Value = string.IsNullOrEmpty(element.Value) ? (decimal?)null : XmlConvert.ToDecimal(element.Value);
			CurrencyCode = element.Attributes().Where(e => e.Name == "CurrencyCode").Select(e => e.Value).SingleOrDefault();
		}

		public Tax()
		{ }

		public static bool operator ==(Tax left, Tax right)
		{
			return Utils.ValidatedEquals<NullTax>(left, right);
		}

		public static bool operator !=(Tax left, Tax right)
		{
			return !(left == right);
		}
	}

	internal class NullTax : Tax
	{
		public override decimal? Value { get { throw this.NullAccess("Value"); } }
		public override string CurrencyCode { get { throw this.NullAccess("CurrencyCode"); } }
	}

	public partial class TaxRate
	{
		public virtual decimal? Rate { get; set; }
		public virtual IList<TaxType> TaxTypes { get; set; }
		public virtual IList<TaxScope> TaxScopes { get; set; }

		public TaxRate(XElement element)
		{
			Rate = element.Elements().Where(e => e.Name == "Rate").Select(e => string.IsNullOrEmpty(e.Value) ? (decimal?)null : XmlConvert.ToDecimal(e.Value)).SingleOrDefault();
			TaxTypes = element.Elements().Where(e => e.Name == "TaxType").Select(e => new TaxType(e)).ToList();
			TaxScopes = element.Elements().Where(e => e.Name == "TaxScope").Select(e => new TaxScope(e)).ToList();
		}

		public TaxRate()
		{ }

		public static bool operator ==(TaxRate left, TaxRate right)
		{
			return Utils.ValidatedEquals<NullTaxRate>(left, right);
		}

		public static bool operator !=(TaxRate left, TaxRate right)
		{
			return !(left == right);
		}
	}

	internal class NullTaxRate : TaxRate
	{
		public override decimal? Rate { get { throw this.NullAccess("Rate"); } }
		public override IList<TaxType> TaxTypes { get { throw this.NullAccess("TaxTypes"); } }
		public override IList<TaxScope> TaxScopes { get { throw this.NullAccess("TaxScopes"); } }
	}

	public partial class TaxScope
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TaxScope obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public TaxScope(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public TaxScope()
		{ }

		public static bool operator ==(TaxScope left, TaxScope right)
		{
			return Utils.ValidatedEquals<NullTaxScope>(left, right);
		}

		public static bool operator !=(TaxScope left, TaxScope right)
		{
			return !(left == right);
		}
	}

	internal class NullTaxScope : TaxScope
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class TaxType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TaxType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public TaxType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public TaxType()
		{ }

		public static bool operator ==(TaxType left, TaxType right)
		{
			return Utils.ValidatedEquals<NullTaxType>(left, right);
		}

		public static bool operator !=(TaxType left, TaxType right)
		{
			return !(left == right);
		}
	}

	internal class NullTaxType : TaxType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class TechnicalInstantiation
	{
		public virtual string DrmEnforcementType { get; set; }
		public virtual string VideoDefinitionType { get; set; }
		public virtual string CodingType { get; set; }
		public virtual BitRate BitRate { get; set; }

		public TechnicalInstantiation(XElement element)
		{
			DrmEnforcementType = element.Elements().Where(e => e.Name == "DrmEnforcementType").Select(e => e.Value).SingleOrDefault();
			VideoDefinitionType = element.Elements().Where(e => e.Name == "VideoDefinitionType").Select(e => e.Value).SingleOrDefault();
			CodingType = element.Elements().Where(e => e.Name == "CodingType").Select(e => e.Value).SingleOrDefault();
			BitRate = element.Elements().Where(e => e.Name == "BitRate").Select(e => new BitRate(e)).SingleOrDefault() ?? new NullBitRate();
		}

		public TechnicalInstantiation()
		{ }

		public static bool operator ==(TechnicalInstantiation left, TechnicalInstantiation right)
		{
			return Utils.ValidatedEquals<NullTechnicalInstantiation>(left, right);
		}

		public static bool operator !=(TechnicalInstantiation left, TechnicalInstantiation right)
		{
			return !(left == right);
		}
	}

	internal class NullTechnicalInstantiation : TechnicalInstantiation
	{
		public override string DrmEnforcementType { get { throw this.NullAccess("DrmEnforcementType"); } }
		public override string VideoDefinitionType { get { throw this.NullAccess("VideoDefinitionType"); } }
		public override string CodingType { get { throw this.NullAccess("CodingType"); } }
		public override BitRate BitRate { get { throw this.NullAccess("BitRate"); } }
	}

	public partial class TextCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TextCodecType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public TextCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public TextCodecType()
		{ }

		public static bool operator ==(TextCodecType left, TextCodecType right)
		{
			return Utils.ValidatedEquals<NullTextCodecType>(left, right);
		}

		public static bool operator !=(TextCodecType left, TextCodecType right)
		{
			return !(left == right);
		}
	}

	internal class NullTextCodecType : TextCodecType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class TextDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual CourtesyLine CourtesyLine { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TextDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault() ?? new NullCourtesyLine();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TextDetailsByTerritory1()
		{ }

		public static bool operator ==(TextDetailsByTerritory1 left, TextDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullTextDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(TextDetailsByTerritory1 left, TextDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullTextDetailsByTerritory1 : TextDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override CourtesyLine CourtesyLine { get { throw this.NullAccess("CourtesyLine"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TextId
	{
		public virtual string ISBN { get; set; }
		public virtual string ISSN { get; set; }
		public virtual string SICI { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public TextId(XElement element)
		{
			ISBN = element.Elements().Where(e => e.Name == "ISBN").Select(e => e.Value).SingleOrDefault();
			ISSN = element.Elements().Where(e => e.Name == "ISSN").Select(e => e.Value).SingleOrDefault();
			SICI = element.Elements().Where(e => e.Name == "SICI").Select(e => e.Value).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public TextId()
		{ }

		public static bool operator ==(TextId left, TextId right)
		{
			return Utils.ValidatedEquals<NullTextId>(left, right);
		}

		public static bool operator !=(TextId left, TextId right)
		{
			return !(left == right);
		}
	}

	internal class NullTextId : TextId
	{
		public override string ISBN { get { throw this.NullAccess("ISBN"); } }
		public override string ISSN { get { throw this.NullAccess("ISSN"); } }
		public override string SICI { get { throw this.NullAccess("SICI"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class TextType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TextType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public TextType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public TextType()
		{ }

		public static bool operator ==(TextType left, TextType right)
		{
			return Utils.ValidatedEquals<NullTextType>(left, right);
		}

		public static bool operator !=(TextType left, TextType right)
		{
			return !(left == right);
		}
	}

	internal class NullTextType : TextType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class Title
	{
		public virtual TitleText TitleText { get; set; }
		public virtual IList<TypedSubTitle> SubTitles { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }
		public virtual string TitleType { get; set; }

		public Title(XElement element)
		{
			TitleText = element.Elements().Where(e => e.Name == "TitleText").Select(e => new TitleText(e)).SingleOrDefault() ?? new NullTitleText();
			SubTitles = element.Elements().Where(e => e.Name == "SubTitle").Select(e => new TypedSubTitle(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
			TitleType = element.Attributes().Where(e => e.Name == "TitleType").Select(e => e.Value).SingleOrDefault();
		}

		public Title()
		{ }

		public static bool operator ==(Title left, Title right)
		{
			return Utils.ValidatedEquals<NullTitle>(left, right);
		}

		public static bool operator !=(Title left, Title right)
		{
			return !(left == right);
		}
	}

	internal class NullTitle : Title
	{
		public override TitleText TitleText { get { throw this.NullAccess("TitleText"); } }
		public override IList<TypedSubTitle> SubTitles { get { throw this.NullAccess("SubTitles"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
		public override string TitleType { get { throw this.NullAccess("TitleType"); } }
	}

	public partial class TitleText
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TitleText obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public TitleText(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public TitleText()
		{ }

		public static bool operator ==(TitleText left, TitleText right)
		{
			return Utils.ValidatedEquals<NullTitleText>(left, right);
		}

		public static bool operator !=(TitleText left, TitleText right)
		{
			return !(left == right);
		}
	}

	internal class NullTitleText : TitleText
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class TotalRoyaltyAmount
	{
		public virtual IList<ReleaseType> ReleaseTypes { get; set; }
		public virtual IList<RightsType> RightsTypes { get; set; }
		public virtual RoyaltyAmount RoyaltyAmount { get; set; }

		public TotalRoyaltyAmount(XElement element)
		{
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			RightsTypes = element.Elements().Where(e => e.Name == "RightsType").Select(e => new RightsType(e)).ToList();
			RoyaltyAmount = element.Elements().Where(e => e.Name == "RoyaltyAmount").Select(e => new RoyaltyAmount(e)).SingleOrDefault() ?? new NullRoyaltyAmount();
		}

		public TotalRoyaltyAmount()
		{ }

		public static bool operator ==(TotalRoyaltyAmount left, TotalRoyaltyAmount right)
		{
			return Utils.ValidatedEquals<NullTotalRoyaltyAmount>(left, right);
		}

		public static bool operator !=(TotalRoyaltyAmount left, TotalRoyaltyAmount right)
		{
			return !(left == right);
		}
	}

	internal class NullTotalRoyaltyAmount : TotalRoyaltyAmount
	{
		public override IList<ReleaseType> ReleaseTypes { get { throw this.NullAccess("ReleaseTypes"); } }
		public override IList<RightsType> RightsTypes { get { throw this.NullAccess("RightsTypes"); } }
		public override RoyaltyAmount RoyaltyAmount { get { throw this.NullAccess("RoyaltyAmount"); } }
	}

	public partial class TypedSubTitle
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TypedSubTitle obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }
		public virtual string SubTitleType { get; set; }

		public TypedSubTitle(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
			SubTitleType = element.Attributes().Where(e => e.Name == "SubTitleType").Select(e => e.Value).SingleOrDefault();
		}

		public TypedSubTitle()
		{ }

		public static bool operator ==(TypedSubTitle left, TypedSubTitle right)
		{
			return Utils.ValidatedEquals<NullTypedSubTitle>(left, right);
		}

		public static bool operator !=(TypedSubTitle left, TypedSubTitle right)
		{
			return !(left == right);
		}
	}

	internal class NullTypedSubTitle : TypedSubTitle
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
		public override string SubTitleType { get { throw this.NullAccess("SubTitleType"); } }
	}

	public partial class Usage
	{
		public virtual IList<UseType> UseTypes { get; set; }
		public virtual IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public virtual IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public virtual IList<CarrierType> CarrierTypes { get; set; }
		public virtual TechnicalInstantiation TechnicalInstantiation { get; set; }
		public virtual int? NumberOfUsages { get; set; }

		public Usage(XElement element)
		{
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
			TechnicalInstantiation = element.Elements().Where(e => e.Name == "TechnicalInstantiation").Select(e => new TechnicalInstantiation(e)).SingleOrDefault() ?? new NullTechnicalInstantiation();
			NumberOfUsages = element.Elements().Where(e => e.Name == "NumberOfUsages").Select(e => string.IsNullOrEmpty(e.Value) ? (int?)null : XmlConvert.ToInt32(e.Value)).SingleOrDefault();
		}

		public Usage()
		{ }

		public static bool operator ==(Usage left, Usage right)
		{
			return Utils.ValidatedEquals<NullUsage>(left, right);
		}

		public static bool operator !=(Usage left, Usage right)
		{
			return !(left == right);
		}
	}

	internal class NullUsage : Usage
	{
		public override IList<UseType> UseTypes { get { throw this.NullAccess("UseTypes"); } }
		public override IList<UserInterfaceType> UserInterfaceTypes { get { throw this.NullAccess("UserInterfaceTypes"); } }
		public override IList<DistributionChannelType> DistributionChannelTypes { get { throw this.NullAccess("DistributionChannelTypes"); } }
		public override IList<CarrierType> CarrierTypes { get { throw this.NullAccess("CarrierTypes"); } }
		public override TechnicalInstantiation TechnicalInstantiation { get { throw this.NullAccess("TechnicalInstantiation"); } }
		public override int? NumberOfUsages { get { throw this.NullAccess("NumberOfUsages"); } }
	}

	public partial class UseType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UseType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public UseType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public UseType()
		{ }

		public static bool operator ==(UseType left, UseType right)
		{
			return Utils.ValidatedEquals<NullUseType>(left, right);
		}

		public static bool operator !=(UseType left, UseType right)
		{
			return !(left == right);
		}
	}

	internal class NullUseType : UseType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class UserDefinedResourceDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual IList<UserDefinedValue> UserDefinedValues { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public UserDefinedResourceDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public UserDefinedResourceDetailsByTerritory1()
		{ }

		public static bool operator ==(UserDefinedResourceDetailsByTerritory1 left, UserDefinedResourceDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullUserDefinedResourceDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(UserDefinedResourceDetailsByTerritory1 left, UserDefinedResourceDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullUserDefinedResourceDetailsByTerritory1 : UserDefinedResourceDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override IList<UserDefinedValue> UserDefinedValues { get { throw this.NullAccess("UserDefinedValues"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class UserDefinedResourceId
	{
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public UserDefinedResourceId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public UserDefinedResourceId()
		{ }

		public static bool operator ==(UserDefinedResourceId left, UserDefinedResourceId right)
		{
			return Utils.ValidatedEquals<NullUserDefinedResourceId>(left, right);
		}

		public static bool operator !=(UserDefinedResourceId left, UserDefinedResourceId right)
		{
			return !(left == right);
		}
	}

	internal class NullUserDefinedResourceId : UserDefinedResourceId
	{
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class UserDefinedResourceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UserDefinedResourceType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }

		public UserDefinedResourceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
		}

		public UserDefinedResourceType()
		{ }

		public static bool operator ==(UserDefinedResourceType left, UserDefinedResourceType right)
		{
			return Utils.ValidatedEquals<NullUserDefinedResourceType>(left, right);
		}

		public static bool operator !=(UserDefinedResourceType left, UserDefinedResourceType right)
		{
			return !(left == right);
		}
	}

	internal class NullUserDefinedResourceType : UserDefinedResourceType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
	}

	public partial class UserDefinedValue
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UserDefinedValue obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string Description { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public UserDefinedValue(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			Description = element.Attributes().Where(e => e.Name == "Description").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public UserDefinedValue()
		{ }

		public static bool operator ==(UserDefinedValue left, UserDefinedValue right)
		{
			return Utils.ValidatedEquals<NullUserDefinedValue>(left, right);
		}

		public static bool operator !=(UserDefinedValue left, UserDefinedValue right)
		{
			return !(left == right);
		}
	}

	internal class NullUserDefinedValue : UserDefinedValue
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string Description { get { throw this.NullAccess("Description"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class UserInterfaceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UserInterfaceType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public UserInterfaceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public UserInterfaceType()
		{ }

		public static bool operator ==(UserInterfaceType left, UserInterfaceType right)
		{
			return Utils.ValidatedEquals<NullUserInterfaceType>(left, right);
		}

		public static bool operator !=(UserInterfaceType left, UserInterfaceType right)
		{
			return !(left == right);
		}
	}

	internal class NullUserInterfaceType : UserInterfaceType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class VideoCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(VideoCodecType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Version { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public VideoCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(e => e.Name == "Version").Select(e => e.Value).SingleOrDefault();
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public VideoCodecType()
		{ }

		public static bool operator ==(VideoCodecType left, VideoCodecType right)
		{
			return Utils.ValidatedEquals<NullVideoCodecType>(left, right);
		}

		public static bool operator !=(VideoCodecType left, VideoCodecType right)
		{
			return !(left == right);
		}
	}

	internal class NullVideoCodecType : VideoCodecType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Version { get { throw this.NullAccess("Version"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class VideoCueSheetReference
	{
		public virtual string VideoCueSheetReferenceProp { get; set; }

		public VideoCueSheetReference(XElement element)
		{
			VideoCueSheetReferenceProp = element.Elements().Where(e => e.Name == "VideoCueSheetReference").Select(e => e.Value).SingleOrDefault();
		}

		public VideoCueSheetReference()
		{ }

		public static bool operator ==(VideoCueSheetReference left, VideoCueSheetReference right)
		{
			return Utils.ValidatedEquals<NullVideoCueSheetReference>(left, right);
		}

		public static bool operator !=(VideoCueSheetReference left, VideoCueSheetReference right)
		{
			return !(left == right);
		}
	}

	internal class NullVideoCueSheetReference : VideoCueSheetReference
	{
		public override string VideoCueSheetReferenceProp { get { throw this.NullAccess("VideoCueSheetReferenceProp"); } }
	}

	public partial class VideoCueSheetReferenceList
	{
		public virtual IList<string> VideoCueSheetReferences { get; set; }

		public VideoCueSheetReferenceList(XElement element)
		{
			VideoCueSheetReferences = element.Elements().Where(e => e.Name == "VideoCueSheetReference").Select(e => e.Value).ToList();
		}

		public VideoCueSheetReferenceList()
		{ }

		public static bool operator ==(VideoCueSheetReferenceList left, VideoCueSheetReferenceList right)
		{
			return Utils.ValidatedEquals<NullVideoCueSheetReferenceList>(left, right);
		}

		public static bool operator !=(VideoCueSheetReferenceList left, VideoCueSheetReferenceList right)
		{
			return !(left == right);
		}
	}

	internal class NullVideoCueSheetReferenceList : VideoCueSheetReferenceList
	{
		public override IList<string> VideoCueSheetReferences { get { throw this.NullAccess("VideoCueSheetReferences"); } }
	}

	public partial class VideoDetailsByTerritory1
	{
		public virtual IList<string> TerritoryCodes { get; set; }
		public virtual IList<string> ExcludedTerritoryCodes { get; set; }
		public virtual IList<Title> Titles { get; set; }
		public virtual IList<Artist> DisplayArtists { get; set; }
		public virtual IList<ResourceContributor> ResourceContributors { get; set; }
		public virtual IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public virtual RightsAgreementId RightsAgreementId { get; set; }
		public virtual IList<LabelName> LabelNames { get; set; }
		public virtual IList<RightsController> RightsControllers { get; set; }
		public virtual EventDate RemasteredDate { get; set; }
		public virtual EventDate OriginalResourceReleaseDate { get; set; }
		public virtual IList<PLine> PLines { get; set; }
		public virtual IList<CLine> CLines { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public VideoDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault() ?? new NullRightsAgreementId();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault() ?? new NullEventDate();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public VideoDetailsByTerritory1()
		{ }

		public static bool operator ==(VideoDetailsByTerritory1 left, VideoDetailsByTerritory1 right)
		{
			return Utils.ValidatedEquals<NullVideoDetailsByTerritory1>(left, right);
		}

		public static bool operator !=(VideoDetailsByTerritory1 left, VideoDetailsByTerritory1 right)
		{
			return !(left == right);
		}
	}

	internal class NullVideoDetailsByTerritory1 : VideoDetailsByTerritory1
	{
		public override IList<string> TerritoryCodes { get { throw this.NullAccess("TerritoryCodes"); } }
		public override IList<string> ExcludedTerritoryCodes { get { throw this.NullAccess("ExcludedTerritoryCodes"); } }
		public override IList<Title> Titles { get { throw this.NullAccess("Titles"); } }
		public override IList<Artist> DisplayArtists { get { throw this.NullAccess("DisplayArtists"); } }
		public override IList<ResourceContributor> ResourceContributors { get { throw this.NullAccess("ResourceContributors"); } }
		public override IList<IndirectResourceContributor> IndirectResourceContributors { get { throw this.NullAccess("IndirectResourceContributors"); } }
		public override RightsAgreementId RightsAgreementId { get { throw this.NullAccess("RightsAgreementId"); } }
		public override IList<LabelName> LabelNames { get { throw this.NullAccess("LabelNames"); } }
		public override IList<RightsController> RightsControllers { get { throw this.NullAccess("RightsControllers"); } }
		public override EventDate RemasteredDate { get { throw this.NullAccess("RemasteredDate"); } }
		public override EventDate OriginalResourceReleaseDate { get { throw this.NullAccess("OriginalResourceReleaseDate"); } }
		public override IList<PLine> PLines { get { throw this.NullAccess("PLines"); } }
		public override IList<CLine> CLines { get { throw this.NullAccess("CLines"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class VideoId
	{
		public virtual string ISRC { get; set; }
		public virtual string ISAN { get; set; }
		public virtual string VISAN { get; set; }
		public virtual CatalogNumber CatalogNumber { get; set; }
		public virtual IList<ProprietaryId> ProprietaryIds { get; set; }
		public virtual bool? IsReplaced { get; set; }

		public VideoId(XElement element)
		{
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault() ?? new NullCatalogNumber();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(e => e.Name == "IsReplaced").Select(e => string.IsNullOrEmpty(e.Value) ? (bool?)null : XmlConvert.ToBoolean(e.Value)).SingleOrDefault();
		}

		public VideoId()
		{ }

		public static bool operator ==(VideoId left, VideoId right)
		{
			return Utils.ValidatedEquals<NullVideoId>(left, right);
		}

		public static bool operator !=(VideoId left, VideoId right)
		{
			return !(left == right);
		}
	}

	internal class NullVideoId : VideoId
	{
		public override string ISRC { get { throw this.NullAccess("ISRC"); } }
		public override string ISAN { get { throw this.NullAccess("ISAN"); } }
		public override string VISAN { get { throw this.NullAccess("VISAN"); } }
		public override CatalogNumber CatalogNumber { get { throw this.NullAccess("CatalogNumber"); } }
		public override IList<ProprietaryId> ProprietaryIds { get { throw this.NullAccess("ProprietaryIds"); } }
		public override bool? IsReplaced { get { throw this.NullAccess("IsReplaced"); } }
	}

	public partial class VideoType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(VideoType obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public VideoType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public VideoType()
		{ }

		public static bool operator ==(VideoType left, VideoType right)
		{
			return Utils.ValidatedEquals<NullVideoType>(left, right);
		}

		public static bool operator !=(VideoType left, VideoType right)
		{
			return !(left == right);
		}
	}

	internal class NullVideoType : VideoType
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}

	public partial class WebPage
	{
		public virtual IList<PartyId> PartyIds { get; set; }
		public virtual IList<ReleaseId> ReleaseIds { get; set; }
		public virtual Name PageName { get; set; }
		public virtual string URL { get; set; }
		public virtual string UserName { get; set; }
		public virtual string Password { get; set; }

		public WebPage(XElement element)
		{
			PartyIds = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).ToList();
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			PageName = element.Elements().Where(e => e.Name == "PageName").Select(e => new Name(e)).SingleOrDefault() ?? new NullName();
			URL = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).SingleOrDefault();
			UserName = element.Elements().Where(e => e.Name == "UserName").Select(e => e.Value).SingleOrDefault();
			Password = element.Elements().Where(e => e.Name == "Password").Select(e => e.Value).SingleOrDefault();
		}

		public WebPage()
		{ }

		public static bool operator ==(WebPage left, WebPage right)
		{
			return Utils.ValidatedEquals<NullWebPage>(left, right);
		}

		public static bool operator !=(WebPage left, WebPage right)
		{
			return !(left == right);
		}
	}

	internal class NullWebPage : WebPage
	{
		public override IList<PartyId> PartyIds { get { throw this.NullAccess("PartyIds"); } }
		public override IList<ReleaseId> ReleaseIds { get { throw this.NullAccess("ReleaseIds"); } }
		public override Name PageName { get { throw this.NullAccess("PageName"); } }
		public override string URL { get { throw this.NullAccess("URL"); } }
		public override string UserName { get { throw this.NullAccess("UserName"); } }
		public override string Password { get { throw this.NullAccess("Password"); } }
	}

	public partial class WorkList
	{
		public virtual IList<MusicalWork> MusicalWorks { get; set; }
		public virtual string LanguageAndScriptCode { get; set; }

		public WorkList(XElement element)
		{
			MusicalWorks = element.Elements().Where(e => e.Name == "MusicalWork").Select(e => new MusicalWork(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(e => e.Name == "LanguageAndScriptCode").Select(e => e.Value).SingleOrDefault();
		}

		public WorkList()
		{ }

		public static bool operator ==(WorkList left, WorkList right)
		{
			return Utils.ValidatedEquals<NullWorkList>(left, right);
		}

		public static bool operator !=(WorkList left, WorkList right)
		{
			return !(left == right);
		}
	}

	internal class NullWorkList : WorkList
	{
		public override IList<MusicalWork> MusicalWorks { get { throw this.NullAccess("MusicalWorks"); } }
		public override string LanguageAndScriptCode { get { throw this.NullAccess("LanguageAndScriptCode"); } }
	}

	public partial class WsMessageStatus
	{
		public override string ToString(){return Value;}
		public static implicit operator string(WsMessageStatus obj){return obj.Value;}

		public virtual string Value { get; set; }
		public virtual string Namespace { get; set; }
		public virtual string UserDefinedValue { get; set; }

		public WsMessageStatus(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(e => e.Name == "Namespace").Select(e => e.Value).SingleOrDefault();
			UserDefinedValue = element.Attributes().Where(e => e.Name == "UserDefinedValue").Select(e => e.Value).SingleOrDefault();
		}

		public WsMessageStatus()
		{ }

		public static bool operator ==(WsMessageStatus left, WsMessageStatus right)
		{
			return Utils.ValidatedEquals<NullWsMessageStatus>(left, right);
		}

		public static bool operator !=(WsMessageStatus left, WsMessageStatus right)
		{
			return !(left == right);
		}
	}

	internal class NullWsMessageStatus : WsMessageStatus
	{
		public override string Value { get { throw this.NullAccess("Value"); } }
		public override string Namespace { get { throw this.NullAccess("Namespace"); } }
		public override string UserDefinedValue { get { throw this.NullAccess("UserDefinedValue"); } }
	}


	internal static class Utils
	{
		public static Exception NullAccess<T>(this T src, string name)
		{
			return new NullReferenceException("Property '" + name + "' was accessed from a null '" + 
				typeof(T).BaseType.Name + "' object");
		}

		public static bool ValidatedEquals<T>(object d1, object d2)
		{
			if (d1 is T || d2 is T) return (d1 == null || d2 == null);
			return ReferenceEquals(d1, d2);
		}
	}
}