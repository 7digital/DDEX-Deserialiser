using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace DDEX_Deserialiser.AutoGenerated
{
	public class NewReleaseMessage
	{
		public MessageHeader MessageHeader { get; set; }
		public string UpdateIndicator { get; set; }
		public CatalogTransfer CatalogTransfer { get; set; }
		public WorkList WorkList { get; set; }
		public CueSheetList CueSheetList { get; set; }
		public ResourceList ResourceList { get; set; }
		public CollectionList CollectionList { get; set; }
		public ReleaseList ReleaseList { get; set; }
		public DealList DealList { get; set; }
		public string MessageSchemaVersionId { get; set; }
		public string BusinessProfileVersionId { get; set; }
		public string ReleaseProfileVersionId { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public NewReleaseMessage(XElement element)
		{
			MessageHeader = element.Elements().Where(e => e.Name == "MessageHeader").Select(e => new MessageHeader(e)).SingleOrDefault();
			UpdateIndicator = element.Elements().Where(e => e.Name == "UpdateIndicator").Select(e => e.Value).SingleOrDefault();
			CatalogTransfer = element.Elements().Where(e => e.Name == "CatalogTransfer").Select(e => new CatalogTransfer(e)).SingleOrDefault();
			WorkList = element.Elements().Where(e => e.Name == "WorkList").Select(e => new WorkList(e)).SingleOrDefault();
			CueSheetList = element.Elements().Where(e => e.Name == "CueSheetList").Select(e => new CueSheetList(e)).SingleOrDefault();
			ResourceList = element.Elements().Where(e => e.Name == "ResourceList").Select(e => new ResourceList(e)).SingleOrDefault();
			CollectionList = element.Elements().Where(e => e.Name == "CollectionList").Select(e => new CollectionList(e)).SingleOrDefault();
			ReleaseList = element.Elements().Where(e => e.Name == "ReleaseList").Select(e => new ReleaseList(e)).SingleOrDefault();
			DealList = element.Elements().Where(e => e.Name == "DealList").Select(e => new DealList(e)).SingleOrDefault();
			MessageSchemaVersionId = element.Attributes().Where(a=>a.Name=="MessageSchemaVersionId").Select(a=>a.Value).FirstOrDefault();
			BusinessProfileVersionId = element.Attributes().Where(a=>a.Name=="BusinessProfileVersionId").Select(a=>a.Value).FirstOrDefault();
			ReleaseProfileVersionId = element.Attributes().Where(a=>a.Name=="ReleaseProfileVersionId").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public NewReleaseMessage()
		{ }
	}

	public class CatalogListMessage
	{
		public MessageHeader MessageHeader { get; set; }
		public string PublicationDate { get; set; }
		public IList<CatalogItem> CatalogItems { get; set; }
		public string MessageSchemaVersionId { get; set; }
		public string BusinessProfileVersionId { get; set; }
		public string ReleaseProfileVersionId { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public CatalogListMessage(XElement element)
		{
			MessageHeader = element.Elements().Where(e => e.Name == "MessageHeader").Select(e => new MessageHeader(e)).SingleOrDefault();
			PublicationDate = element.Elements().Where(e => e.Name == "PublicationDate").Select(e => e.Value).SingleOrDefault();
			CatalogItems = element.Elements().Where(e => e.Name == "CatalogItem").Select(e => new CatalogItem(e)).ToList();
			MessageSchemaVersionId = element.Attributes().Where(a=>a.Name=="MessageSchemaVersionId").Select(a=>a.Value).FirstOrDefault();
			BusinessProfileVersionId = element.Attributes().Where(a=>a.Name=="BusinessProfileVersionId").Select(a=>a.Value).FirstOrDefault();
			ReleaseProfileVersionId = element.Attributes().Where(a=>a.Name=="ReleaseProfileVersionId").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public CatalogListMessage()
		{ }
	}

	public class CatalogItem
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<ReleaseId> ReleaseIds { get; set; }
		public Title Title { get; set; }
		public Name DisplayArtistName { get; set; }
		public IList<Name> ContributorNames { get; set; }
		public ReferenceTitle DisplayTitle { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public EventDate ReleaseDate { get; set; }

		public CatalogItem(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			Title = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).SingleOrDefault();
			DisplayArtistName = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).SingleOrDefault();
			ContributorNames = element.Elements().Where(e => e.Name == "ContributorName").Select(e => new Name(e)).ToList();
			DisplayTitle = element.Elements().Where(e => e.Name == "DisplayTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			ReleaseDate = element.Elements().Where(e => e.Name == "ReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
		}

		public CatalogItem()
		{ }
	}

	public class CatalogReleaseReferenceList
	{
		public IList<string> CatalogReleaseReferences { get; set; }

		public CatalogReleaseReferenceList(XElement element)
		{
			CatalogReleaseReferences = element.Elements().Where(e => e.Name == "CatalogReleaseReference").Select(e => e.Value).ToList();
		}

		public CatalogReleaseReferenceList()
		{ }
	}

	public class CatalogTransfer
	{
		public string CatalogTransferCompleted { get; set; }
		public EventDate EffectiveTransferDate { get; set; }
		public CatalogReleaseReferenceList CatalogReleaseReferenceList { get; set; }
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public PartyDescriptor TransferringFrom { get; set; }
		public PartyDescriptor TransferringTo { get; set; }

		public CatalogTransfer(XElement element)
		{
			CatalogTransferCompleted = element.Elements().Where(e => e.Name == "CatalogTransferCompleted").Select(e => e.Value).SingleOrDefault();
			EffectiveTransferDate = element.Elements().Where(e => e.Name == "EffectiveTransferDate").Select(e => new EventDate(e)).SingleOrDefault();
			CatalogReleaseReferenceList = element.Elements().Where(e => e.Name == "CatalogReleaseReferenceList").Select(e => new CatalogReleaseReferenceList(e)).SingleOrDefault();
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			TransferringFrom = element.Elements().Where(e => e.Name == "TransferringFrom").Select(e => new PartyDescriptor(e)).SingleOrDefault();
			TransferringTo = element.Elements().Where(e => e.Name == "TransferringTo").Select(e => new PartyDescriptor(e)).SingleOrDefault();
		}

		public CatalogTransfer()
		{ }
	}

	public class Collection
	{
		public IList<CollectionId> CollectionIds { get; set; }
		public IList<CollectionType> CollectionTypes { get; set; }
		public string CollectionReference { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<ResourceContributor> Contributors { get; set; }
		public IList<Character> Characters { get; set; }
		public CollectionCollectionReferenceList CollectionCollectionReferenceList { get; set; }
		public string IsComplete { get; set; }
		public string Duration { get; set; }
		public string DurationOfMusicalContent { get; set; }
		public EventDate CreationDate { get; set; }
		public EventDate OriginalReleaseDate { get; set; }
		public string OriginalLanguage { get; set; }
		public IList<CollectionDetailsByTerritory> CollectionDetailsByTerritorys { get; set; }
		public CollectionResourceReferenceList CollectionResourceReferenceList { get; set; }
		public CollectionWorkReferenceList CollectionWorkReferenceList { get; set; }
		public string RepresentativeImageReference { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Collection(XElement element)
		{
			CollectionIds = element.Elements().Where(e => e.Name == "CollectionId").Select(e => new CollectionId(e)).ToList();
			CollectionTypes = element.Elements().Where(e => e.Name == "CollectionType").Select(e => new CollectionType(e)).ToList();
			CollectionReference = element.Elements().Where(e => e.Name == "CollectionReference").Select(e => e.Value).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
			CollectionCollectionReferenceList = element.Elements().Where(e => e.Name == "CollectionCollectionReferenceList").Select(e => new CollectionCollectionReferenceList(e)).SingleOrDefault();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			DurationOfMusicalContent = element.Elements().Where(e => e.Name == "DurationOfMusicalContent").Select(e => e.Value).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalLanguage = element.Elements().Where(e => e.Name == "OriginalLanguage").Select(e => e.Value).SingleOrDefault();
			CollectionDetailsByTerritorys = element.Elements().Where(e => e.Name == "CollectionDetailsByTerritory").Select(e => new CollectionDetailsByTerritory(e)).ToList();
			CollectionResourceReferenceList = element.Elements().Where(e => e.Name == "CollectionResourceReferenceList").Select(e => new CollectionResourceReferenceList(e)).SingleOrDefault();
			CollectionWorkReferenceList = element.Elements().Where(e => e.Name == "CollectionWorkReferenceList").Select(e => new CollectionWorkReferenceList(e)).SingleOrDefault();
			RepresentativeImageReference = element.Elements().Where(e => e.Name == "RepresentativeImageReference").Select(e => e.Value).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Collection()
		{ }
	}

	public class CollectionDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<ResourceContributor> Contributors { get; set; }
		public string IsComplete { get; set; }
		public IList<Character> Characters { get; set; }

		public CollectionDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => e.Value).SingleOrDefault();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
		}

		public CollectionDetailsByTerritory()
		{ }
	}

	public class CollectionList
	{
		public IList<Collection> Collections { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public CollectionList(XElement element)
		{
			Collections = element.Elements().Where(e => e.Name == "Collection").Select(e => new Collection(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public CollectionList()
		{ }
	}

	public class CollectionResourceReference
	{
		public string CollectionResourceReferenceProp { get; set; }
		public string Duration { get; set; }

		public CollectionResourceReference(XElement element)
		{
			CollectionResourceReferenceProp = element.Elements().Where(e => e.Name == "CollectionResourceReference").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionResourceReference()
		{ }
	}

	public class CollectionResourceReferenceList
	{
		public IList<CollectionResourceReference> CollectionResourceReferences { get; set; }

		public CollectionResourceReferenceList(XElement element)
		{
			CollectionResourceReferences = element.Elements().Where(e => e.Name == "CollectionResourceReference").Select(e => new CollectionResourceReference(e)).ToList();
		}

		public CollectionResourceReferenceList()
		{ }
	}

	public class CollectionWorkReference
	{
		public string CollectionWorkReferenceProp { get; set; }
		public string Duration { get; set; }

		public CollectionWorkReference(XElement element)
		{
			CollectionWorkReferenceProp = element.Elements().Where(e => e.Name == "CollectionWorkReference").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionWorkReference()
		{ }
	}

	public class CollectionWorkReferenceList
	{
		public IList<CollectionWorkReference> CollectionWorkReferences { get; set; }

		public CollectionWorkReferenceList(XElement element)
		{
			CollectionWorkReferences = element.Elements().Where(e => e.Name == "CollectionWorkReference").Select(e => new CollectionWorkReference(e)).ToList();
		}

		public CollectionWorkReferenceList()
		{ }
	}

	public class Condition
	{
		public string Value { get; set; }
		public string Unit { get; set; }
		public string RelationalRelator { get; set; }

		public Condition(XElement element)
		{
			Value = element.Elements().Where(e => e.Name == "Value").Select(e => e.Value).SingleOrDefault();
			Unit = element.Elements().Where(e => e.Name == "Unit").Select(e => e.Value).SingleOrDefault();
			RelationalRelator = element.Elements().Where(e => e.Name == "RelationalRelator").Select(e => e.Value).SingleOrDefault();
		}

		public Condition()
		{ }
	}

	public class Cue
	{
		public CueUseType CueUseType { get; set; }
		public CueThemeType CueThemeType { get; set; }
		public CueVocalType CueVocalType { get; set; }
		public string IsDance { get; set; }
		public CueVisualPerceptionType CueVisualPerceptionType { get; set; }
		public CueOrigin CueOrigin { get; set; }
		public IList<CueCreationReference> CueCreationReferences { get; set; }
		public string ReferencedCreationType { get; set; }
		public CreationId ReferencedCreationId { get; set; }
		public IList<Title> ReferencedCreationTitles { get; set; }
		public IList<ResourceContributor> ReferencedCreationContributors { get; set; }
		public IList<Character> ReferencedCreationCharacters { get; set; }
		public string HasMusicalContent { get; set; }
		public string StartTime { get; set; }
		public string Duration { get; set; }
		public string EndTime { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }

		public Cue(XElement element)
		{
			CueUseType = element.Elements().Where(e => e.Name == "CueUseType").Select(e => new CueUseType(e)).SingleOrDefault();
			CueThemeType = element.Elements().Where(e => e.Name == "CueThemeType").Select(e => new CueThemeType(e)).SingleOrDefault();
			CueVocalType = element.Elements().Where(e => e.Name == "CueVocalType").Select(e => new CueVocalType(e)).SingleOrDefault();
			IsDance = element.Elements().Where(e => e.Name == "IsDance").Select(e => e.Value).SingleOrDefault();
			CueVisualPerceptionType = element.Elements().Where(e => e.Name == "CueVisualPerceptionType").Select(e => new CueVisualPerceptionType(e)).SingleOrDefault();
			CueOrigin = element.Elements().Where(e => e.Name == "CueOrigin").Select(e => new CueOrigin(e)).SingleOrDefault();
			CueCreationReferences = element.Elements().Where(e => e.Name == "CueCreationReference").Select(e => new CueCreationReference(e)).ToList();
			ReferencedCreationType = element.Elements().Where(e => e.Name == "ReferencedCreationType").Select(e => e.Value).SingleOrDefault();
			ReferencedCreationId = element.Elements().Where(e => e.Name == "ReferencedCreationId").Select(e => new CreationId(e)).SingleOrDefault();
			ReferencedCreationTitles = element.Elements().Where(e => e.Name == "ReferencedCreationTitle").Select(e => new Title(e)).ToList();
			ReferencedCreationContributors = element.Elements().Where(e => e.Name == "ReferencedCreationContributor").Select(e => new ResourceContributor(e)).ToList();
			ReferencedCreationCharacters = element.Elements().Where(e => e.Name == "ReferencedCreationCharacter").Select(e => new Character(e)).ToList();
			HasMusicalContent = element.Elements().Where(e => e.Name == "HasMusicalContent").Select(e => e.Value).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
		}

		public Cue()
		{ }
	}

	public class CueSheet
	{
		public IList<ProprietaryId> CueSheetIds { get; set; }
		public string CueSheetReference { get; set; }
		public CueSheetType CueSheetType { get; set; }
		public IList<Cue> Cues { get; set; }

		public CueSheet(XElement element)
		{
			CueSheetIds = element.Elements().Where(e => e.Name == "CueSheetId").Select(e => new ProprietaryId(e)).ToList();
			CueSheetReference = element.Elements().Where(e => e.Name == "CueSheetReference").Select(e => e.Value).SingleOrDefault();
			CueSheetType = element.Elements().Where(e => e.Name == "CueSheetType").Select(e => new CueSheetType(e)).SingleOrDefault();
			Cues = element.Elements().Where(e => e.Name == "Cue").Select(e => new Cue(e)).ToList();
		}

		public CueSheet()
		{ }
	}

	public class CueSheetList
	{
		public IList<CueSheet> CueSheets { get; set; }

		public CueSheetList(XElement element)
		{
			CueSheets = element.Elements().Where(e => e.Name == "CueSheet").Select(e => new CueSheet(e)).ToList();
		}

		public CueSheetList()
		{ }
	}

	public class Deal
	{
		public IList<DealReference> DealReferences { get; set; }
		public DealTerms DealTerms { get; set; }
		public ResourceUsage ResourceUsage { get; set; }
		public DealTechnicalResourceDetailsReferenceList DealTechnicalResourceDetailsReferenceList { get; set; }
		public IList<WebPage> DistributionChannelPages { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Deal(XElement element)
		{
			DealReferences = element.Elements().Where(e => e.Name == "DealReference").Select(e => new DealReference(e)).ToList();
			DealTerms = element.Elements().Where(e => e.Name == "DealTerms").Select(e => new DealTerms(e)).SingleOrDefault();
			ResourceUsage = element.Elements().Where(e => e.Name == "ResourceUsage").Select(e => new ResourceUsage(e)).SingleOrDefault();
			DealTechnicalResourceDetailsReferenceList = element.Elements().Where(e => e.Name == "DealTechnicalResourceDetailsReferenceList").Select(e => new DealTechnicalResourceDetailsReferenceList(e)).SingleOrDefault();
			DistributionChannelPages = element.Elements().Where(e => e.Name == "DistributionChannelPage").Select(e => new WebPage(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Deal()
		{ }
	}

	public class DealList
	{
		public IList<ReleaseDeal> ReleaseDeals { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public DealList(XElement element)
		{
			ReleaseDeals = element.Elements().Where(e => e.Name == "ReleaseDeal").Select(e => new ReleaseDeal(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public DealList()
		{ }
	}

	public class DealTechnicalResourceDetailsReferenceList
	{
		public IList<string> DealTechnicalResourceDetailsReferences { get; set; }

		public DealTechnicalResourceDetailsReferenceList(XElement element)
		{
			DealTechnicalResourceDetailsReferences = element.Elements().Where(e => e.Name == "DealTechnicalResourceDetailsReference").Select(e => e.Value).ToList();
		}

		public DealTechnicalResourceDetailsReferenceList()
		{ }
	}

	public class DealTerms
	{
		public IList<CommercialModelType> CommercialModelTypes { get; set; }
		public IList<Usage> Usages { get; set; }
		public string AllDealsCancelled { get; set; }
		public string TakeDown { get; set; }
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<DSP> DistributionChannels { get; set; }
		public IList<DSP> ExcludedDistributionChannels { get; set; }
		public IList<PriceInformation> PriceInformations { get; set; }
		public string IsPromotional { get; set; }
		public PromotionalCode PromotionalCode { get; set; }
		public IList<Period> ValidityPeriods { get; set; }
		public ConsumerRentalPeriod ConsumerRentalPeriod { get; set; }
		public EventDate PreOrderReleaseDate { get; set; }
		public EventDate PreOrderPreviewDate { get; set; }
		public string IsExclusive { get; set; }
		public IList<RelatedReleaseOfferSet> RelatedReleaseOfferSets { get; set; }
		public PhysicalReturns PhysicalReturns { get; set; }
		public string NumberOfProductsPerCarton { get; set; }
		public IList<RightsClaimPolicy> RightsClaimPolicys { get; set; }
		public IList<WebPolicy> WebPolicys { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public DealTerms(XElement element)
		{
			CommercialModelTypes = element.Elements().Where(e => e.Name == "CommercialModelType").Select(e => new CommercialModelType(e)).ToList();
			Usages = element.Elements().Where(e => e.Name == "Usage").Select(e => new Usage(e)).ToList();
			AllDealsCancelled = element.Elements().Where(e => e.Name == "AllDealsCancelled").Select(e => e.Value).SingleOrDefault();
			TakeDown = element.Elements().Where(e => e.Name == "TakeDown").Select(e => e.Value).SingleOrDefault();
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DistributionChannels = element.Elements().Where(e => e.Name == "DistributionChannel").Select(e => new DSP(e)).ToList();
			ExcludedDistributionChannels = element.Elements().Where(e => e.Name == "ExcludedDistributionChannel").Select(e => new DSP(e)).ToList();
			PriceInformations = element.Elements().Where(e => e.Name == "PriceInformation").Select(e => new PriceInformation(e)).ToList();
			IsPromotional = element.Elements().Where(e => e.Name == "IsPromotional").Select(e => e.Value).SingleOrDefault();
			PromotionalCode = element.Elements().Where(e => e.Name == "PromotionalCode").Select(e => new PromotionalCode(e)).SingleOrDefault();
			ValidityPeriods = element.Elements().Where(e => e.Name == "ValidityPeriod").Select(e => new Period(e)).ToList();
			ConsumerRentalPeriod = element.Elements().Where(e => e.Name == "ConsumerRentalPeriod").Select(e => new ConsumerRentalPeriod(e)).SingleOrDefault();
			PreOrderReleaseDate = element.Elements().Where(e => e.Name == "PreOrderReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			PreOrderPreviewDate = element.Elements().Where(e => e.Name == "PreOrderPreviewDate").Select(e => new EventDate(e)).SingleOrDefault();
			IsExclusive = element.Elements().Where(e => e.Name == "IsExclusive").Select(e => e.Value).SingleOrDefault();
			RelatedReleaseOfferSets = element.Elements().Where(e => e.Name == "RelatedReleaseOfferSet").Select(e => new RelatedReleaseOfferSet(e)).ToList();
			PhysicalReturns = element.Elements().Where(e => e.Name == "PhysicalReturns").Select(e => new PhysicalReturns(e)).SingleOrDefault();
			NumberOfProductsPerCarton = element.Elements().Where(e => e.Name == "NumberOfProductsPerCarton").Select(e => e.Value).SingleOrDefault();
			RightsClaimPolicys = element.Elements().Where(e => e.Name == "RightsClaimPolicy").Select(e => new RightsClaimPolicy(e)).ToList();
			WebPolicys = element.Elements().Where(e => e.Name == "WebPolicy").Select(e => new WebPolicy(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public DealTerms()
		{ }
	}

	public class Image
	{
		public ImageType ImageType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<ImageId> ImageIds { get; set; }
		public string ResourceReference { get; set; }
		public IList<Title> Titles { get; set; }
		public EventDate CreationDate { get; set; }
		public IList<ImageDetailsByTerritory> ImageDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Image(XElement element)
		{
			ImageType = element.Elements().Where(e => e.Name == "ImageType").Select(e => new ImageType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			ImageIds = element.Elements().Where(e => e.Name == "ImageId").Select(e => new ImageId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			ImageDetailsByTerritorys = element.Elements().Where(e => e.Name == "ImageDetailsByTerritory").Select(e => new ImageDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Image()
		{ }
	}

	public class ImageDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<CLine> CLines { get; set; }
		public Description Description { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<TechnicalImageDetails> TechnicalImageDetails { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ImageDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			Description = element.Elements().Where(e => e.Name == "Description").Select(e => new Description(e)).SingleOrDefault();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalImageDetails = element.Elements().Where(e => e.Name == "TechnicalImageDetails").Select(e => new TechnicalImageDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ImageDetailsByTerritory()
		{ }
	}

	public class MIDI
	{
		public MidiType MidiType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<MidiId> MidiIds { get; set; }
		public IList<MusicalWorkId> IndirectMidiIds { get; set; }
		public string ResourceReference { get; set; }
		public ReferenceTitle ReferenceTitle { get; set; }
		public Description InstrumentationDescription { get; set; }
		public string IsMedley { get; set; }
		public string IsPotpourri { get; set; }
		public string IsInstrumental { get; set; }
		public string IsBackground { get; set; }
		public string IsHiddenResource { get; set; }
		public string IsBonusResource { get; set; }
		public string IsComputerGenerated { get; set; }
		public string NoSilenceBefore { get; set; }
		public string NoSilenceAfter { get; set; }
		public string PerformerInformationRequired { get; set; }
		public string LanguageOfPerformance { get; set; }
		public string Duration { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public EventDate CreationDate { get; set; }
		public EventDate MasteredDate { get; set; }
		public IList<MidiDetailsByTerritory> MidiDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MIDI(XElement element)
		{
			MidiType = element.Elements().Where(e => e.Name == "MidiType").Select(e => new MidiType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			MidiIds = element.Elements().Where(e => e.Name == "MidiId").Select(e => new MidiId(e)).ToList();
			IndirectMidiIds = element.Elements().Where(e => e.Name == "IndirectMidiId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			InstrumentationDescription = element.Elements().Where(e => e.Name == "InstrumentationDescription").Select(e => new Description(e)).SingleOrDefault();
			IsMedley = element.Elements().Where(e => e.Name == "IsMedley").Select(e => e.Value).SingleOrDefault();
			IsPotpourri = element.Elements().Where(e => e.Name == "IsPotpourri").Select(e => e.Value).SingleOrDefault();
			IsInstrumental = element.Elements().Where(e => e.Name == "IsInstrumental").Select(e => e.Value).SingleOrDefault();
			IsBackground = element.Elements().Where(e => e.Name == "IsBackground").Select(e => e.Value).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => e.Value).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => e.Value).SingleOrDefault();
			IsComputerGenerated = element.Elements().Where(e => e.Name == "IsComputerGenerated").Select(e => e.Value).SingleOrDefault();
			NoSilenceBefore = element.Elements().Where(e => e.Name == "NoSilenceBefore").Select(e => e.Value).SingleOrDefault();
			NoSilenceAfter = element.Elements().Where(e => e.Name == "NoSilenceAfter").Select(e => e.Value).SingleOrDefault();
			PerformerInformationRequired = element.Elements().Where(e => e.Name == "PerformerInformationRequired").Select(e => e.Value).SingleOrDefault();
			LanguageOfPerformance = element.Elements().Where(e => e.Name == "LanguageOfPerformance").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			MasteredDate = element.Elements().Where(e => e.Name == "MasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			MidiDetailsByTerritorys = element.Elements().Where(e => e.Name == "MidiDetailsByTerritory").Select(e => new MidiDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MIDI()
		{ }
	}

	public class MidiDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public IList<RightsController> RightsControllers { get; set; }
		public EventDate RemasteredDate { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public IList<CLine> CLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public string SequenceNumber { get; set; }
		public IList<HostSoundCarrier> HostSoundCarriers { get; set; }
		public Comment MarketingComment { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public IList<TechnicalMidiDetails> TechnicalMidiDetails { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MidiDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			HostSoundCarriers = element.Elements().Where(e => e.Name == "HostSoundCarrier").Select(e => new HostSoundCarrier(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			TechnicalMidiDetails = element.Elements().Where(e => e.Name == "TechnicalMidiDetails").Select(e => new TechnicalMidiDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MidiDetailsByTerritory()
		{ }
	}

	public class PhysicalReturns
	{
		public string PhysicalReturnsAllowed { get; set; }
		public string LatestDateForPhysicalReturns { get; set; }

		public PhysicalReturns(XElement element)
		{
			PhysicalReturnsAllowed = element.Elements().Where(e => e.Name == "PhysicalReturnsAllowed").Select(e => e.Value).SingleOrDefault();
			LatestDateForPhysicalReturns = element.Elements().Where(e => e.Name == "LatestDateForPhysicalReturns").Select(e => e.Value).SingleOrDefault();
		}

		public PhysicalReturns()
		{ }
	}

	public class PreviewDetails
	{
		public Description PartType { get; set; }
		public string TopLeftCorner { get; set; }
		public string BottomRightCorner { get; set; }
		public string ExpressionType { get; set; }

		public PreviewDetails(XElement element)
		{
			PartType = element.Elements().Where(e => e.Name == "PartType").Select(e => new Description(e)).SingleOrDefault();
			TopLeftCorner = element.Elements().Where(e => e.Name == "TopLeftCorner").Select(e => e.Value).SingleOrDefault();
			BottomRightCorner = element.Elements().Where(e => e.Name == "BottomRightCorner").Select(e => e.Value).SingleOrDefault();
			ExpressionType = element.Elements().Where(e => e.Name == "ExpressionType").Select(e => e.Value).SingleOrDefault();
		}

		public PreviewDetails()
		{ }
	}

	public class RelatedReleaseOfferSet
	{
		public IList<ReleaseId> ReleaseIds { get; set; }
		public Description ReleaseDescription { get; set; }
		public IList<Deal> Deals { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public RelatedReleaseOfferSet(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReleaseDescription = element.Elements().Where(e => e.Name == "ReleaseDescription").Select(e => new Description(e)).SingleOrDefault();
			Deals = element.Elements().Where(e => e.Name == "Deal").Select(e => new Deal(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public RelatedReleaseOfferSet()
		{ }
	}

	public class Release
	{
		public IList<ReleaseId> ReleaseIds { get; set; }
		public IList<string> ReleaseReferences { get; set; }
		public IList<ExternalResourceLink> ExternalResourceLinks { get; set; }
		public IList<SalesReportingProxyReleaseId> SalesReportingProxyReleaseIds { get; set; }
		public ReferenceTitle ReferenceTitle { get; set; }
		public ReleaseResourceReferenceList ReleaseResourceReferenceList { get; set; }
		public ResourceOmissionReason ResourceOmissionReason { get; set; }
		public ReleaseCollectionReferenceList ReleaseCollectionReferenceList { get; set; }
		public IList<ReleaseType> ReleaseTypes { get; set; }
		public IList<ReleaseDetailsByTerritory> ReleaseDetailsByTerritorys { get; set; }
		public string Duration { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public IList<WebPage> ArtistProfilePages { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Release(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReleaseReferences = element.Elements().Where(e => e.Name == "ReleaseReference").Select(e => e.Value).ToList();
			ExternalResourceLinks = element.Elements().Where(e => e.Name == "ExternalResourceLink").Select(e => new ExternalResourceLink(e)).ToList();
			SalesReportingProxyReleaseIds = element.Elements().Where(e => e.Name == "SalesReportingProxyReleaseId").Select(e => new SalesReportingProxyReleaseId(e)).ToList();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			ReleaseResourceReferenceList = element.Elements().Where(e => e.Name == "ReleaseResourceReferenceList").Select(e => new ReleaseResourceReferenceList(e)).SingleOrDefault();
			ResourceOmissionReason = element.Elements().Where(e => e.Name == "ResourceOmissionReason").Select(e => new ResourceOmissionReason(e)).SingleOrDefault();
			ReleaseCollectionReferenceList = element.Elements().Where(e => e.Name == "ReleaseCollectionReferenceList").Select(e => new ReleaseCollectionReferenceList(e)).SingleOrDefault();
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			ReleaseDetailsByTerritorys = element.Elements().Where(e => e.Name == "ReleaseDetailsByTerritory").Select(e => new ReleaseDetailsByTerritory(e)).ToList();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			ArtistProfilePages = element.Elements().Where(e => e.Name == "ArtistProfilePage").Select(e => new WebPage(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Release()
		{ }
	}

	public class ReleaseDeal
	{
		public IList<string> DealReleaseReferences { get; set; }
		public IList<Deal> Deals { get; set; }
		public string EffectiveDate { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ReleaseDeal(XElement element)
		{
			DealReleaseReferences = element.Elements().Where(e => e.Name == "DealReleaseReference").Select(e => e.Value).ToList();
			Deals = element.Elements().Where(e => e.Name == "Deal").Select(e => new Deal(e)).ToList();
			EffectiveDate = element.Elements().Where(e => e.Name == "EffectiveDate").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseDeal()
		{ }
	}

	public class ReleaseDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Name> DisplayArtistNames { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public string IsMultiArtistCompilation { get; set; }
		public IList<AdministratingRecordCompany> AdministratingRecordCompanys { get; set; }
		public IList<ReleaseType> ReleaseTypes { get; set; }
		public IList<RelatedRelease> RelatedReleases { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<AvRating> AvRatings { get; set; }
		public Comment MarketingComment { get; set; }
		public IList<ResourceGroup> ResourceGroups { get; set; }
		public IList<Genre> Genres { get; set; }
		public EventDate OriginalReleaseDate { get; set; }
		public EventDate OriginalDigitalReleaseDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public IList<Character> Characters { get; set; }
		public string NumberOfUnitsPerPhysicalRelease { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ReleaseDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DisplayArtistNames = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).ToList();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			IsMultiArtistCompilation = element.Elements().Where(e => e.Name == "IsMultiArtistCompilation").Select(e => e.Value).SingleOrDefault();
			AdministratingRecordCompanys = element.Elements().Where(e => e.Name == "AdministratingRecordCompany").Select(e => new AdministratingRecordCompany(e)).ToList();
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			RelatedReleases = element.Elements().Where(e => e.Name == "RelatedRelease").Select(e => new RelatedRelease(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			AvRatings = element.Elements().Where(e => e.Name == "AvRating").Select(e => new AvRating(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault();
			ResourceGroups = element.Elements().Where(e => e.Name == "ResourceGroup").Select(e => new ResourceGroup(e)).ToList();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalDigitalReleaseDate = element.Elements().Where(e => e.Name == "OriginalDigitalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
			NumberOfUnitsPerPhysicalRelease = element.Elements().Where(e => e.Name == "NumberOfUnitsPerPhysicalRelease").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseDetailsByTerritory()
		{ }
	}

	public class ReleaseList
	{
		public IList<Release> Releases { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ReleaseList(XElement element)
		{
			Releases = element.Elements().Where(e => e.Name == "Release").Select(e => new Release(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseList()
		{ }
	}

	public class ResourceGroup
	{
		public IList<Title> Titles { get; set; }
		public string SequenceNumber { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<ResourceGroup> ResourceGroups { get; set; }
		public IList<ResourceGroupContentItem> ResourceGroupContentItems { get; set; }
		public ResourceGroupResourceReferenceList ResourceGroupResourceReferenceList { get; set; }
		public string ResourceGroupReleaseReference { get; set; }
		public ReleaseId ReleaseId { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ResourceGroup(XElement element)
		{
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			ResourceGroups = element.Elements().Where(e => e.Name == "ResourceGroup").Select(e => new ResourceGroup(e)).ToList();
			ResourceGroupContentItems = element.Elements().Where(e => e.Name == "ResourceGroupContentItem").Select(e => new ResourceGroupContentItem(e)).ToList();
			ResourceGroupResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceGroupResourceReferenceList").Select(e => new ResourceGroupResourceReferenceList(e)).SingleOrDefault();
			ResourceGroupReleaseReference = element.Elements().Where(e => e.Name == "ResourceGroupReleaseReference").Select(e => e.Value).SingleOrDefault();
			ReleaseId = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ResourceGroup()
		{ }
	}

	public class ResourceGroupContentItem
	{
		public string SequenceNumber { get; set; }
		public string SequenceSubNumber { get; set; }
		public IList<ResourceType> ResourceTypes { get; set; }
		public ReleaseResourceReference ReleaseResourceReference { get; set; }
		public IList<LinkedReleaseResourceReference> LinkedReleaseResourceReferences { get; set; }
		public string ResourceGroupContentItemReleaseReference { get; set; }
		public ReleaseId ReleaseId { get; set; }
		public string Duration { get; set; }
		public string IsHiddenResource { get; set; }
		public string IsBonusResource { get; set; }

		public ResourceGroupContentItem(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			SequenceSubNumber = element.Elements().Where(e => e.Name == "SequenceSubNumber").Select(e => e.Value).SingleOrDefault();
			ResourceTypes = element.Elements().Where(e => e.Name == "ResourceType").Select(e => new ResourceType(e)).ToList();
			ReleaseResourceReference = element.Elements().Where(e => e.Name == "ReleaseResourceReference").Select(e => new ReleaseResourceReference(e)).SingleOrDefault();
			LinkedReleaseResourceReferences = element.Elements().Where(e => e.Name == "LinkedReleaseResourceReference").Select(e => new LinkedReleaseResourceReference(e)).ToList();
			ResourceGroupContentItemReleaseReference = element.Elements().Where(e => e.Name == "ResourceGroupContentItemReleaseReference").Select(e => e.Value).SingleOrDefault();
			ReleaseId = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => e.Value).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceGroupContentItem()
		{ }
	}

	public class ResourceList
	{
		public IList<SoundRecording> SoundRecordings { get; set; }
		public IList<MIDI> MIDIs { get; set; }
		public IList<Video> Videos { get; set; }
		public IList<Image> Images { get; set; }
		public IList<Text> Texts { get; set; }
		public IList<SheetMusic> SheetMusics { get; set; }
		public IList<Software> Softwares { get; set; }
		public IList<UserDefinedResource> UserDefinedResources { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ResourceList(XElement element)
		{
			SoundRecordings = element.Elements().Where(e => e.Name == "SoundRecording").Select(e => new SoundRecording(e)).ToList();
			MIDIs = element.Elements().Where(e => e.Name == "MIDI").Select(e => new MIDI(e)).ToList();
			Videos = element.Elements().Where(e => e.Name == "Video").Select(e => new Video(e)).ToList();
			Images = element.Elements().Where(e => e.Name == "Image").Select(e => new Image(e)).ToList();
			Texts = element.Elements().Where(e => e.Name == "Text").Select(e => new Text(e)).ToList();
			SheetMusics = element.Elements().Where(e => e.Name == "SheetMusic").Select(e => new SheetMusic(e)).ToList();
			Softwares = element.Elements().Where(e => e.Name == "Software").Select(e => new Software(e)).ToList();
			UserDefinedResources = element.Elements().Where(e => e.Name == "UserDefinedResource").Select(e => new UserDefinedResource(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ResourceList()
		{ }
	}

	public class ResourceUsage
	{
		public IList<string> DealResourceReferences { get; set; }
		public IList<Usage> Usages { get; set; }

		public ResourceUsage(XElement element)
		{
			DealResourceReferences = element.Elements().Where(e => e.Name == "DealResourceReference").Select(e => e.Value).ToList();
			Usages = element.Elements().Where(e => e.Name == "Usage").Select(e => new Usage(e)).ToList();
		}

		public ResourceUsage()
		{ }
	}

	public class RightsClaimPolicy
	{
		public Condition Condition { get; set; }
		public string RightsClaimPolicyType { get; set; }

		public RightsClaimPolicy(XElement element)
		{
			Condition = element.Elements().Where(e => e.Name == "Condition").Select(e => new Condition(e)).SingleOrDefault();
			RightsClaimPolicyType = element.Elements().Where(e => e.Name == "RightsClaimPolicyType").Select(e => e.Value).SingleOrDefault();
		}

		public RightsClaimPolicy()
		{ }
	}

	public class SheetMusic
	{
		public SheetMusicType SheetMusicType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<SheetMusicId> SheetMusicIds { get; set; }
		public IList<MusicalWorkId> IndirectSheetMusicIds { get; set; }
		public string ResourceReference { get; set; }
		public string LanguageOfLyrics { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public ReferenceTitle ReferenceTitle { get; set; }
		public EventDate CreationDate { get; set; }
		public IList<SheetMusicDetailsByTerritory> SheetMusicDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SheetMusic(XElement element)
		{
			SheetMusicType = element.Elements().Where(e => e.Name == "SheetMusicType").Select(e => new SheetMusicType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			SheetMusicIds = element.Elements().Where(e => e.Name == "SheetMusicId").Select(e => new SheetMusicId(e)).ToList();
			IndirectSheetMusicIds = element.Elements().Where(e => e.Name == "IndirectSheetMusicId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			LanguageOfLyrics = element.Elements().Where(e => e.Name == "LanguageOfLyrics").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			SheetMusicDetailsByTerritorys = element.Elements().Where(e => e.Name == "SheetMusicDetailsByTerritory").Select(e => new SheetMusicDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SheetMusic()
		{ }
	}

	public class SheetMusicDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<CLine> CLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<TechnicalSheetMusicDetails> TechnicalSheetMusicDetails { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SheetMusicDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalSheetMusicDetails = element.Elements().Where(e => e.Name == "TechnicalSheetMusicDetails").Select(e => new TechnicalSheetMusicDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SheetMusicDetailsByTerritory()
		{ }
	}

	public class Software
	{
		public SoftwareType SoftwareType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<SoftwareId> SoftwareIds { get; set; }
		public IList<MusicalWorkId> IndirectSoftwareIds { get; set; }
		public string ResourceReference { get; set; }
		public ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public IList<Title> Titles { get; set; }
		public EventDate CreationDate { get; set; }
		public IList<SoftwareDetailsByTerritory> SoftwareDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Software(XElement element)
		{
			SoftwareType = element.Elements().Where(e => e.Name == "SoftwareType").Select(e => new SoftwareType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			SoftwareIds = element.Elements().Where(e => e.Name == "SoftwareId").Select(e => new SoftwareId(e)).ToList();
			IndirectSoftwareIds = element.Elements().Where(e => e.Name == "IndirectSoftwareId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			SoftwareDetailsByTerritorys = element.Elements().Where(e => e.Name == "SoftwareDetailsByTerritory").Select(e => new SoftwareDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Software()
		{ }
	}

	public class SoftwareDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<TechnicalSoftwareDetails> TechnicalSoftwareDetails { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SoftwareDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalSoftwareDetails = element.Elements().Where(e => e.Name == "TechnicalSoftwareDetails").Select(e => new TechnicalSoftwareDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SoftwareDetailsByTerritory()
		{ }
	}

	public class SoundRecording
	{
		public SoundRecordingType SoundRecordingType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<SoundRecordingId> SoundRecordingIds { get; set; }
		public IList<MusicalWorkId> IndirectSoundRecordingIds { get; set; }
		public string ResourceReference { get; set; }
		public ReferenceTitle ReferenceTitle { get; set; }
		public Description InstrumentationDescription { get; set; }
		public string IsMedley { get; set; }
		public string IsPotpourri { get; set; }
		public string IsInstrumental { get; set; }
		public string IsBackground { get; set; }
		public string IsHiddenResource { get; set; }
		public string IsBonusResource { get; set; }
		public string IsComputerGenerated { get; set; }
		public string NoSilenceBefore { get; set; }
		public string NoSilenceAfter { get; set; }
		public string PerformerInformationRequired { get; set; }
		public string LanguageOfPerformance { get; set; }
		public string Duration { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public SoundRecordingCollectionReferenceList SoundRecordingCollectionReferenceList { get; set; }
		public ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public EventDate CreationDate { get; set; }
		public EventDate MasteredDate { get; set; }
		public IList<SoundRecordingDetailsByTerritory> SoundRecordingDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SoundRecording(XElement element)
		{
			SoundRecordingType = element.Elements().Where(e => e.Name == "SoundRecordingType").Select(e => new SoundRecordingType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			SoundRecordingIds = element.Elements().Where(e => e.Name == "SoundRecordingId").Select(e => new SoundRecordingId(e)).ToList();
			IndirectSoundRecordingIds = element.Elements().Where(e => e.Name == "IndirectSoundRecordingId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			InstrumentationDescription = element.Elements().Where(e => e.Name == "InstrumentationDescription").Select(e => new Description(e)).SingleOrDefault();
			IsMedley = element.Elements().Where(e => e.Name == "IsMedley").Select(e => e.Value).SingleOrDefault();
			IsPotpourri = element.Elements().Where(e => e.Name == "IsPotpourri").Select(e => e.Value).SingleOrDefault();
			IsInstrumental = element.Elements().Where(e => e.Name == "IsInstrumental").Select(e => e.Value).SingleOrDefault();
			IsBackground = element.Elements().Where(e => e.Name == "IsBackground").Select(e => e.Value).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => e.Value).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => e.Value).SingleOrDefault();
			IsComputerGenerated = element.Elements().Where(e => e.Name == "IsComputerGenerated").Select(e => e.Value).SingleOrDefault();
			NoSilenceBefore = element.Elements().Where(e => e.Name == "NoSilenceBefore").Select(e => e.Value).SingleOrDefault();
			NoSilenceAfter = element.Elements().Where(e => e.Name == "NoSilenceAfter").Select(e => e.Value).SingleOrDefault();
			PerformerInformationRequired = element.Elements().Where(e => e.Name == "PerformerInformationRequired").Select(e => e.Value).SingleOrDefault();
			LanguageOfPerformance = element.Elements().Where(e => e.Name == "LanguageOfPerformance").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			SoundRecordingCollectionReferenceList = element.Elements().Where(e => e.Name == "SoundRecordingCollectionReferenceList").Select(e => new SoundRecordingCollectionReferenceList(e)).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			MasteredDate = element.Elements().Where(e => e.Name == "MasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			SoundRecordingDetailsByTerritorys = element.Elements().Where(e => e.Name == "SoundRecordingDetailsByTerritory").Select(e => new SoundRecordingDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SoundRecording()
		{ }
	}

	public class SoundRecordingDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public IList<RightsController> RightsControllers { get; set; }
		public EventDate RemasteredDate { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public IList<PLine> PLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public string SequenceNumber { get; set; }
		public IList<HostSoundCarrier> HostSoundCarriers { get; set; }
		public Comment MarketingComment { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<AvRating> AvRatings { get; set; }
		public IList<TechnicalSoundRecordingDetails> TechnicalSoundRecordingDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SoundRecordingDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			HostSoundCarriers = element.Elements().Where(e => e.Name == "HostSoundCarrier").Select(e => new HostSoundCarrier(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			AvRatings = element.Elements().Where(e => e.Name == "AvRating").Select(e => new AvRating(e)).ToList();
			TechnicalSoundRecordingDetails = element.Elements().Where(e => e.Name == "TechnicalSoundRecordingDetails").Select(e => new TechnicalSoundRecordingDetails(e)).ToList();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SoundRecordingDetailsByTerritory()
		{ }
	}

	public class SoundRecordingPreviewDetails
	{
		public Description PartType { get; set; }
		public string StartPoint { get; set; }
		public string EndPoint { get; set; }
		public string Duration { get; set; }
		public string TopLeftCorner { get; set; }
		public string BottomRightCorner { get; set; }
		public string ExpressionType { get; set; }

		public SoundRecordingPreviewDetails(XElement element)
		{
			PartType = element.Elements().Where(e => e.Name == "PartType").Select(e => new Description(e)).SingleOrDefault();
			StartPoint = element.Elements().Where(e => e.Name == "StartPoint").Select(e => e.Value).SingleOrDefault();
			EndPoint = element.Elements().Where(e => e.Name == "EndPoint").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			TopLeftCorner = element.Elements().Where(e => e.Name == "TopLeftCorner").Select(e => e.Value).SingleOrDefault();
			BottomRightCorner = element.Elements().Where(e => e.Name == "BottomRightCorner").Select(e => e.Value).SingleOrDefault();
			ExpressionType = element.Elements().Where(e => e.Name == "ExpressionType").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecordingPreviewDetails()
		{ }
	}

	public class TechnicalImageDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public DrmPlatformType DrmPlatformType { get; set; }
		public ContainerFormat ContainerFormat { get; set; }
		public ImageCodecType ImageCodecType { get; set; }
		public Extent ImageHeight { get; set; }
		public Extent ImageWidth { get; set; }
		public string AspectRatio { get; set; }
		public string ColorDepth { get; set; }
		public string ImageResolution { get; set; }
		public string IsPreview { get; set; }
		public PreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalImageDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault();
			ImageCodecType = element.Elements().Where(e => e.Name == "ImageCodecType").Select(e => new ImageCodecType(e)).SingleOrDefault();
			ImageHeight = element.Elements().Where(e => e.Name == "ImageHeight").Select(e => new Extent(e)).SingleOrDefault();
			ImageWidth = element.Elements().Where(e => e.Name == "ImageWidth").Select(e => new Extent(e)).SingleOrDefault();
			AspectRatio = element.Elements().Where(e => e.Name == "AspectRatio").Select(e => e.Value).SingleOrDefault();
			ColorDepth = element.Elements().Where(e => e.Name == "ColorDepth").Select(e => e.Value).SingleOrDefault();
			ImageResolution = element.Elements().Where(e => e.Name == "ImageResolution").Select(e => e.Value).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalImageDetails()
		{ }
	}

	public class TechnicalMidiDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public string Duration { get; set; }
		public string ResourceProcessingRequired { get; set; }
		public string UsableResourceDuration { get; set; }
		public string IsPreview { get; set; }
		public SoundRecordingPreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public string NumberOfVoices { get; set; }
		public SoundProcessorType SoundProcessorType { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalMidiDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			ResourceProcessingRequired = element.Elements().Where(e => e.Name == "ResourceProcessingRequired").Select(e => e.Value).SingleOrDefault();
			UsableResourceDuration = element.Elements().Where(e => e.Name == "UsableResourceDuration").Select(e => e.Value).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new SoundRecordingPreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			NumberOfVoices = element.Elements().Where(e => e.Name == "NumberOfVoices").Select(e => e.Value).SingleOrDefault();
			SoundProcessorType = element.Elements().Where(e => e.Name == "SoundProcessorType").Select(e => new SoundProcessorType(e)).SingleOrDefault();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalMidiDetails()
		{ }
	}

	public class TechnicalSheetMusicDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public DrmPlatformType DrmPlatformType { get; set; }
		public ContainerFormat ContainerFormat { get; set; }
		public SheetMusicCodecType SheetMusicCodecType { get; set; }
		public string IsPreview { get; set; }
		public PreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalSheetMusicDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault();
			SheetMusicCodecType = element.Elements().Where(e => e.Name == "SheetMusicCodecType").Select(e => new SheetMusicCodecType(e)).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalSheetMusicDetails()
		{ }
	}

	public class TechnicalSoftwareDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public DrmPlatformType DrmPlatformType { get; set; }
		public OperatingSystemType OperatingSystemType { get; set; }
		public string IsPreview { get; set; }
		public PreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalSoftwareDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault();
			OperatingSystemType = element.Elements().Where(e => e.Name == "OperatingSystemType").Select(e => new OperatingSystemType(e)).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalSoftwareDetails()
		{ }
	}

	public class TechnicalSoundRecordingDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public DrmPlatformType DrmPlatformType { get; set; }
		public ContainerFormat ContainerFormat { get; set; }
		public AudioCodecType AudioCodecType { get; set; }
		public BitRate BitRate { get; set; }
		public string NumberOfChannels { get; set; }
		public SamplingRate SamplingRate { get; set; }
		public string BitsPerSample { get; set; }
		public string Duration { get; set; }
		public string ResourceProcessingRequired { get; set; }
		public string UsableResourceDuration { get; set; }
		public string IsPreview { get; set; }
		public SoundRecordingPreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalSoundRecordingDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault();
			AudioCodecType = element.Elements().Where(e => e.Name == "AudioCodecType").Select(e => new AudioCodecType(e)).SingleOrDefault();
			BitRate = element.Elements().Where(e => e.Name == "BitRate").Select(e => new BitRate(e)).SingleOrDefault();
			NumberOfChannels = element.Elements().Where(e => e.Name == "NumberOfChannels").Select(e => e.Value).SingleOrDefault();
			SamplingRate = element.Elements().Where(e => e.Name == "SamplingRate").Select(e => new SamplingRate(e)).SingleOrDefault();
			BitsPerSample = element.Elements().Where(e => e.Name == "BitsPerSample").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			ResourceProcessingRequired = element.Elements().Where(e => e.Name == "ResourceProcessingRequired").Select(e => e.Value).SingleOrDefault();
			UsableResourceDuration = element.Elements().Where(e => e.Name == "UsableResourceDuration").Select(e => e.Value).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new SoundRecordingPreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalSoundRecordingDetails()
		{ }
	}

	public class TechnicalTextDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public DrmPlatformType DrmPlatformType { get; set; }
		public ContainerFormat ContainerFormat { get; set; }
		public TextCodecType TextCodecType { get; set; }
		public string IsPreview { get; set; }
		public PreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalTextDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault();
			TextCodecType = element.Elements().Where(e => e.Name == "TextCodecType").Select(e => new TextCodecType(e)).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalTextDetails()
		{ }
	}

	public class TechnicalUserDefinedResourceDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public IList<UserDefinedValue> UserDefinedValues { get; set; }
		public string IsPreview { get; set; }
		public PreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalUserDefinedResourceDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new PreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalUserDefinedResourceDetails()
		{ }
	}

	public class TechnicalVideoDetails
	{
		public string TechnicalResourceDetailsReference { get; set; }
		public DrmPlatformType DrmPlatformType { get; set; }
		public BitRate OverallBitRate { get; set; }
		public ContainerFormat ContainerFormat { get; set; }
		public VideoCodecType VideoCodecType { get; set; }
		public BitRate VideoBitRate { get; set; }
		public FrameRate FrameRate { get; set; }
		public Extent ImageHeight { get; set; }
		public Extent ImageWidth { get; set; }
		public string AspectRatio { get; set; }
		public string ColorDepth { get; set; }
		public string VideoDefinitionType { get; set; }
		public AudioCodecType AudioCodecType { get; set; }
		public BitRate AudioBitRate { get; set; }
		public string NumberOfAudioChannels { get; set; }
		public SamplingRate AudioSamplingRate { get; set; }
		public string AudioBitsPerSample { get; set; }
		public string Duration { get; set; }
		public string ResourceProcessingRequired { get; set; }
		public string UsableResourceDuration { get; set; }
		public string IsPreview { get; set; }
		public SoundRecordingPreviewDetails PreviewDetails { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public FulfillmentDate ConsumerFulfillmentDate { get; set; }
		public IList<Description> FileAvailabilityDescriptions { get; set; }
		public IList<File> Files { get; set; }
		public IList<Fingerprint> Fingerprints { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TechnicalVideoDetails(XElement element)
		{
			TechnicalResourceDetailsReference = element.Elements().Where(e => e.Name == "TechnicalResourceDetailsReference").Select(e => e.Value).SingleOrDefault();
			DrmPlatformType = element.Elements().Where(e => e.Name == "DrmPlatformType").Select(e => new DrmPlatformType(e)).SingleOrDefault();
			OverallBitRate = element.Elements().Where(e => e.Name == "OverallBitRate").Select(e => new BitRate(e)).SingleOrDefault();
			ContainerFormat = element.Elements().Where(e => e.Name == "ContainerFormat").Select(e => new ContainerFormat(e)).SingleOrDefault();
			VideoCodecType = element.Elements().Where(e => e.Name == "VideoCodecType").Select(e => new VideoCodecType(e)).SingleOrDefault();
			VideoBitRate = element.Elements().Where(e => e.Name == "VideoBitRate").Select(e => new BitRate(e)).SingleOrDefault();
			FrameRate = element.Elements().Where(e => e.Name == "FrameRate").Select(e => new FrameRate(e)).SingleOrDefault();
			ImageHeight = element.Elements().Where(e => e.Name == "ImageHeight").Select(e => new Extent(e)).SingleOrDefault();
			ImageWidth = element.Elements().Where(e => e.Name == "ImageWidth").Select(e => new Extent(e)).SingleOrDefault();
			AspectRatio = element.Elements().Where(e => e.Name == "AspectRatio").Select(e => e.Value).SingleOrDefault();
			ColorDepth = element.Elements().Where(e => e.Name == "ColorDepth").Select(e => e.Value).SingleOrDefault();
			VideoDefinitionType = element.Elements().Where(e => e.Name == "VideoDefinitionType").Select(e => e.Value).SingleOrDefault();
			AudioCodecType = element.Elements().Where(e => e.Name == "AudioCodecType").Select(e => new AudioCodecType(e)).SingleOrDefault();
			AudioBitRate = element.Elements().Where(e => e.Name == "AudioBitRate").Select(e => new BitRate(e)).SingleOrDefault();
			NumberOfAudioChannels = element.Elements().Where(e => e.Name == "NumberOfAudioChannels").Select(e => e.Value).SingleOrDefault();
			AudioSamplingRate = element.Elements().Where(e => e.Name == "AudioSamplingRate").Select(e => new SamplingRate(e)).SingleOrDefault();
			AudioBitsPerSample = element.Elements().Where(e => e.Name == "AudioBitsPerSample").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			ResourceProcessingRequired = element.Elements().Where(e => e.Name == "ResourceProcessingRequired").Select(e => e.Value).SingleOrDefault();
			UsableResourceDuration = element.Elements().Where(e => e.Name == "UsableResourceDuration").Select(e => e.Value).SingleOrDefault();
			IsPreview = element.Elements().Where(e => e.Name == "IsPreview").Select(e => e.Value).SingleOrDefault();
			PreviewDetails = element.Elements().Where(e => e.Name == "PreviewDetails").Select(e => new SoundRecordingPreviewDetails(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			ConsumerFulfillmentDate = element.Elements().Where(e => e.Name == "ConsumerFulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			FileAvailabilityDescriptions = element.Elements().Where(e => e.Name == "FileAvailabilityDescription").Select(e => new Description(e)).ToList();
			Files = element.Elements().Where(e => e.Name == "File").Select(e => new File(e)).ToList();
			Fingerprints = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => new Fingerprint(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TechnicalVideoDetails()
		{ }
	}

	public class Text
	{
		public TextType TextType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<TextId> TextIds { get; set; }
		public IList<MusicalWorkId> IndirectTextIds { get; set; }
		public string ResourceReference { get; set; }
		public ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public IList<Title> Titles { get; set; }
		public EventDate CreationDate { get; set; }
		public IList<TextDetailsByTerritory> TextDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Text(XElement element)
		{
			TextType = element.Elements().Where(e => e.Name == "TextType").Select(e => new TextType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			TextIds = element.Elements().Where(e => e.Name == "TextId").Select(e => new TextId(e)).ToList();
			IndirectTextIds = element.Elements().Where(e => e.Name == "IndirectTextId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			TextDetailsByTerritorys = element.Elements().Where(e => e.Name == "TextDetailsByTerritory").Select(e => new TextDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Text()
		{ }
	}

	public class TextDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<CLine> CLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<TechnicalTextDetails> TechnicalTextDetails { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TextDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalTextDetails = element.Elements().Where(e => e.Name == "TechnicalTextDetails").Select(e => new TechnicalTextDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TextDetailsByTerritory()
		{ }
	}

	public class UserDefinedResource
	{
		public UserDefinedResourceType UserDefinedResourceType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<UserDefinedResourceId> UserDefinedResourceIds { get; set; }
		public IList<MusicalWorkId> IndirectUserDefinedResourceIds { get; set; }
		public string ResourceReference { get; set; }
		public ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<UserDefinedValue> UserDefinedValues { get; set; }
		public IList<UserDefinedResourceDetailsByTerritory> UserDefinedResourceDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public UserDefinedResource(XElement element)
		{
			UserDefinedResourceType = element.Elements().Where(e => e.Name == "UserDefinedResourceType").Select(e => new UserDefinedResourceType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			UserDefinedResourceIds = element.Elements().Where(e => e.Name == "UserDefinedResourceId").Select(e => new UserDefinedResourceId(e)).ToList();
			IndirectUserDefinedResourceIds = element.Elements().Where(e => e.Name == "IndirectUserDefinedResourceId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			UserDefinedResourceDetailsByTerritorys = element.Elements().Where(e => e.Name == "UserDefinedResourceDetailsByTerritory").Select(e => new UserDefinedResourceDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public UserDefinedResource()
		{ }
	}

	public class UserDefinedResourceDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<UserDefinedValue> UserDefinedValues { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<TechnicalUserDefinedResourceDetails> TechnicalUserDefinedResourceDetails { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public UserDefinedResourceDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			TechnicalUserDefinedResourceDetails = element.Elements().Where(e => e.Name == "TechnicalUserDefinedResourceDetails").Select(e => new TechnicalUserDefinedResourceDetails(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public UserDefinedResourceDetailsByTerritory()
		{ }
	}

	public class Video
	{
		public VideoType VideoType { get; set; }
		public string IsArtistRelated { get; set; }
		public IList<VideoId> VideoIds { get; set; }
		public IList<MusicalWorkId> IndirectVideoIds { get; set; }
		public string ResourceReference { get; set; }
		public IList<VideoCueSheetReference> VideoCueSheetReferences { get; set; }
		public Reason ReasonForCueSheetAbsence { get; set; }
		public ReferenceTitle ReferenceTitle { get; set; }
		public IList<Title> Titles { get; set; }
		public Description InstrumentationDescription { get; set; }
		public string IsMedley { get; set; }
		public string IsPotpourri { get; set; }
		public string IsInstrumental { get; set; }
		public string IsBackground { get; set; }
		public string IsHiddenResource { get; set; }
		public string IsBonusResource { get; set; }
		public string NoSilenceBefore { get; set; }
		public string NoSilenceAfter { get; set; }
		public string PerformerInformationRequired { get; set; }
		public IList<string> LanguageOfPerformances { get; set; }
		public string Duration { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public SoundRecordingCollectionReferenceList VideoCollectionReferenceList { get; set; }
		public ResourceMusicalWorkReferenceList ResourceMusicalWorkReferenceList { get; set; }
		public ResourceContainedResourceReferenceList ResourceContainedResourceReferenceList { get; set; }
		public EventDate CreationDate { get; set; }
		public EventDate MasteredDate { get; set; }
		public IList<VideoDetailsByTerritory> VideoDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Video(XElement element)
		{
			VideoType = element.Elements().Where(e => e.Name == "VideoType").Select(e => new VideoType(e)).SingleOrDefault();
			IsArtistRelated = element.Elements().Where(e => e.Name == "IsArtistRelated").Select(e => e.Value).SingleOrDefault();
			VideoIds = element.Elements().Where(e => e.Name == "VideoId").Select(e => new VideoId(e)).ToList();
			IndirectVideoIds = element.Elements().Where(e => e.Name == "IndirectVideoId").Select(e => new MusicalWorkId(e)).ToList();
			ResourceReference = element.Elements().Where(e => e.Name == "ResourceReference").Select(e => e.Value).SingleOrDefault();
			VideoCueSheetReferences = element.Elements().Where(e => e.Name == "VideoCueSheetReference").Select(e => new VideoCueSheetReference(e)).ToList();
			ReasonForCueSheetAbsence = element.Elements().Where(e => e.Name == "ReasonForCueSheetAbsence").Select(e => new Reason(e)).SingleOrDefault();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			InstrumentationDescription = element.Elements().Where(e => e.Name == "InstrumentationDescription").Select(e => new Description(e)).SingleOrDefault();
			IsMedley = element.Elements().Where(e => e.Name == "IsMedley").Select(e => e.Value).SingleOrDefault();
			IsPotpourri = element.Elements().Where(e => e.Name == "IsPotpourri").Select(e => e.Value).SingleOrDefault();
			IsInstrumental = element.Elements().Where(e => e.Name == "IsInstrumental").Select(e => e.Value).SingleOrDefault();
			IsBackground = element.Elements().Where(e => e.Name == "IsBackground").Select(e => e.Value).SingleOrDefault();
			IsHiddenResource = element.Elements().Where(e => e.Name == "IsHiddenResource").Select(e => e.Value).SingleOrDefault();
			IsBonusResource = element.Elements().Where(e => e.Name == "IsBonusResource").Select(e => e.Value).SingleOrDefault();
			NoSilenceBefore = element.Elements().Where(e => e.Name == "NoSilenceBefore").Select(e => e.Value).SingleOrDefault();
			NoSilenceAfter = element.Elements().Where(e => e.Name == "NoSilenceAfter").Select(e => e.Value).SingleOrDefault();
			PerformerInformationRequired = element.Elements().Where(e => e.Name == "PerformerInformationRequired").Select(e => e.Value).SingleOrDefault();
			LanguageOfPerformances = element.Elements().Where(e => e.Name == "LanguageOfPerformance").Select(e => e.Value).ToList();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			VideoCollectionReferenceList = element.Elements().Where(e => e.Name == "VideoCollectionReferenceList").Select(e => new SoundRecordingCollectionReferenceList(e)).SingleOrDefault();
			ResourceMusicalWorkReferenceList = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReferenceList").Select(e => new ResourceMusicalWorkReferenceList(e)).SingleOrDefault();
			ResourceContainedResourceReferenceList = element.Elements().Where(e => e.Name == "ResourceContainedResourceReferenceList").Select(e => new ResourceContainedResourceReferenceList(e)).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			MasteredDate = element.Elements().Where(e => e.Name == "MasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			VideoDetailsByTerritorys = element.Elements().Where(e => e.Name == "VideoDetailsByTerritory").Select(e => new VideoDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Video()
		{ }
	}

	public class VideoDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public IList<RightsController> RightsControllers { get; set; }
		public EventDate RemasteredDate { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public IList<PLine> PLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public string SequenceNumber { get; set; }
		public IList<HostSoundCarrier> HostSoundCarriers { get; set; }
		public Comment MarketingComment { get; set; }
		public IList<Genre> Genres { get; set; }
		public IList<ParentalWarningType> ParentalWarningTypes { get; set; }
		public IList<AvRating> AvRatings { get; set; }
		public FulfillmentDate FulfillmentDate { get; set; }
		public IList<Keywords> Keywords { get; set; }
		public Synopsis Synopsis { get; set; }
		public IList<CLine> CLines { get; set; }
		public IList<TechnicalVideoDetails> TechnicalVideoDetails { get; set; }
		public IList<Character> Characters { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public VideoDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			HostSoundCarriers = element.Elements().Where(e => e.Name == "HostSoundCarrier").Select(e => new HostSoundCarrier(e)).ToList();
			MarketingComment = element.Elements().Where(e => e.Name == "MarketingComment").Select(e => new Comment(e)).SingleOrDefault();
			Genres = element.Elements().Where(e => e.Name == "Genre").Select(e => new Genre(e)).ToList();
			ParentalWarningTypes = element.Elements().Where(e => e.Name == "ParentalWarningType").Select(e => new ParentalWarningType(e)).ToList();
			AvRatings = element.Elements().Where(e => e.Name == "AvRating").Select(e => new AvRating(e)).ToList();
			FulfillmentDate = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => new FulfillmentDate(e)).SingleOrDefault();
			Keywords = element.Elements().Where(e => e.Name == "Keywords").Select(e => new Keywords(e)).ToList();
			Synopsis = element.Elements().Where(e => e.Name == "Synopsis").Select(e => new Synopsis(e)).SingleOrDefault();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			TechnicalVideoDetails = element.Elements().Where(e => e.Name == "TechnicalVideoDetails").Select(e => new TechnicalVideoDetails(e)).ToList();
			Characters = element.Elements().Where(e => e.Name == "Character").Select(e => new Character(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public VideoDetailsByTerritory()
		{ }
	}

	public class WebPolicy
	{
		public Condition Condition { get; set; }
		public string AccessBlockingRequested { get; set; }
		public string AccessLimitation { get; set; }
		public string EmbeddingAllowed { get; set; }
		public string UserRatingAllowed { get; set; }
		public string UserCommentAllowed { get; set; }
		public string UserResponsesAllowed { get; set; }
		public string SyndicationAllowed { get; set; }

		public WebPolicy(XElement element)
		{
			Condition = element.Elements().Where(e => e.Name == "Condition").Select(e => new Condition(e)).SingleOrDefault();
			AccessBlockingRequested = element.Elements().Where(e => e.Name == "AccessBlockingRequested").Select(e => e.Value).SingleOrDefault();
			AccessLimitation = element.Elements().Where(e => e.Name == "AccessLimitation").Select(e => e.Value).SingleOrDefault();
			EmbeddingAllowed = element.Elements().Where(e => e.Name == "EmbeddingAllowed").Select(e => e.Value).SingleOrDefault();
			UserRatingAllowed = element.Elements().Where(e => e.Name == "UserRatingAllowed").Select(e => e.Value).SingleOrDefault();
			UserCommentAllowed = element.Elements().Where(e => e.Name == "UserCommentAllowed").Select(e => e.Value).SingleOrDefault();
			UserResponsesAllowed = element.Elements().Where(e => e.Name == "UserResponsesAllowed").Select(e => e.Value).SingleOrDefault();
			SyndicationAllowed = element.Elements().Where(e => e.Name == "SyndicationAllowed").Select(e => e.Value).SingleOrDefault();
		}

		public WebPolicy()
		{ }
	}

	public class AdditionalInformation
	{
		public override string ToString(){return Value;}
		public static implicit operator string(AdditionalInformation obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public AdditionalInformation(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public AdditionalInformation()
		{ }
	}

	public class AdministratingRecordCompany
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }
		public string Role { get; set; }

		public AdministratingRecordCompany(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
			Role = element.Attributes().Where(a=>a.Name=="Role").Select(a=>a.Value).FirstOrDefault();
		}

		public AdministratingRecordCompany()
		{ }
	}

	public class AmountByUseAndDistributionChannelType
	{
		public string Amount { get; set; }
		public IList<UseType> UseTypes { get; set; }
		public IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public IList<CarrierType> CarrierTypes { get; set; }

		public AmountByUseAndDistributionChannelType(XElement element)
		{
			Amount = element.Elements().Where(e => e.Name == "Amount").Select(e => e.Value).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public AmountByUseAndDistributionChannelType()
		{ }
	}

	public class AmountPerCollection
	{
		public string Amount { get; set; }
		public CollectionType CollectionType { get; set; }

		public AmountPerCollection(XElement element)
		{
			Amount = element.Elements().Where(e => e.Name == "Amount").Select(e => e.Value).SingleOrDefault();
			CollectionType = element.Elements().Where(e => e.Name == "CollectionType").Select(e => new CollectionType(e)).SingleOrDefault();
		}

		public AmountPerCollection()
		{ }
	}

	public class Annotation
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Annotation obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Annotation(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Annotation()
		{ }
	}

	public class AppliedRoyaltyRate
	{
		public override string ToString(){return Value;}
		public static implicit operator string(AppliedRoyaltyRate obj){return obj.Value;}

		public string Value { get; set; }
		public string ValueType { get; set; }
		public string RoyaltyRateType { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public AppliedRoyaltyRate(XElement element)
		{
			Value = element.Value;
			ValueType = element.Attributes().Where(a=>a.Name=="ValueType").Select(a=>a.Value).FirstOrDefault();
			RoyaltyRateType = element.Attributes().Where(a=>a.Name=="RoyaltyRateType").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public AppliedRoyaltyRate()
		{ }
	}

	public class Artist
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public IList<ArtistRole> ArtistRoles { get; set; }
		public string SequenceNumber { get; set; }

		public Artist(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			ArtistRoles = element.Elements().Where(e => e.Name == "ArtistRole").Select(e => new ArtistRole(e)).ToList();
			SequenceNumber = element.Attributes().Where(a=>a.Name=="SequenceNumber").Select(a=>a.Value).FirstOrDefault();
		}

		public Artist()
		{ }
	}

	public class ArtistRole
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ArtistRole obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ArtistRole(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ArtistRole()
		{ }
	}

	public class AudioCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(AudioCodecType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public AudioCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public AudioCodecType()
		{ }
	}

	public class AvRating
	{
		public string RatingText { get; set; }
		public RatingAgency RatingAgency { get; set; }

		public AvRating(XElement element)
		{
			RatingText = element.Elements().Where(e => e.Name == "RatingText").Select(e => e.Value).SingleOrDefault();
			RatingAgency = element.Elements().Where(e => e.Name == "RatingAgency").Select(e => new RatingAgency(e)).SingleOrDefault();
		}

		public AvRating()
		{ }
	}

	public class BitRate
	{
		public override string ToString(){return Value;}
		public static implicit operator string(BitRate obj){return obj.Value;}

		public string Value { get; set; }
		public string UnitOfMeasure { get; set; }

		public BitRate(XElement element)
		{
			Value = element.Value;
			UnitOfMeasure = element.Attributes().Where(a=>a.Name=="UnitOfMeasure").Select(a=>a.Value).FirstOrDefault();
		}

		public BitRate()
		{ }
	}

	public class CLine
	{
		public string Year { get; set; }
		public string CLineCompany { get; set; }
		public string CLineText { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public CLine(XElement element)
		{
			Year = element.Elements().Where(e => e.Name == "Year").Select(e => e.Value).SingleOrDefault();
			CLineCompany = element.Elements().Where(e => e.Name == "CLineCompany").Select(e => e.Value).SingleOrDefault();
			CLineText = element.Elements().Where(e => e.Name == "CLineText").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public CLine()
		{ }
	}

	public class CalculationType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CalculationType obj){return obj.Value;}

		public string Value { get; set; }
		public string SequenceNumber { get; set; }

		public CalculationType(XElement element)
		{
			Value = element.Value;
			SequenceNumber = element.Attributes().Where(a=>a.Name=="SequenceNumber").Select(a=>a.Value).FirstOrDefault();
		}

		public CalculationType()
		{ }
	}

	public class CarrierType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CarrierType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CarrierType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CarrierType()
		{ }
	}

	public class CatalogNumber
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CatalogNumber obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }

		public CatalogNumber(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
		}

		public CatalogNumber()
		{ }
	}

	public class CdProtectionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CdProtectionType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CdProtectionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CdProtectionType()
		{ }
	}

	public class Character
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public ResourceContributor ResourceContributor { get; set; }
		public string SequenceNumber { get; set; }

		public Character(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			ResourceContributor = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).SingleOrDefault();
			SequenceNumber = element.Attributes().Where(a=>a.Name=="SequenceNumber").Select(a=>a.Value).FirstOrDefault();
		}

		public Character()
		{ }
	}

	public class Collection1
	{
		public IList<CollectionId> CollectionIds { get; set; }
		public IList<CollectionType> CollectionTypes { get; set; }
		public string CollectionReference { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<ResourceContributor> Contributors { get; set; }
		public CollectionCollectionReferenceList CollectionCollectionReferenceList { get; set; }
		public string IsComplete { get; set; }
		public string DurationOfMusicalContent { get; set; }
		public EventDate CreationDate { get; set; }
		public EventDate OriginalReleaseDate { get; set; }
		public string OriginalLanguage { get; set; }
		public IList<CollectionDetailsByTerritory1> CollectionDetailsByTerritorys { get; set; }
		public CollectionResourceReferenceList1 CollectionResourceReferenceList { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Collection1(XElement element)
		{
			CollectionIds = element.Elements().Where(e => e.Name == "CollectionId").Select(e => new CollectionId(e)).ToList();
			CollectionTypes = element.Elements().Where(e => e.Name == "CollectionType").Select(e => new CollectionType(e)).ToList();
			CollectionReference = element.Elements().Where(e => e.Name == "CollectionReference").Select(e => e.Value).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			CollectionCollectionReferenceList = element.Elements().Where(e => e.Name == "CollectionCollectionReferenceList").Select(e => new CollectionCollectionReferenceList(e)).SingleOrDefault();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => e.Value).SingleOrDefault();
			DurationOfMusicalContent = element.Elements().Where(e => e.Name == "DurationOfMusicalContent").Select(e => e.Value).SingleOrDefault();
			CreationDate = element.Elements().Where(e => e.Name == "CreationDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalLanguage = element.Elements().Where(e => e.Name == "OriginalLanguage").Select(e => e.Value).SingleOrDefault();
			CollectionDetailsByTerritorys = element.Elements().Where(e => e.Name == "CollectionDetailsByTerritory").Select(e => new CollectionDetailsByTerritory1(e)).ToList();
			CollectionResourceReferenceList = element.Elements().Where(e => e.Name == "CollectionResourceReferenceList").Select(e => new CollectionResourceReferenceList1(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Collection1()
		{ }
	}

	public class CollectionCollectionReference
	{
		public string SequenceNumber { get; set; }
		public string CollectionCollectionReferenceProp { get; set; }
		public string StartTime { get; set; }
		public string Duration { get; set; }
		public string EndTime { get; set; }
		public string InclusionDate { get; set; }

		public CollectionCollectionReference(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			CollectionCollectionReferenceProp = element.Elements().Where(e => e.Name == "CollectionCollectionReference").Select(e => e.Value).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
			InclusionDate = element.Elements().Where(e => e.Name == "InclusionDate").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionCollectionReference()
		{ }
	}

	public class CollectionCollectionReferenceList
	{
		public string NumberOfCollections { get; set; }
		public IList<CollectionCollectionReference> CollectionCollectionReferences { get; set; }

		public CollectionCollectionReferenceList(XElement element)
		{
			NumberOfCollections = element.Elements().Where(e => e.Name == "NumberOfCollections").Select(e => e.Value).SingleOrDefault();
			CollectionCollectionReferences = element.Elements().Where(e => e.Name == "CollectionCollectionReference").Select(e => new CollectionCollectionReference(e)).ToList();
		}

		public CollectionCollectionReferenceList()
		{ }
	}

	public class CollectionDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<ResourceContributor> Contributors { get; set; }
		public string IsComplete { get; set; }

		public CollectionDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			Contributors = element.Elements().Where(e => e.Name == "Contributor").Select(e => new ResourceContributor(e)).ToList();
			IsComplete = element.Elements().Where(e => e.Name == "IsComplete").Select(e => e.Value).SingleOrDefault();
		}

		public CollectionDetailsByTerritory1()
		{ }
	}

	public class CollectionId
	{
		public string GRid { get; set; }
		public string ISRC { get; set; }
		public string ISAN { get; set; }
		public string VISAN { get; set; }
		public ICPN ICPN { get; set; }
		public CatalogNumber CatalogNumber { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public CollectionId(XElement element)
		{
			GRid = element.Elements().Where(e => e.Name == "GRid").Select(e => e.Value).SingleOrDefault();
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			ICPN = element.Elements().Where(e => e.Name == "ICPN").Select(e => new ICPN(e)).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public CollectionId()
		{ }
	}

	public class CollectionList1
	{
		public IList<Collection1> Collections { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public CollectionList1(XElement element)
		{
			Collections = element.Elements().Where(e => e.Name == "Collection").Select(e => new Collection1(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public CollectionList1()
		{ }
	}

	public class CollectionResourceReferenceList1
	{
		public IList<string> CollectionResourceReferences { get; set; }

		public CollectionResourceReferenceList1(XElement element)
		{
			CollectionResourceReferences = element.Elements().Where(e => e.Name == "CollectionResourceReference").Select(e => e.Value).ToList();
		}

		public CollectionResourceReferenceList1()
		{ }
	}

	public class CollectionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CollectionType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CollectionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CollectionType()
		{ }
	}

	public class Comment
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Comment obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Comment(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Comment()
		{ }
	}

	public class CommercialModelType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CommercialModelType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CommercialModelType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CommercialModelType()
		{ }
	}

	public class ConsumerRentalPeriod
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ConsumerRentalPeriod obj){return obj.Value;}

		public string Value { get; set; }
		public string IsExtensible { get; set; }

		public ConsumerRentalPeriod(XElement element)
		{
			Value = element.Value;
			IsExtensible = element.Attributes().Where(a=>a.Name=="IsExtensible").Select(a=>a.Value).FirstOrDefault();
		}

		public ConsumerRentalPeriod()
		{ }
	}

	public class ContainerFormat
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ContainerFormat obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ContainerFormat(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ContainerFormat()
		{ }
	}

	public class CourtesyLine
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CourtesyLine obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public CourtesyLine(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public CourtesyLine()
		{ }
	}

	public class CreationId
	{
		public string ISWC { get; set; }
		public string OpusNumber { get; set; }
		public IList<string> ComposerCatalogNumbers { get; set; }
		public string ISRC { get; set; }
		public string ISMN { get; set; }
		public string ISAN { get; set; }
		public string VISAN { get; set; }
		public string ISBN { get; set; }
		public string ISSN { get; set; }
		public string SICI { get; set; }
		public CatalogNumber CatalogNumber { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }

		public CreationId(XElement element)
		{
			ISWC = element.Elements().Where(e => e.Name == "ISWC").Select(e => e.Value).SingleOrDefault();
			OpusNumber = element.Elements().Where(e => e.Name == "OpusNumber").Select(e => e.Value).SingleOrDefault();
			ComposerCatalogNumbers = element.Elements().Where(e => e.Name == "ComposerCatalogNumber").Select(e => e.Value).ToList();
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISMN = element.Elements().Where(e => e.Name == "ISMN").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			ISBN = element.Elements().Where(e => e.Name == "ISBN").Select(e => e.Value).SingleOrDefault();
			ISSN = element.Elements().Where(e => e.Name == "ISSN").Select(e => e.Value).SingleOrDefault();
			SICI = element.Elements().Where(e => e.Name == "SICI").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
		}

		public CreationId()
		{ }
	}

	public class Cue1
	{
		public CueUseType CueUseType { get; set; }
		public CueThemeType CueThemeType { get; set; }
		public CueVocalType CueVocalType { get; set; }
		public string IsDance { get; set; }
		public CueVisualPerceptionType CueVisualPerceptionType { get; set; }
		public CueOrigin CueOrigin { get; set; }
		public IList<CueCreationReference> CueCreationReferences { get; set; }
		public string ReferencedCreationType { get; set; }
		public CreationId ReferencedCreationId { get; set; }
		public IList<Title> ReferencedCreationTitles { get; set; }
		public IList<ResourceContributor> ReferencedCreationContributors { get; set; }
		public string HasMusicalContent { get; set; }
		public string StartTime { get; set; }
		public string Duration { get; set; }
		public string EndTime { get; set; }

		public Cue1(XElement element)
		{
			CueUseType = element.Elements().Where(e => e.Name == "CueUseType").Select(e => new CueUseType(e)).SingleOrDefault();
			CueThemeType = element.Elements().Where(e => e.Name == "CueThemeType").Select(e => new CueThemeType(e)).SingleOrDefault();
			CueVocalType = element.Elements().Where(e => e.Name == "CueVocalType").Select(e => new CueVocalType(e)).SingleOrDefault();
			IsDance = element.Elements().Where(e => e.Name == "IsDance").Select(e => e.Value).SingleOrDefault();
			CueVisualPerceptionType = element.Elements().Where(e => e.Name == "CueVisualPerceptionType").Select(e => new CueVisualPerceptionType(e)).SingleOrDefault();
			CueOrigin = element.Elements().Where(e => e.Name == "CueOrigin").Select(e => new CueOrigin(e)).SingleOrDefault();
			CueCreationReferences = element.Elements().Where(e => e.Name == "CueCreationReference").Select(e => new CueCreationReference(e)).ToList();
			ReferencedCreationType = element.Elements().Where(e => e.Name == "ReferencedCreationType").Select(e => e.Value).SingleOrDefault();
			ReferencedCreationId = element.Elements().Where(e => e.Name == "ReferencedCreationId").Select(e => new CreationId(e)).SingleOrDefault();
			ReferencedCreationTitles = element.Elements().Where(e => e.Name == "ReferencedCreationTitle").Select(e => new Title(e)).ToList();
			ReferencedCreationContributors = element.Elements().Where(e => e.Name == "ReferencedCreationContributor").Select(e => new ResourceContributor(e)).ToList();
			HasMusicalContent = element.Elements().Where(e => e.Name == "HasMusicalContent").Select(e => e.Value).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
		}

		public Cue1()
		{ }
	}

	public class CueCreationReference
	{
		public string CueWorkReference { get; set; }
		public string CueResourceReference { get; set; }

		public CueCreationReference(XElement element)
		{
			CueWorkReference = element.Elements().Where(e => e.Name == "CueWorkReference").Select(e => e.Value).SingleOrDefault();
			CueResourceReference = element.Elements().Where(e => e.Name == "CueResourceReference").Select(e => e.Value).SingleOrDefault();
		}

		public CueCreationReference()
		{ }
	}

	public class CueOrigin
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueOrigin obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CueOrigin(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CueOrigin()
		{ }
	}

	public class CueSheet1
	{
		public IList<ProprietaryId> CueSheetIds { get; set; }
		public string CueSheetReference { get; set; }
		public CueSheetType CueSheetType { get; set; }
		public IList<Cue1> Cues { get; set; }

		public CueSheet1(XElement element)
		{
			CueSheetIds = element.Elements().Where(e => e.Name == "CueSheetId").Select(e => new ProprietaryId(e)).ToList();
			CueSheetReference = element.Elements().Where(e => e.Name == "CueSheetReference").Select(e => e.Value).SingleOrDefault();
			CueSheetType = element.Elements().Where(e => e.Name == "CueSheetType").Select(e => new CueSheetType(e)).SingleOrDefault();
			Cues = element.Elements().Where(e => e.Name == "Cue").Select(e => new Cue1(e)).ToList();
		}

		public CueSheet1()
		{ }
	}

	public class CueSheetList1
	{
		public IList<CueSheet1> CueSheets { get; set; }

		public CueSheetList1(XElement element)
		{
			CueSheets = element.Elements().Where(e => e.Name == "CueSheet").Select(e => new CueSheet1(e)).ToList();
		}

		public CueSheetList1()
		{ }
	}

	public class CueSheetType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueSheetType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CueSheetType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CueSheetType()
		{ }
	}

	public class CueThemeType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueThemeType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CueThemeType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CueThemeType()
		{ }
	}

	public class CueUseType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueUseType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CueUseType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CueUseType()
		{ }
	}

	public class CueVisualPerceptionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueVisualPerceptionType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CueVisualPerceptionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CueVisualPerceptionType()
		{ }
	}

	public class CueVocalType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(CueVocalType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public CueVocalType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public CueVocalType()
		{ }
	}

	public class DSP
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public Name TradingName { get; set; }
		public IList<string> URLs { get; set; }
		public string TerritoryCode { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public DSP(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			TradingName = element.Elements().Where(e => e.Name == "TradingName").Select(e => new Name(e)).SingleOrDefault();
			URLs = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).ToList();
			TerritoryCode = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public DSP()
		{ }
	}

	public class DealReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DealReference obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public DealReference(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public DealReference()
		{ }
	}

	public class DeductionRate
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DeductionRate obj){return obj.Value;}

		public string Value { get; set; }
		public string DeductionRateType { get; set; }
		public string DeductionDescription { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public DeductionRate(XElement element)
		{
			Value = element.Value;
			DeductionRateType = element.Attributes().Where(a=>a.Name=="DeductionRateType").Select(a=>a.Value).FirstOrDefault();
			DeductionDescription = element.Attributes().Where(a=>a.Name=="DeductionDescription").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public DeductionRate()
		{ }
	}

	public class Description
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Description obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Description(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Description()
		{ }
	}

	public class DistributionChannelDescriptor
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DistributionChannelDescriptor obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public DistributionChannelDescriptor(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public DistributionChannelDescriptor()
		{ }
	}

	public class DistributionChannelType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DistributionChannelType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public DistributionChannelType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public DistributionChannelType()
		{ }
	}

	public class DrmPlatformType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(DrmPlatformType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public DrmPlatformType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public DrmPlatformType()
		{ }
	}

	public class DurationByUseType
	{
		public string Duration { get; set; }
		public IList<UseType> UseTypes { get; set; }
		public IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public IList<CarrierType> CarrierTypes { get; set; }

		public DurationByUseType(XElement element)
		{
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public DurationByUseType()
		{ }
	}

	public class ErnMessageInBatch
	{
		public string MessageType { get; set; }
		public string MessageId { get; set; }
		public string URL { get; set; }
		public IList<ReleaseId> IncludedReleaseIds { get; set; }
		public MessageActionType DeliveryType { get; set; }
		public ProductType ProductType { get; set; }
		public HashSum HashSum { get; set; }
		public string Signature { get; set; }

		public ErnMessageInBatch(XElement element)
		{
			MessageType = element.Elements().Where(e => e.Name == "MessageType").Select(e => e.Value).SingleOrDefault();
			MessageId = element.Elements().Where(e => e.Name == "MessageId").Select(e => e.Value).SingleOrDefault();
			URL = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).SingleOrDefault();
			IncludedReleaseIds = element.Elements().Where(e => e.Name == "IncludedReleaseId").Select(e => new ReleaseId(e)).ToList();
			DeliveryType = element.Elements().Where(e => e.Name == "DeliveryType").Select(e => new MessageActionType(e)).SingleOrDefault();
			ProductType = element.Elements().Where(e => e.Name == "ProductType").Select(e => new ProductType(e)).SingleOrDefault();
			HashSum = element.Elements().Where(e => e.Name == "HashSum").Select(e => new HashSum(e)).SingleOrDefault();
			Signature = element.Elements().Where(e => e.Name == "Signature").Select(e => e.Value).SingleOrDefault();
		}

		public ErnMessageInBatch()
		{ }
	}

	public class EventDate
	{
		public override string ToString(){return Value;}
		public static implicit operator string(EventDate obj){return obj.Value;}

		public string Value { get; set; }
		public string IsApproximate { get; set; }
		public string IsBefore { get; set; }
		public string IsAfter { get; set; }
		public string TerritoryCode { get; set; }
		public string LocationDescription { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public EventDate(XElement element)
		{
			Value = element.Value;
			IsApproximate = element.Attributes().Where(a=>a.Name=="IsApproximate").Select(a=>a.Value).FirstOrDefault();
			IsBefore = element.Attributes().Where(a=>a.Name=="IsBefore").Select(a=>a.Value).FirstOrDefault();
			IsAfter = element.Attributes().Where(a=>a.Name=="IsAfter").Select(a=>a.Value).FirstOrDefault();
			TerritoryCode = element.Attributes().Where(a=>a.Name=="TerritoryCode").Select(a=>a.Value).FirstOrDefault();
			LocationDescription = element.Attributes().Where(a=>a.Name=="LocationDescription").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public EventDate()
		{ }
	}

	public class EventDateTime
	{
		public override string ToString(){return Value;}
		public static implicit operator string(EventDateTime obj){return obj.Value;}

		public string Value { get; set; }
		public string IsApproximate { get; set; }
		public string IsBefore { get; set; }
		public string IsAfter { get; set; }
		public string TerritoryCode { get; set; }
		public string LocationDescription { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public EventDateTime(XElement element)
		{
			Value = element.Value;
			IsApproximate = element.Attributes().Where(a=>a.Name=="IsApproximate").Select(a=>a.Value).FirstOrDefault();
			IsBefore = element.Attributes().Where(a=>a.Name=="IsBefore").Select(a=>a.Value).FirstOrDefault();
			IsAfter = element.Attributes().Where(a=>a.Name=="IsAfter").Select(a=>a.Value).FirstOrDefault();
			TerritoryCode = element.Attributes().Where(a=>a.Name=="TerritoryCode").Select(a=>a.Value).FirstOrDefault();
			LocationDescription = element.Attributes().Where(a=>a.Name=="LocationDescription").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public EventDateTime()
		{ }
	}

	public class Extent
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Extent obj){return obj.Value;}

		public string Value { get; set; }
		public string UnitOfMeasure { get; set; }

		public Extent(XElement element)
		{
			Value = element.Value;
			UnitOfMeasure = element.Attributes().Where(a=>a.Name=="UnitOfMeasure").Select(a=>a.Value).FirstOrDefault();
		}

		public Extent()
		{ }
	}

	public class ExternalLocationDescriptor
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ExternalLocationDescriptor obj){return obj.Value;}

		public string Value { get; set; }
		public string DescriptorSyntax { get; set; }

		public ExternalLocationDescriptor(XElement element)
		{
			Value = element.Value;
			DescriptorSyntax = element.Attributes().Where(a=>a.Name=="DescriptorSyntax").Select(a=>a.Value).FirstOrDefault();
		}

		public ExternalLocationDescriptor()
		{ }
	}

	public class ExternalResourceLink
	{
		public IList<string> URLs { get; set; }
		public Period ValidityPeriod { get; set; }
		public string ExternalLink { get; set; }
		public IList<ExternallyLinkedResourceType> ExternallyLinkedResourceTypes { get; set; }
		public string FileFormat { get; set; }

		public ExternalResourceLink(XElement element)
		{
			URLs = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).ToList();
			ValidityPeriod = element.Elements().Where(e => e.Name == "ValidityPeriod").Select(e => new Period(e)).SingleOrDefault();
			ExternalLink = element.Elements().Where(e => e.Name == "ExternalLink").Select(e => e.Value).SingleOrDefault();
			ExternallyLinkedResourceTypes = element.Elements().Where(e => e.Name == "ExternallyLinkedResourceType").Select(e => new ExternallyLinkedResourceType(e)).ToList();
			FileFormat = element.Elements().Where(e => e.Name == "FileFormat").Select(e => e.Value).SingleOrDefault();
		}

		public ExternalResourceLink()
		{ }
	}

	public class ExternallyLinkedResourceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ExternallyLinkedResourceType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ExternallyLinkedResourceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ExternallyLinkedResourceType()
		{ }
	}

	public class File
	{
		public string FileName { get; set; }
		public string FilePath { get; set; }
		public string URL { get; set; }
		public HashSum HashSum { get; set; }

		public File(XElement element)
		{
			FileName = element.Elements().Where(e => e.Name == "FileName").Select(e => e.Value).SingleOrDefault();
			FilePath = element.Elements().Where(e => e.Name == "FilePath").Select(e => e.Value).SingleOrDefault();
			URL = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).SingleOrDefault();
			HashSum = element.Elements().Where(e => e.Name == "HashSum").Select(e => new HashSum(e)).SingleOrDefault();
		}

		public File()
		{ }
	}

	public class Fingerprint
	{
		public string FingerprintProp { get; set; }
		public FingerprintAlgorithmType FingerprintAlgorithmType { get; set; }
		public string FingerprintAlgorithmVersion { get; set; }
		public string FingerprintAlgorithmParameter { get; set; }

		public Fingerprint(XElement element)
		{
			FingerprintProp = element.Elements().Where(e => e.Name == "Fingerprint").Select(e => e.Value).SingleOrDefault();
			FingerprintAlgorithmType = element.Elements().Where(e => e.Name == "FingerprintAlgorithmType").Select(e => new FingerprintAlgorithmType(e)).SingleOrDefault();
			FingerprintAlgorithmVersion = element.Elements().Where(e => e.Name == "FingerprintAlgorithmVersion").Select(e => e.Value).SingleOrDefault();
			FingerprintAlgorithmParameter = element.Elements().Where(e => e.Name == "FingerprintAlgorithmParameter").Select(e => e.Value).SingleOrDefault();
		}

		public Fingerprint()
		{ }
	}

	public class FingerprintAlgorithmType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(FingerprintAlgorithmType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public FingerprintAlgorithmType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public FingerprintAlgorithmType()
		{ }
	}

	public class FrameRate
	{
		public override string ToString(){return Value;}
		public static implicit operator string(FrameRate obj){return obj.Value;}

		public string Value { get; set; }
		public string UnitOfMeasure { get; set; }

		public FrameRate(XElement element)
		{
			Value = element.Value;
			UnitOfMeasure = element.Attributes().Where(a=>a.Name=="UnitOfMeasure").Select(a=>a.Value).FirstOrDefault();
		}

		public FrameRate()
		{ }
	}

	public class FulfillmentDate
	{
		public string FulfillmentDateProp { get; set; }
		public IList<string> ResourceReleaseReferences { get; set; }

		public FulfillmentDate(XElement element)
		{
			FulfillmentDateProp = element.Elements().Where(e => e.Name == "FulfillmentDate").Select(e => e.Value).SingleOrDefault();
			ResourceReleaseReferences = element.Elements().Where(e => e.Name == "ResourceReleaseReference").Select(e => e.Value).ToList();
		}

		public FulfillmentDate()
		{ }
	}

	public class Genre
	{
		public Description GenreText { get; set; }
		public Description SubGenre { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Genre(XElement element)
		{
			GenreText = element.Elements().Where(e => e.Name == "GenreText").Select(e => new Description(e)).SingleOrDefault();
			SubGenre = element.Elements().Where(e => e.Name == "SubGenre").Select(e => new Description(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Genre()
		{ }
	}

	public class GoverningAgreementType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(GoverningAgreementType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public GoverningAgreementType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public GoverningAgreementType()
		{ }
	}

	public class GuaranteedAmount
	{
		public override string ToString(){return Value;}
		public static implicit operator string(GuaranteedAmount obj){return obj.Value;}

		public string Value { get; set; }
		public string CurrencyCode { get; set; }
		public string ReferenceUnit { get; set; }

		public GuaranteedAmount(XElement element)
		{
			Value = element.Value;
			CurrencyCode = element.Attributes().Where(a=>a.Name=="CurrencyCode").Select(a=>a.Value).FirstOrDefault();
			ReferenceUnit = element.Attributes().Where(a=>a.Name=="ReferenceUnit").Select(a=>a.Value).FirstOrDefault();
		}

		public GuaranteedAmount()
		{ }
	}

	public class HashSum
	{
		public string HashSumProp { get; set; }
		public HashSumAlgorithmType HashSumAlgorithmType { get; set; }

		public HashSum(XElement element)
		{
			HashSumProp = element.Elements().Where(e => e.Name == "HashSum").Select(e => e.Value).SingleOrDefault();
			HashSumAlgorithmType = element.Elements().Where(e => e.Name == "HashSumAlgorithmType").Select(e => new HashSumAlgorithmType(e)).SingleOrDefault();
		}

		public HashSum()
		{ }
	}

	public class HashSumAlgorithmType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(HashSumAlgorithmType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public HashSumAlgorithmType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public HashSumAlgorithmType()
		{ }
	}

	public class HostSoundCarrier
	{
		public IList<ReleaseId> ReleaseIds { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<AdministratingRecordCompany> AdministratingRecordCompanys { get; set; }
		public string TrackNumber { get; set; }
		public string VolumeNumberInSet { get; set; }

		public HostSoundCarrier(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			AdministratingRecordCompanys = element.Elements().Where(e => e.Name == "AdministratingRecordCompany").Select(e => new AdministratingRecordCompany(e)).ToList();
			TrackNumber = element.Elements().Where(e => e.Name == "TrackNumber").Select(e => e.Value).SingleOrDefault();
			VolumeNumberInSet = element.Elements().Where(e => e.Name == "VolumeNumberInSet").Select(e => e.Value).SingleOrDefault();
		}

		public HostSoundCarrier()
		{ }
	}

	public class ICPN
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ICPN obj){return obj.Value;}

		public string Value { get; set; }
		public string IsEan { get; set; }

		public ICPN(XElement element)
		{
			Value = element.Value;
			IsEan = element.Attributes().Where(a=>a.Name=="IsEan").Select(a=>a.Value).FirstOrDefault();
		}

		public ICPN()
		{ }
	}

	public class ImageCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ImageCodecType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ImageCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ImageCodecType()
		{ }
	}

	public class ImageDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<CLine> CLines { get; set; }
		public Description Description { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ImageDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			Description = element.Elements().Where(e => e.Name == "Description").Select(e => new Description(e)).SingleOrDefault();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ImageDetailsByTerritory1()
		{ }
	}

	public class ImageId
	{
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public ImageId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public ImageId()
		{ }
	}

	public class ImageType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ImageType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ImageType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ImageType()
		{ }
	}

	public class IndirectResourceContributor
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public IList<MusicalWorkContributorRole> IndirectResourceContributorRoles { get; set; }
		public string SequenceNumber { get; set; }

		public IndirectResourceContributor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			IndirectResourceContributorRoles = element.Elements().Where(e => e.Name == "IndirectResourceContributorRole").Select(e => new MusicalWorkContributorRole(e)).ToList();
			SequenceNumber = element.Attributes().Where(a=>a.Name=="SequenceNumber").Select(a=>a.Value).FirstOrDefault();
		}

		public IndirectResourceContributor()
		{ }
	}

	public class Keywords
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Keywords obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Keywords(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Keywords()
		{ }
	}

	public class LabelName
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LabelName obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }
		public string LabelNameType { get; set; }

		public LabelName(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
			LabelNameType = element.Attributes().Where(a=>a.Name=="LabelNameType").Select(a=>a.Value).FirstOrDefault();
		}

		public LabelName()
		{ }
	}

	public class LicenseOrClaimRefusalReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LicenseOrClaimRefusalReason obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public LicenseOrClaimRefusalReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public LicenseOrClaimRefusalReason()
		{ }
	}

	public class LicenseOrClaimRequestUpdateReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LicenseOrClaimRequestUpdateReason obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public LicenseOrClaimRequestUpdateReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public LicenseOrClaimRequestUpdateReason()
		{ }
	}

	public class LicenseOrClaimUpdateReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LicenseOrClaimUpdateReason obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public LicenseOrClaimUpdateReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public LicenseOrClaimUpdateReason()
		{ }
	}

	public class LinkedReleaseResourceReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(LinkedReleaseResourceReference obj){return obj.Value;}

		public string Value { get; set; }
		public string LinkDescription { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public LinkedReleaseResourceReference(XElement element)
		{
			Value = element.Value;
			LinkDescription = element.Attributes().Where(a=>a.Name=="LinkDescription").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public LinkedReleaseResourceReference()
		{ }
	}

	public class MessageActionType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MessageActionType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public MessageActionType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public MessageActionType()
		{ }
	}

	public class MessageAuditTrail
	{
		public IList<MessageAuditTrailEvent> MessageAuditTrailEvents { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MessageAuditTrail(XElement element)
		{
			MessageAuditTrailEvents = element.Elements().Where(e => e.Name == "MessageAuditTrailEvent").Select(e => new MessageAuditTrailEvent(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MessageAuditTrail()
		{ }
	}

	public class MessageAuditTrailEvent
	{
		public MessagingParty MessagingPartyDescriptor { get; set; }
		public string DateTime { get; set; }

		public MessageAuditTrailEvent(XElement element)
		{
			MessagingPartyDescriptor = element.Elements().Where(e => e.Name == "MessagingPartyDescriptor").Select(e => new MessagingParty(e)).SingleOrDefault();
			DateTime = element.Elements().Where(e => e.Name == "DateTime").Select(e => e.Value).SingleOrDefault();
		}

		public MessageAuditTrailEvent()
		{ }
	}

	public class MessageHeader
	{
		public string MessageThreadId { get; set; }
		public string MessageId { get; set; }
		public string MessageFileName { get; set; }
		public MessagingParty MessageSender { get; set; }
		public MessagingParty SentOnBehalfOf { get; set; }
		public MessagingParty MessageRecipient { get; set; }
		public string MessageCreatedDateTime { get; set; }
		public MessageAuditTrail MessageAuditTrail { get; set; }
		public Comment Comment { get; set; }
		public string MessageControlType { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MessageHeader(XElement element)
		{
			MessageThreadId = element.Elements().Where(e => e.Name == "MessageThreadId").Select(e => e.Value).SingleOrDefault();
			MessageId = element.Elements().Where(e => e.Name == "MessageId").Select(e => e.Value).SingleOrDefault();
			MessageFileName = element.Elements().Where(e => e.Name == "MessageFileName").Select(e => e.Value).SingleOrDefault();
			MessageSender = element.Elements().Where(e => e.Name == "MessageSender").Select(e => new MessagingParty(e)).SingleOrDefault();
			SentOnBehalfOf = element.Elements().Where(e => e.Name == "SentOnBehalfOf").Select(e => new MessagingParty(e)).SingleOrDefault();
			MessageRecipient = element.Elements().Where(e => e.Name == "MessageRecipient").Select(e => new MessagingParty(e)).SingleOrDefault();
			MessageCreatedDateTime = element.Elements().Where(e => e.Name == "MessageCreatedDateTime").Select(e => e.Value).SingleOrDefault();
			MessageAuditTrail = element.Elements().Where(e => e.Name == "MessageAuditTrail").Select(e => new MessageAuditTrail(e)).SingleOrDefault();
			Comment = element.Elements().Where(e => e.Name == "Comment").Select(e => new Comment(e)).SingleOrDefault();
			MessageControlType = element.Elements().Where(e => e.Name == "MessageControlType").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MessageHeader()
		{ }
	}

	public class MessageNotificationPeriod
	{
		public string StartDate { get; set; }
		public string EndDate { get; set; }

		public MessageNotificationPeriod(XElement element)
		{
			StartDate = element.Elements().Where(e => e.Name == "StartDate").Select(e => e.Value).SingleOrDefault();
			EndDate = element.Elements().Where(e => e.Name == "EndDate").Select(e => e.Value).SingleOrDefault();
		}

		public MessageNotificationPeriod()
		{ }
	}

	public class MessagingParty
	{
		public PartyId PartyId { get; set; }
		public PartyName PartyName { get; set; }
		public Name TradingName { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MessagingParty(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyName = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).SingleOrDefault();
			TradingName = element.Elements().Where(e => e.Name == "TradingName").Select(e => new Name(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MessagingParty()
		{ }
	}

	public class MidiDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public IList<RightsController> RightsControllers { get; set; }
		public EventDate RemasteredDate { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public IList<CLine> CLines { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MidiDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MidiDetailsByTerritory1()
		{ }
	}

	public class MidiId
	{
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public MidiId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public MidiId()
		{ }
	}

	public class MidiType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MidiType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public MidiType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public MidiType()
		{ }
	}

	public class MusicalWork
	{
		public IList<MusicalWorkId> MusicalWorkIds { get; set; }
		public string MusicalWorkReference { get; set; }
		public IList<ReferenceTitle> ReferenceTitles { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<MusicalWorkContributor> MusicalWorkContributors { get; set; }
		public IList<MusicalWorkType> MusicalWorkTypes { get; set; }
		public IList<RightShare> RightShares { get; set; }
		public IList<MusicalWorkDetailsByTerritory> MusicalWorkDetailsByTerritorys { get; set; }
		public string IsUpdated { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MusicalWork(XElement element)
		{
			MusicalWorkIds = element.Elements().Where(e => e.Name == "MusicalWorkId").Select(e => new MusicalWorkId(e)).ToList();
			MusicalWorkReference = element.Elements().Where(e => e.Name == "MusicalWorkReference").Select(e => e.Value).SingleOrDefault();
			ReferenceTitles = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			MusicalWorkContributors = element.Elements().Where(e => e.Name == "MusicalWorkContributor").Select(e => new MusicalWorkContributor(e)).ToList();
			MusicalWorkTypes = element.Elements().Where(e => e.Name == "MusicalWorkType").Select(e => new MusicalWorkType(e)).ToList();
			RightShares = element.Elements().Where(e => e.Name == "RightShare").Select(e => new RightShare(e)).ToList();
			MusicalWorkDetailsByTerritorys = element.Elements().Where(e => e.Name == "MusicalWorkDetailsByTerritory").Select(e => new MusicalWorkDetailsByTerritory(e)).ToList();
			IsUpdated = element.Attributes().Where(a=>a.Name=="IsUpdated").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MusicalWork()
		{ }
	}

	public class MusicalWorkContributor
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public IList<MusicalWorkContributorRole> MusicalWorkContributorRoles { get; set; }
		public IList<SocietyAffiliation> SocietyAffiliations { get; set; }
		public string SequenceNumber { get; set; }

		public MusicalWorkContributor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			MusicalWorkContributorRoles = element.Elements().Where(e => e.Name == "MusicalWorkContributorRole").Select(e => new MusicalWorkContributorRole(e)).ToList();
			SocietyAffiliations = element.Elements().Where(e => e.Name == "SocietyAffiliation").Select(e => new SocietyAffiliation(e)).ToList();
			SequenceNumber = element.Attributes().Where(a=>a.Name=="SequenceNumber").Select(a=>a.Value).FirstOrDefault();
		}

		public MusicalWorkContributor()
		{ }
	}

	public class MusicalWorkContributorRole
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MusicalWorkContributorRole obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public MusicalWorkContributorRole(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public MusicalWorkContributorRole()
		{ }
	}

	public class MusicalWorkDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<MusicalWorkContributor> MusicalWorkContributors { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public MusicalWorkDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			MusicalWorkContributors = element.Elements().Where(e => e.Name == "MusicalWorkContributor").Select(e => new MusicalWorkContributor(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public MusicalWorkDetailsByTerritory()
		{ }
	}

	public class MusicalWorkId
	{
		public string ISWC { get; set; }
		public string OpusNumber { get; set; }
		public IList<string> ComposerCatalogNumbers { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public MusicalWorkId(XElement element)
		{
			ISWC = element.Elements().Where(e => e.Name == "ISWC").Select(e => e.Value).SingleOrDefault();
			OpusNumber = element.Elements().Where(e => e.Name == "OpusNumber").Select(e => e.Value).SingleOrDefault();
			ComposerCatalogNumbers = element.Elements().Where(e => e.Name == "ComposerCatalogNumber").Select(e => e.Value).ToList();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public MusicalWorkId()
		{ }
	}

	public class MusicalWorkType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(MusicalWorkType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public MusicalWorkType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public MusicalWorkType()
		{ }
	}

	public class Name
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Name obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Name(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Name()
		{ }
	}

	public class NumberOfDataMismatchItems
	{
		public override string ToString(){return Value;}
		public static implicit operator string(NumberOfDataMismatchItems obj){return obj.Value;}

		public string Value { get; set; }
		public string DataMismatchStatus { get; set; }

		public NumberOfDataMismatchItems(XElement element)
		{
			Value = element.Value;
			DataMismatchStatus = element.Attributes().Where(a=>a.Name=="DataMismatchStatus").Select(a=>a.Value).FirstOrDefault();
		}

		public NumberOfDataMismatchItems()
		{ }
	}

	public class NumberOfSubscribers
	{
		public string Quantity { get; set; }
		public IList<UseType> UseTypes { get; set; }
		public IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public IList<CarrierType> CarrierTypes { get; set; }

		public NumberOfSubscribers(XElement element)
		{
			Quantity = element.Elements().Where(e => e.Name == "Quantity").Select(e => e.Value).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public NumberOfSubscribers()
		{ }
	}

	public class OperatingSystemType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(OperatingSystemType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public OperatingSystemType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public OperatingSystemType()
		{ }
	}

	public class OrderType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(OrderType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public OrderType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public OrderType()
		{ }
	}

	public class PLine
	{
		public string Year { get; set; }
		public string PLineCompany { get; set; }
		public string PLineText { get; set; }
		public string LanguageAndScriptCode { get; set; }
		public string PLineType { get; set; }

		public PLine(XElement element)
		{
			Year = element.Elements().Where(e => e.Name == "Year").Select(e => e.Value).SingleOrDefault();
			PLineCompany = element.Elements().Where(e => e.Name == "PLineCompany").Select(e => e.Value).SingleOrDefault();
			PLineText = element.Elements().Where(e => e.Name == "PLineText").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
			PLineType = element.Attributes().Where(a=>a.Name=="PLineType").Select(a=>a.Value).FirstOrDefault();
		}

		public PLine()
		{ }
	}

	public class ParentalWarningType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ParentalWarningType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ParentalWarningType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ParentalWarningType()
		{ }
	}

	public class PartyDescriptor
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }

		public PartyDescriptor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
		}

		public PartyDescriptor()
		{ }
	}

	public class PartyId
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PartyId obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string IsDPID { get; set; }
		public string IsISNI { get; set; }

		public PartyId(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			IsDPID = element.Attributes().Where(a=>a.Name=="IsDPID").Select(a=>a.Value).FirstOrDefault();
			IsISNI = element.Attributes().Where(a=>a.Name=="IsISNI").Select(a=>a.Value).FirstOrDefault();
		}

		public PartyId()
		{ }
	}

	public class PartyName
	{
		public Name FullName { get; set; }
		public string FullNameAsciiTranscribed { get; set; }
		public Name FullNameIndexed { get; set; }
		public Name NamesBeforeKeyName { get; set; }
		public Name KeyName { get; set; }
		public Name NamesAfterKeyName { get; set; }
		public Name AbbreviatedName { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public PartyName(XElement element)
		{
			FullName = element.Elements().Where(e => e.Name == "FullName").Select(e => new Name(e)).SingleOrDefault();
			FullNameAsciiTranscribed = element.Elements().Where(e => e.Name == "FullNameAsciiTranscribed").Select(e => e.Value).SingleOrDefault();
			FullNameIndexed = element.Elements().Where(e => e.Name == "FullNameIndexed").Select(e => new Name(e)).SingleOrDefault();
			NamesBeforeKeyName = element.Elements().Where(e => e.Name == "NamesBeforeKeyName").Select(e => new Name(e)).SingleOrDefault();
			KeyName = element.Elements().Where(e => e.Name == "KeyName").Select(e => new Name(e)).SingleOrDefault();
			NamesAfterKeyName = element.Elements().Where(e => e.Name == "NamesAfterKeyName").Select(e => new Name(e)).SingleOrDefault();
			AbbreviatedName = element.Elements().Where(e => e.Name == "AbbreviatedName").Select(e => new Name(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public PartyName()
		{ }
	}

	public class Period
	{
		public EventDate StartDate { get; set; }
		public EventDate EndDate { get; set; }
		public EventDateTime StartDateTime { get; set; }
		public EventDateTime EndDateTime { get; set; }

		public Period(XElement element)
		{
			StartDate = element.Elements().Where(e => e.Name == "StartDate").Select(e => new EventDate(e)).SingleOrDefault();
			EndDate = element.Elements().Where(e => e.Name == "EndDate").Select(e => new EventDate(e)).SingleOrDefault();
			StartDateTime = element.Elements().Where(e => e.Name == "StartDateTime").Select(e => new EventDateTime(e)).SingleOrDefault();
			EndDateTime = element.Elements().Where(e => e.Name == "EndDateTime").Select(e => new EventDateTime(e)).SingleOrDefault();
		}

		public Period()
		{ }
	}

	public class Price
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Price obj){return obj.Value;}

		public string Value { get; set; }
		public string CurrencyCode { get; set; }

		public Price(XElement element)
		{
			Value = element.Value;
			CurrencyCode = element.Attributes().Where(a=>a.Name=="CurrencyCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Price()
		{ }
	}

	public class PriceConsumerPaidExcSalesTax
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PriceConsumerPaidExcSalesTax obj){return obj.Value;}

		public string Value { get; set; }
		public string CurrencyCode { get; set; }

		public PriceConsumerPaidExcSalesTax(XElement element)
		{
			Value = element.Value;
			CurrencyCode = element.Attributes().Where(a=>a.Name=="CurrencyCode").Select(a=>a.Value).FirstOrDefault();
		}

		public PriceConsumerPaidExcSalesTax()
		{ }
	}

	public class PriceInformation
	{
		public Description Description { get; set; }
		public PriceRangeType PriceRangeType { get; set; }
		public PriceType PriceType { get; set; }
		public Price WholesalePricePerUnit { get; set; }
		public Price BulkOrderWholesalePricePerUnit { get; set; }
		public Price SuggestedRetailPrice { get; set; }

		public PriceInformation(XElement element)
		{
			Description = element.Elements().Where(e => e.Name == "Description").Select(e => new Description(e)).SingleOrDefault();
			PriceRangeType = element.Elements().Where(e => e.Name == "PriceRangeType").Select(e => new PriceRangeType(e)).SingleOrDefault();
			PriceType = element.Elements().Where(e => e.Name == "PriceType").Select(e => new PriceType(e)).SingleOrDefault();
			WholesalePricePerUnit = element.Elements().Where(e => e.Name == "WholesalePricePerUnit").Select(e => new Price(e)).SingleOrDefault();
			BulkOrderWholesalePricePerUnit = element.Elements().Where(e => e.Name == "BulkOrderWholesalePricePerUnit").Select(e => new Price(e)).SingleOrDefault();
			SuggestedRetailPrice = element.Elements().Where(e => e.Name == "SuggestedRetailPrice").Select(e => new Price(e)).SingleOrDefault();
		}

		public PriceInformation()
		{ }
	}

	public class PriceRangeType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PriceRangeType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }

		public PriceRangeType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
		}

		public PriceRangeType()
		{ }
	}

	public class PriceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PriceType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }

		public PriceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
		}

		public PriceType()
		{ }
	}

	public class ProductType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ProductType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ProductType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ProductType()
		{ }
	}

	public class PromotionalCode
	{
		public override string ToString(){return Value;}
		public static implicit operator string(PromotionalCode obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }

		public PromotionalCode(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
		}

		public PromotionalCode()
		{ }
	}

	public class ProprietaryId
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ProprietaryId obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }

		public ProprietaryId(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
		}

		public ProprietaryId()
		{ }
	}

	public class Purpose
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Purpose obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public Purpose(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public Purpose()
		{ }
	}

	public class RatingAgency
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RatingAgency obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public RatingAgency(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public RatingAgency()
		{ }
	}

	public class Reason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Reason obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Reason(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Reason()
		{ }
	}

	public class ReasonType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReasonType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ReasonType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ReasonType()
		{ }
	}

	public class RecordCompanyMarketShareData
	{
		public IList<ReleaseType> ReleaseTypes { get; set; }
		public string UnitsSoldTotal { get; set; }
		public IList<UseType> UseTypes { get; set; }
		public IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public IList<CarrierType> CarrierTypes { get; set; }

		public RecordCompanyMarketShareData(XElement element)
		{
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			UnitsSoldTotal = element.Elements().Where(e => e.Name == "UnitsSoldTotal").Select(e => e.Value).SingleOrDefault();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
		}

		public RecordCompanyMarketShareData()
		{ }
	}

	public class RedeliveryReasonType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RedeliveryReasonType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public RedeliveryReasonType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public RedeliveryReasonType()
		{ }
	}

	public class ReferenceTitle
	{
		public TitleText TitleText { get; set; }
		public SubTitle SubTitle { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ReferenceTitle(XElement element)
		{
			TitleText = element.Elements().Where(e => e.Name == "TitleText").Select(e => new TitleText(e)).SingleOrDefault();
			SubTitle = element.Elements().Where(e => e.Name == "SubTitle").Select(e => new SubTitle(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ReferenceTitle()
		{ }
	}

	public class RelatedLicenseOrClaimId
	{
		public RightsAgreementId LicenseOrClaimId { get; set; }
		public LicenseOrClaimUpdateReason LicenseOrClaimUpdateReason { get; set; }

		public RelatedLicenseOrClaimId(XElement element)
		{
			LicenseOrClaimId = element.Elements().Where(e => e.Name == "LicenseOrClaimId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LicenseOrClaimUpdateReason = element.Elements().Where(e => e.Name == "LicenseOrClaimUpdateReason").Select(e => new LicenseOrClaimUpdateReason(e)).SingleOrDefault();
		}

		public RelatedLicenseOrClaimId()
		{ }
	}

	public class RelatedLicenseOrClaimRequestId
	{
		public ProprietaryId LicenseOrClaimRequestId { get; set; }
		public LicenseOrClaimRequestUpdateReason LicenseOrClaimRequestUpdateReason { get; set; }

		public RelatedLicenseOrClaimRequestId(XElement element)
		{
			LicenseOrClaimRequestId = element.Elements().Where(e => e.Name == "LicenseOrClaimRequestId").Select(e => new ProprietaryId(e)).SingleOrDefault();
			LicenseOrClaimRequestUpdateReason = element.Elements().Where(e => e.Name == "LicenseOrClaimRequestUpdateReason").Select(e => new LicenseOrClaimRequestUpdateReason(e)).SingleOrDefault();
		}

		public RelatedLicenseOrClaimRequestId()
		{ }
	}

	public class RelatedRelease
	{
		public IList<ReleaseId> ReleaseIds { get; set; }
		public ReferenceTitle ReferenceTitle { get; set; }
		public IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritorys { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public ReleaseRelationshipType ReleaseRelationshipType { get; set; }
		public EventDate ReleaseDate { get; set; }
		public EventDate OriginalReleaseDate { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public RelatedRelease(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			ReleaseSummaryDetailsByTerritorys = element.Elements().Where(e => e.Name == "ReleaseSummaryDetailsByTerritory").Select(e => new ReleaseSummaryDetailsByTerritory(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			ReleaseRelationshipType = element.Elements().Where(e => e.Name == "ReleaseRelationshipType").Select(e => new ReleaseRelationshipType(e)).SingleOrDefault();
			ReleaseDate = element.Elements().Where(e => e.Name == "ReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalReleaseDate = element.Elements().Where(e => e.Name == "OriginalReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public RelatedRelease()
		{ }
	}

	public class ReleaseAvailabilityStatus
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseAvailabilityStatus obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ReleaseAvailabilityStatus(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseAvailabilityStatus()
		{ }
	}

	public class ReleaseCollectionReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseCollectionReference obj){return obj.Value;}

		public string Value { get; set; }
		public string ReleaseResourceType { get; set; }

		public ReleaseCollectionReference(XElement element)
		{
			Value = element.Value;
			ReleaseResourceType = element.Attributes().Where(a=>a.Name=="ReleaseResourceType").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseCollectionReference()
		{ }
	}

	public class ReleaseCollectionReferenceList
	{
		public string NumberOfCollections { get; set; }
		public IList<ReleaseCollectionReference> ReleaseCollectionReferences { get; set; }

		public ReleaseCollectionReferenceList(XElement element)
		{
			NumberOfCollections = element.Elements().Where(e => e.Name == "NumberOfCollections").Select(e => e.Value).SingleOrDefault();
			ReleaseCollectionReferences = element.Elements().Where(e => e.Name == "ReleaseCollectionReference").Select(e => new ReleaseCollectionReference(e)).ToList();
		}

		public ReleaseCollectionReferenceList()
		{ }
	}

	public class ReleaseDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Name> DisplayArtistNames { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public string IsMultiArtistCompilation { get; set; }
		public IList<AdministratingRecordCompany> AdministratingRecordCompanys { get; set; }
		public IList<ReleaseType> ReleaseTypes { get; set; }
		public IList<RelatedRelease> RelatedReleases { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ReleaseDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DisplayArtistNames = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).ToList();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			IsMultiArtistCompilation = element.Elements().Where(e => e.Name == "IsMultiArtistCompilation").Select(e => e.Value).SingleOrDefault();
			AdministratingRecordCompanys = element.Elements().Where(e => e.Name == "AdministratingRecordCompany").Select(e => new AdministratingRecordCompany(e)).ToList();
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			RelatedReleases = element.Elements().Where(e => e.Name == "RelatedRelease").Select(e => new RelatedRelease(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseDetailsByTerritory1()
		{ }
	}

	public class ReleaseId
	{
		public string GRid { get; set; }
		public string ISRC { get; set; }
		public ICPN ICPN { get; set; }
		public CatalogNumber CatalogNumber { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public ReleaseId(XElement element)
		{
			GRid = element.Elements().Where(e => e.Name == "GRid").Select(e => e.Value).SingleOrDefault();
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ICPN = element.Elements().Where(e => e.Name == "ICPN").Select(e => new ICPN(e)).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseId()
		{ }
	}

	public class ReleaseRelationshipType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseRelationshipType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ReleaseRelationshipType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseRelationshipType()
		{ }
	}

	public class ReleaseResourceReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseResourceReference obj){return obj.Value;}

		public string Value { get; set; }
		public string ReleaseResourceType { get; set; }

		public ReleaseResourceReference(XElement element)
		{
			Value = element.Value;
			ReleaseResourceType = element.Attributes().Where(a=>a.Name=="ReleaseResourceType").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseResourceReference()
		{ }
	}

	public class ReleaseResourceReferenceList
	{
		public IList<ReleaseResourceReference> ReleaseResourceReferences { get; set; }

		public ReleaseResourceReferenceList(XElement element)
		{
			ReleaseResourceReferences = element.Elements().Where(e => e.Name == "ReleaseResourceReference").Select(e => new ReleaseResourceReference(e)).ToList();
		}

		public ReleaseResourceReferenceList()
		{ }
	}

	public class ReleaseSummary
	{
		public IList<ReleaseId> ReleaseIds { get; set; }
		public ReferenceTitle ReferenceTitle { get; set; }
		public IList<ReleaseSummaryDetailsByTerritory> ReleaseSummaryDetailsByTerritorys { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ReleaseSummary(XElement element)
		{
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			ReferenceTitle = element.Elements().Where(e => e.Name == "ReferenceTitle").Select(e => new ReferenceTitle(e)).SingleOrDefault();
			ReleaseSummaryDetailsByTerritorys = element.Elements().Where(e => e.Name == "ReleaseSummaryDetailsByTerritory").Select(e => new ReleaseSummaryDetailsByTerritory(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseSummary()
		{ }
	}

	public class ReleaseSummaryDetailsByTerritory
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Name> DisplayArtistNames { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public ReleaseSummaryDetailsByTerritory(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			DisplayArtistNames = element.Elements().Where(e => e.Name == "DisplayArtistName").Select(e => new Name(e)).ToList();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseSummaryDetailsByTerritory()
		{ }
	}

	public class ReleaseType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReleaseType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ReleaseType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ReleaseType()
		{ }
	}

	public class RemittanceAdvice
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RemittanceAdvice obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public RemittanceAdvice(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public RemittanceAdvice()
		{ }
	}

	public class ReportFormat
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReportFormat obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ReportFormat(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ReportFormat()
		{ }
	}

	public class ReportType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ReportType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ReportType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ReportType()
		{ }
	}

	public class ResourceContainedResourceReference
	{
		public string ResourceContainedResourceReferenceProp { get; set; }
		public string DurationUsed { get; set; }
		public string StartPoint { get; set; }
		public Purpose Purpose { get; set; }

		public ResourceContainedResourceReference(XElement element)
		{
			ResourceContainedResourceReferenceProp = element.Elements().Where(e => e.Name == "ResourceContainedResourceReference").Select(e => e.Value).SingleOrDefault();
			DurationUsed = element.Elements().Where(e => e.Name == "DurationUsed").Select(e => e.Value).SingleOrDefault();
			StartPoint = element.Elements().Where(e => e.Name == "StartPoint").Select(e => e.Value).SingleOrDefault();
			Purpose = element.Elements().Where(e => e.Name == "Purpose").Select(e => new Purpose(e)).SingleOrDefault();
		}

		public ResourceContainedResourceReference()
		{ }
	}

	public class ResourceContainedResourceReferenceList
	{
		public IList<ResourceContainedResourceReference> ResourceContainedResourceReferences { get; set; }

		public ResourceContainedResourceReferenceList(XElement element)
		{
			ResourceContainedResourceReferences = element.Elements().Where(e => e.Name == "ResourceContainedResourceReference").Select(e => new ResourceContainedResourceReference(e)).ToList();
		}

		public ResourceContainedResourceReferenceList()
		{ }
	}

	public class ResourceContributor
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public IList<ResourceContributorRole> ResourceContributorRoles { get; set; }
		public string SequenceNumber { get; set; }

		public ResourceContributor(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			ResourceContributorRoles = element.Elements().Where(e => e.Name == "ResourceContributorRole").Select(e => new ResourceContributorRole(e)).ToList();
			SequenceNumber = element.Attributes().Where(a=>a.Name=="SequenceNumber").Select(a=>a.Value).FirstOrDefault();
		}

		public ResourceContributor()
		{ }
	}

	public class ResourceContributorRole
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ResourceContributorRole obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ResourceContributorRole(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ResourceContributorRole()
		{ }
	}

	public class ResourceGroupResourceReferenceList
	{
		public IList<string> ResourceGroupResourceReferences { get; set; }

		public ResourceGroupResourceReferenceList(XElement element)
		{
			ResourceGroupResourceReferences = element.Elements().Where(e => e.Name == "ResourceGroupResourceReference").Select(e => e.Value).ToList();
		}

		public ResourceGroupResourceReferenceList()
		{ }
	}

	public class ResourceId
	{
		public string ISRC { get; set; }
		public string ISMN { get; set; }
		public string ISAN { get; set; }
		public string VISAN { get; set; }
		public string ISBN { get; set; }
		public string ISSN { get; set; }
		public string SICI { get; set; }
		public CatalogNumber CatalogNumber { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public ResourceId(XElement element)
		{
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISMN = element.Elements().Where(e => e.Name == "ISMN").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			ISBN = element.Elements().Where(e => e.Name == "ISBN").Select(e => e.Value).SingleOrDefault();
			ISSN = element.Elements().Where(e => e.Name == "ISSN").Select(e => e.Value).SingleOrDefault();
			SICI = element.Elements().Where(e => e.Name == "SICI").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public ResourceId()
		{ }
	}

	public class ResourceMusicalWorkReference
	{
		public string SequenceNumber { get; set; }
		public string DurationUsed { get; set; }
		public string IsFragment { get; set; }
		public string ResourceMusicalWorkReferenceProp { get; set; }

		public ResourceMusicalWorkReference(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			DurationUsed = element.Elements().Where(e => e.Name == "DurationUsed").Select(e => e.Value).SingleOrDefault();
			IsFragment = element.Elements().Where(e => e.Name == "IsFragment").Select(e => e.Value).SingleOrDefault();
			ResourceMusicalWorkReferenceProp = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReference").Select(e => e.Value).SingleOrDefault();
		}

		public ResourceMusicalWorkReference()
		{ }
	}

	public class ResourceMusicalWorkReferenceList
	{
		public IList<ResourceMusicalWorkReference> ResourceMusicalWorkReferences { get; set; }

		public ResourceMusicalWorkReferenceList(XElement element)
		{
			ResourceMusicalWorkReferences = element.Elements().Where(e => e.Name == "ResourceMusicalWorkReference").Select(e => new ResourceMusicalWorkReference(e)).ToList();
		}

		public ResourceMusicalWorkReferenceList()
		{ }
	}

	public class ResourceOmissionReason
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ResourceOmissionReason obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ResourceOmissionReason(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ResourceOmissionReason()
		{ }
	}

	public class ResourceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(ResourceType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public ResourceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public ResourceType()
		{ }
	}

	public class RightShare
	{
		public RightsAgreementId RightShareId { get; set; }
		public string RightShareReference { get; set; }
		public RightShareCreationReferenceList RightShareCreationReferenceList { get; set; }
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<RightsType> RightsTypes { get; set; }
		public IList<UseType> UseTypes { get; set; }
		public IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public IList<CarrierType> CarrierTypes { get; set; }
		public IList<CommercialModelType> CommercialModelTypes { get; set; }
		public IList<string> MusicalWorkRightsClaimTypes { get; set; }
		public IList<RightsController> RightsControllers { get; set; }
		public Period ValidityPeriod { get; set; }
		public string PercentageUnknown { get; set; }
		public string PercentageRate { get; set; }
		public TariffReference TariffReference { get; set; }
		public string LicenseStatus { get; set; }
		public string HasFirstLicenseRefusal { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public RightShare(XElement element)
		{
			RightShareId = element.Elements().Where(e => e.Name == "RightShareId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			RightShareReference = element.Elements().Where(e => e.Name == "RightShareReference").Select(e => e.Value).SingleOrDefault();
			RightShareCreationReferenceList = element.Elements().Where(e => e.Name == "RightShareCreationReferenceList").Select(e => new RightShareCreationReferenceList(e)).SingleOrDefault();
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			RightsTypes = element.Elements().Where(e => e.Name == "RightsType").Select(e => new RightsType(e)).ToList();
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
			CommercialModelTypes = element.Elements().Where(e => e.Name == "CommercialModelType").Select(e => new CommercialModelType(e)).ToList();
			MusicalWorkRightsClaimTypes = element.Elements().Where(e => e.Name == "MusicalWorkRightsClaimType").Select(e => e.Value).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			ValidityPeriod = element.Elements().Where(e => e.Name == "ValidityPeriod").Select(e => new Period(e)).SingleOrDefault();
			PercentageUnknown = element.Elements().Where(e => e.Name == "PercentageUnknown").Select(e => e.Value).SingleOrDefault();
			PercentageRate = element.Elements().Where(e => e.Name == "PercentageRate").Select(e => e.Value).SingleOrDefault();
			TariffReference = element.Elements().Where(e => e.Name == "TariffReference").Select(e => new TariffReference(e)).SingleOrDefault();
			LicenseStatus = element.Elements().Where(e => e.Name == "LicenseStatus").Select(e => e.Value).SingleOrDefault();
			HasFirstLicenseRefusal = element.Elements().Where(e => e.Name == "HasFirstLicenseRefusal").Select(e => e.Value).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public RightShare()
		{ }
	}

	public class RightShareCreationReferenceList
	{
		public IList<string> RightShareWorkReferences { get; set; }
		public IList<string> RightShareResourceReferences { get; set; }
		public IList<string> RightShareReleaseReferences { get; set; }

		public RightShareCreationReferenceList(XElement element)
		{
			RightShareWorkReferences = element.Elements().Where(e => e.Name == "RightShareWorkReference").Select(e => e.Value).ToList();
			RightShareResourceReferences = element.Elements().Where(e => e.Name == "RightShareResourceReference").Select(e => e.Value).ToList();
			RightShareReleaseReferences = element.Elements().Where(e => e.Name == "RightShareReleaseReference").Select(e => e.Value).ToList();
		}

		public RightShareCreationReferenceList()
		{ }
	}

	public class RightsAgreementId
	{
		public IList<string> MWLIs { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }

		public RightsAgreementId(XElement element)
		{
			MWLIs = element.Elements().Where(e => e.Name == "MWLI").Select(e => e.Value).ToList();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
		}

		public RightsAgreementId()
		{ }
	}

	public class RightsController
	{
		public PartyId PartyId { get; set; }
		public IList<PartyName> PartyNames { get; set; }
		public IList<string> RightsControllerRoles { get; set; }
		public string RightShareUnknown { get; set; }
		public string RightSharePercentage { get; set; }
		public string SequenceNumber { get; set; }

		public RightsController(XElement element)
		{
			PartyId = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).SingleOrDefault();
			PartyNames = element.Elements().Where(e => e.Name == "PartyName").Select(e => new PartyName(e)).ToList();
			RightsControllerRoles = element.Elements().Where(e => e.Name == "RightsControllerRole").Select(e => e.Value).ToList();
			RightShareUnknown = element.Elements().Where(e => e.Name == "RightShareUnknown").Select(e => e.Value).SingleOrDefault();
			RightSharePercentage = element.Elements().Where(e => e.Name == "RightSharePercentage").Select(e => e.Value).SingleOrDefault();
			SequenceNumber = element.Attributes().Where(a=>a.Name=="SequenceNumber").Select(a=>a.Value).FirstOrDefault();
		}

		public RightsController()
		{ }
	}

	public class RightsType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RightsType obj){return obj.Value;}

		public string Value { get; set; }
		public string TerritoryCode { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public RightsType(XElement element)
		{
			Value = element.Value;
			TerritoryCode = element.Attributes().Where(a=>a.Name=="TerritoryCode").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public RightsType()
		{ }
	}

	public class RoyaltyAmount
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RoyaltyAmount obj){return obj.Value;}

		public string Value { get; set; }
		public string CurrencyCode { get; set; }

		public RoyaltyAmount(XElement element)
		{
			Value = element.Value;
			CurrencyCode = element.Attributes().Where(a=>a.Name=="CurrencyCode").Select(a=>a.Value).FirstOrDefault();
		}

		public RoyaltyAmount()
		{ }
	}

	public class RoyaltyCode
	{
		public override string ToString(){return Value;}
		public static implicit operator string(RoyaltyCode obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }

		public RoyaltyCode(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
		}

		public RoyaltyCode()
		{ }
	}

	public class SalesReportingProxyReleaseId
	{
		public ReleaseId ReleaseId { get; set; }
		public Reason Reason { get; set; }
		public ReasonType ReasonType { get; set; }

		public SalesReportingProxyReleaseId(XElement element)
		{
			ReleaseId = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).SingleOrDefault();
			Reason = element.Elements().Where(e => e.Name == "Reason").Select(e => new Reason(e)).SingleOrDefault();
			ReasonType = element.Elements().Where(e => e.Name == "ReasonType").Select(e => new ReasonType(e)).SingleOrDefault();
		}

		public SalesReportingProxyReleaseId()
		{ }
	}

	public class SamplingRate
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SamplingRate obj){return obj.Value;}

		public string Value { get; set; }
		public string UnitOfMeasure { get; set; }

		public SamplingRate(XElement element)
		{
			Value = element.Value;
			UnitOfMeasure = element.Attributes().Where(a=>a.Name=="UnitOfMeasure").Select(a=>a.Value).FirstOrDefault();
		}

		public SamplingRate()
		{ }
	}

	public class SheetMusicCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SheetMusicCodecType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public SheetMusicCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public SheetMusicCodecType()
		{ }
	}

	public class SheetMusicDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<CLine> CLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SheetMusicDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SheetMusicDetailsByTerritory1()
		{ }
	}

	public class SheetMusicId
	{
		public string ISMN { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public SheetMusicId(XElement element)
		{
			ISMN = element.Elements().Where(e => e.Name == "ISMN").Select(e => e.Value).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public SheetMusicId()
		{ }
	}

	public class SheetMusicType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SheetMusicType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public SheetMusicType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public SheetMusicType()
		{ }
	}

	public class SocietyAffiliation
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public PartyDescriptor MusicRightsSociety { get; set; }

		public SocietyAffiliation(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			MusicRightsSociety = element.Elements().Where(e => e.Name == "MusicRightsSociety").Select(e => new PartyDescriptor(e)).SingleOrDefault();
		}

		public SocietyAffiliation()
		{ }
	}

	public class SoftwareDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SoftwareDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SoftwareDetailsByTerritory1()
		{ }
	}

	public class SoftwareId
	{
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public SoftwareId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public SoftwareId()
		{ }
	}

	public class SoftwareType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SoftwareType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public SoftwareType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public SoftwareType()
		{ }
	}

	public class SoundProcessorType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SoundProcessorType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public SoundProcessorType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public SoundProcessorType()
		{ }
	}

	public class SoundRecordingCollectionReference
	{
		public string SequenceNumber { get; set; }
		public string SoundRecordingCollectionReferenceProp { get; set; }
		public string StartTime { get; set; }
		public string Duration { get; set; }
		public string EndTime { get; set; }
		public string ReleaseResourceType { get; set; }

		public SoundRecordingCollectionReference(XElement element)
		{
			SequenceNumber = element.Elements().Where(e => e.Name == "SequenceNumber").Select(e => e.Value).SingleOrDefault();
			SoundRecordingCollectionReferenceProp = element.Elements().Where(e => e.Name == "SoundRecordingCollectionReference").Select(e => e.Value).SingleOrDefault();
			StartTime = element.Elements().Where(e => e.Name == "StartTime").Select(e => e.Value).SingleOrDefault();
			Duration = element.Elements().Where(e => e.Name == "Duration").Select(e => e.Value).SingleOrDefault();
			EndTime = element.Elements().Where(e => e.Name == "EndTime").Select(e => e.Value).SingleOrDefault();
			ReleaseResourceType = element.Elements().Where(e => e.Name == "ReleaseResourceType").Select(e => e.Value).SingleOrDefault();
		}

		public SoundRecordingCollectionReference()
		{ }
	}

	public class SoundRecordingCollectionReferenceList
	{
		public string NumberOfCollections { get; set; }
		public IList<SoundRecordingCollectionReference> SoundRecordingCollectionReferences { get; set; }

		public SoundRecordingCollectionReferenceList(XElement element)
		{
			NumberOfCollections = element.Elements().Where(e => e.Name == "NumberOfCollections").Select(e => e.Value).SingleOrDefault();
			SoundRecordingCollectionReferences = element.Elements().Where(e => e.Name == "SoundRecordingCollectionReference").Select(e => new SoundRecordingCollectionReference(e)).ToList();
		}

		public SoundRecordingCollectionReferenceList()
		{ }
	}

	public class SoundRecordingDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public IList<RightsController> RightsControllers { get; set; }
		public EventDate RemasteredDate { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public IList<PLine> PLines { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SoundRecordingDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SoundRecordingDetailsByTerritory1()
		{ }
	}

	public class SoundRecordingId
	{
		public string ISRC { get; set; }
		public CatalogNumber CatalogNumber { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public SoundRecordingId(XElement element)
		{
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public SoundRecordingId()
		{ }
	}

	public class SoundRecordingType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SoundRecordingType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public SoundRecordingType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public SoundRecordingType()
		{ }
	}

	public class StoreLocationDescriptor
	{
		public override string ToString(){return Value;}
		public static implicit operator string(StoreLocationDescriptor obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public StoreLocationDescriptor(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public StoreLocationDescriptor()
		{ }
	}

	public class SubTitle
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SubTitle obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public SubTitle(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public SubTitle()
		{ }
	}

	public class SupplyChainStatus
	{
		public override string ToString(){return Value;}
		public static implicit operator string(SupplyChainStatus obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public SupplyChainStatus(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public SupplyChainStatus()
		{ }
	}

	public class Synopsis
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Synopsis obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public Synopsis(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Synopsis()
		{ }
	}

	public class TariffReference
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TariffReference obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }
		public string TariffSubReference { get; set; }

		public TariffReference(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
			TariffSubReference = element.Attributes().Where(a=>a.Name=="TariffSubReference").Select(a=>a.Value).FirstOrDefault();
		}

		public TariffReference()
		{ }
	}

	public class Tax
	{
		public override string ToString(){return Value;}
		public static implicit operator string(Tax obj){return obj.Value;}

		public string Value { get; set; }
		public string CurrencyCode { get; set; }

		public Tax(XElement element)
		{
			Value = element.Value;
			CurrencyCode = element.Attributes().Where(a=>a.Name=="CurrencyCode").Select(a=>a.Value).FirstOrDefault();
		}

		public Tax()
		{ }
	}

	public class TaxRate
	{
		public string Rate { get; set; }
		public IList<TaxType> TaxTypes { get; set; }
		public IList<TaxScope> TaxScopes { get; set; }

		public TaxRate(XElement element)
		{
			Rate = element.Elements().Where(e => e.Name == "Rate").Select(e => e.Value).SingleOrDefault();
			TaxTypes = element.Elements().Where(e => e.Name == "TaxType").Select(e => new TaxType(e)).ToList();
			TaxScopes = element.Elements().Where(e => e.Name == "TaxScope").Select(e => new TaxScope(e)).ToList();
		}

		public TaxRate()
		{ }
	}

	public class TaxScope
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TaxScope obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public TaxScope(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public TaxScope()
		{ }
	}

	public class TaxType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TaxType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public TaxType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public TaxType()
		{ }
	}

	public class TechnicalInstantiation
	{
		public string DrmEnforcementType { get; set; }
		public string VideoDefinitionType { get; set; }
		public string CodingType { get; set; }
		public BitRate BitRate { get; set; }

		public TechnicalInstantiation(XElement element)
		{
			DrmEnforcementType = element.Elements().Where(e => e.Name == "DrmEnforcementType").Select(e => e.Value).SingleOrDefault();
			VideoDefinitionType = element.Elements().Where(e => e.Name == "VideoDefinitionType").Select(e => e.Value).SingleOrDefault();
			CodingType = element.Elements().Where(e => e.Name == "CodingType").Select(e => e.Value).SingleOrDefault();
			BitRate = element.Elements().Where(e => e.Name == "BitRate").Select(e => new BitRate(e)).SingleOrDefault();
		}

		public TechnicalInstantiation()
		{ }
	}

	public class TextCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TextCodecType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public TextCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public TextCodecType()
		{ }
	}

	public class TextDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<CLine> CLines { get; set; }
		public CourtesyLine CourtesyLine { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TextDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			CourtesyLine = element.Elements().Where(e => e.Name == "CourtesyLine").Select(e => new CourtesyLine(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TextDetailsByTerritory1()
		{ }
	}

	public class TextId
	{
		public string ISBN { get; set; }
		public string ISSN { get; set; }
		public string SICI { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public TextId(XElement element)
		{
			ISBN = element.Elements().Where(e => e.Name == "ISBN").Select(e => e.Value).SingleOrDefault();
			ISSN = element.Elements().Where(e => e.Name == "ISSN").Select(e => e.Value).SingleOrDefault();
			SICI = element.Elements().Where(e => e.Name == "SICI").Select(e => e.Value).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public TextId()
		{ }
	}

	public class TextType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TextType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public TextType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public TextType()
		{ }
	}

	public class Title
	{
		public TitleText TitleText { get; set; }
		public IList<TypedSubTitle> SubTitles { get; set; }
		public string LanguageAndScriptCode { get; set; }
		public string TitleType { get; set; }

		public Title(XElement element)
		{
			TitleText = element.Elements().Where(e => e.Name == "TitleText").Select(e => new TitleText(e)).SingleOrDefault();
			SubTitles = element.Elements().Where(e => e.Name == "SubTitle").Select(e => new TypedSubTitle(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
			TitleType = element.Attributes().Where(a=>a.Name=="TitleType").Select(a=>a.Value).FirstOrDefault();
		}

		public Title()
		{ }
	}

	public class TitleText
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TitleText obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public TitleText(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public TitleText()
		{ }
	}

	public class TotalRoyaltyAmount
	{
		public IList<ReleaseType> ReleaseTypes { get; set; }
		public IList<RightsType> RightsTypes { get; set; }
		public RoyaltyAmount RoyaltyAmount { get; set; }

		public TotalRoyaltyAmount(XElement element)
		{
			ReleaseTypes = element.Elements().Where(e => e.Name == "ReleaseType").Select(e => new ReleaseType(e)).ToList();
			RightsTypes = element.Elements().Where(e => e.Name == "RightsType").Select(e => new RightsType(e)).ToList();
			RoyaltyAmount = element.Elements().Where(e => e.Name == "RoyaltyAmount").Select(e => new RoyaltyAmount(e)).SingleOrDefault();
		}

		public TotalRoyaltyAmount()
		{ }
	}

	public class TypedSubTitle
	{
		public override string ToString(){return Value;}
		public static implicit operator string(TypedSubTitle obj){return obj.Value;}

		public string Value { get; set; }
		public string LanguageAndScriptCode { get; set; }
		public string SubTitleType { get; set; }

		public TypedSubTitle(XElement element)
		{
			Value = element.Value;
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
			SubTitleType = element.Attributes().Where(a=>a.Name=="SubTitleType").Select(a=>a.Value).FirstOrDefault();
		}

		public TypedSubTitle()
		{ }
	}

	public class Usage
	{
		public IList<UseType> UseTypes { get; set; }
		public IList<UserInterfaceType> UserInterfaceTypes { get; set; }
		public IList<DistributionChannelType> DistributionChannelTypes { get; set; }
		public IList<CarrierType> CarrierTypes { get; set; }
		public TechnicalInstantiation TechnicalInstantiation { get; set; }
		public string NumberOfUsages { get; set; }

		public Usage(XElement element)
		{
			UseTypes = element.Elements().Where(e => e.Name == "UseType").Select(e => new UseType(e)).ToList();
			UserInterfaceTypes = element.Elements().Where(e => e.Name == "UserInterfaceType").Select(e => new UserInterfaceType(e)).ToList();
			DistributionChannelTypes = element.Elements().Where(e => e.Name == "DistributionChannelType").Select(e => new DistributionChannelType(e)).ToList();
			CarrierTypes = element.Elements().Where(e => e.Name == "CarrierType").Select(e => new CarrierType(e)).ToList();
			TechnicalInstantiation = element.Elements().Where(e => e.Name == "TechnicalInstantiation").Select(e => new TechnicalInstantiation(e)).SingleOrDefault();
			NumberOfUsages = element.Elements().Where(e => e.Name == "NumberOfUsages").Select(e => e.Value).SingleOrDefault();
		}

		public Usage()
		{ }
	}

	public class UseType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UseType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public UseType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public UseType()
		{ }
	}

	public class UserDefinedResourceDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public IList<UserDefinedValue> UserDefinedValues { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public UserDefinedResourceDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			UserDefinedValues = element.Elements().Where(e => e.Name == "UserDefinedValue").Select(e => new UserDefinedValue(e)).ToList();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public UserDefinedResourceDetailsByTerritory1()
		{ }
	}

	public class UserDefinedResourceId
	{
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public UserDefinedResourceId(XElement element)
		{
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public UserDefinedResourceId()
		{ }
	}

	public class UserDefinedResourceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UserDefinedResourceType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }

		public UserDefinedResourceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
		}

		public UserDefinedResourceType()
		{ }
	}

	public class UserDefinedValue
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UserDefinedValue obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string Description { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public UserDefinedValue(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			Description = element.Attributes().Where(a=>a.Name=="Description").Select(a=>a.Value).FirstOrDefault();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public UserDefinedValue()
		{ }
	}

	public class UserInterfaceType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(UserInterfaceType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public UserInterfaceType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public UserInterfaceType()
		{ }
	}

	public class VideoCodecType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(VideoCodecType obj){return obj.Value;}

		public string Value { get; set; }
		public string Version { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public VideoCodecType(XElement element)
		{
			Value = element.Value;
			Version = element.Attributes().Where(a=>a.Name=="Version").Select(a=>a.Value).FirstOrDefault();
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public VideoCodecType()
		{ }
	}

	public class VideoCueSheetReference
	{
		public string VideoCueSheetReferenceProp { get; set; }

		public VideoCueSheetReference(XElement element)
		{
			VideoCueSheetReferenceProp = element.Elements().Where(e => e.Name == "VideoCueSheetReference").Select(e => e.Value).SingleOrDefault();
		}

		public VideoCueSheetReference()
		{ }
	}

	public class VideoCueSheetReferenceList
	{
		public IList<string> VideoCueSheetReferences { get; set; }

		public VideoCueSheetReferenceList(XElement element)
		{
			VideoCueSheetReferences = element.Elements().Where(e => e.Name == "VideoCueSheetReference").Select(e => e.Value).ToList();
		}

		public VideoCueSheetReferenceList()
		{ }
	}

	public class VideoDetailsByTerritory1
	{
		public IList<string> TerritoryCodes { get; set; }
		public IList<string> ExcludedTerritoryCodes { get; set; }
		public IList<Title> Titles { get; set; }
		public IList<Artist> DisplayArtists { get; set; }
		public IList<ResourceContributor> ResourceContributors { get; set; }
		public IList<IndirectResourceContributor> IndirectResourceContributors { get; set; }
		public RightsAgreementId RightsAgreementId { get; set; }
		public IList<LabelName> LabelNames { get; set; }
		public IList<RightsController> RightsControllers { get; set; }
		public EventDate RemasteredDate { get; set; }
		public EventDate OriginalResourceReleaseDate { get; set; }
		public IList<PLine> PLines { get; set; }
		public IList<CLine> CLines { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public VideoDetailsByTerritory1(XElement element)
		{
			TerritoryCodes = element.Elements().Where(e => e.Name == "TerritoryCode").Select(e => e.Value).ToList();
			ExcludedTerritoryCodes = element.Elements().Where(e => e.Name == "ExcludedTerritoryCode").Select(e => e.Value).ToList();
			Titles = element.Elements().Where(e => e.Name == "Title").Select(e => new Title(e)).ToList();
			DisplayArtists = element.Elements().Where(e => e.Name == "DisplayArtist").Select(e => new Artist(e)).ToList();
			ResourceContributors = element.Elements().Where(e => e.Name == "ResourceContributor").Select(e => new ResourceContributor(e)).ToList();
			IndirectResourceContributors = element.Elements().Where(e => e.Name == "IndirectResourceContributor").Select(e => new IndirectResourceContributor(e)).ToList();
			RightsAgreementId = element.Elements().Where(e => e.Name == "RightsAgreementId").Select(e => new RightsAgreementId(e)).SingleOrDefault();
			LabelNames = element.Elements().Where(e => e.Name == "LabelName").Select(e => new LabelName(e)).ToList();
			RightsControllers = element.Elements().Where(e => e.Name == "RightsController").Select(e => new RightsController(e)).ToList();
			RemasteredDate = element.Elements().Where(e => e.Name == "RemasteredDate").Select(e => new EventDate(e)).SingleOrDefault();
			OriginalResourceReleaseDate = element.Elements().Where(e => e.Name == "OriginalResourceReleaseDate").Select(e => new EventDate(e)).SingleOrDefault();
			PLines = element.Elements().Where(e => e.Name == "PLine").Select(e => new PLine(e)).ToList();
			CLines = element.Elements().Where(e => e.Name == "CLine").Select(e => new CLine(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public VideoDetailsByTerritory1()
		{ }
	}

	public class VideoId
	{
		public string ISRC { get; set; }
		public string ISAN { get; set; }
		public string VISAN { get; set; }
		public CatalogNumber CatalogNumber { get; set; }
		public IList<ProprietaryId> ProprietaryIds { get; set; }
		public string IsReplaced { get; set; }

		public VideoId(XElement element)
		{
			ISRC = element.Elements().Where(e => e.Name == "ISRC").Select(e => e.Value).SingleOrDefault();
			ISAN = element.Elements().Where(e => e.Name == "ISAN").Select(e => e.Value).SingleOrDefault();
			VISAN = element.Elements().Where(e => e.Name == "VISAN").Select(e => e.Value).SingleOrDefault();
			CatalogNumber = element.Elements().Where(e => e.Name == "CatalogNumber").Select(e => new CatalogNumber(e)).SingleOrDefault();
			ProprietaryIds = element.Elements().Where(e => e.Name == "ProprietaryId").Select(e => new ProprietaryId(e)).ToList();
			IsReplaced = element.Attributes().Where(a=>a.Name=="IsReplaced").Select(a=>a.Value).FirstOrDefault();
		}

		public VideoId()
		{ }
	}

	public class VideoType
	{
		public override string ToString(){return Value;}
		public static implicit operator string(VideoType obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public VideoType(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public VideoType()
		{ }
	}

	public class WebPage
	{
		public IList<PartyId> PartyIds { get; set; }
		public IList<ReleaseId> ReleaseIds { get; set; }
		public Name PageName { get; set; }
		public string URL { get; set; }
		public string UserName { get; set; }
		public string Password { get; set; }

		public WebPage(XElement element)
		{
			PartyIds = element.Elements().Where(e => e.Name == "PartyId").Select(e => new PartyId(e)).ToList();
			ReleaseIds = element.Elements().Where(e => e.Name == "ReleaseId").Select(e => new ReleaseId(e)).ToList();
			PageName = element.Elements().Where(e => e.Name == "PageName").Select(e => new Name(e)).SingleOrDefault();
			URL = element.Elements().Where(e => e.Name == "URL").Select(e => e.Value).SingleOrDefault();
			UserName = element.Elements().Where(e => e.Name == "UserName").Select(e => e.Value).SingleOrDefault();
			Password = element.Elements().Where(e => e.Name == "Password").Select(e => e.Value).SingleOrDefault();
		}

		public WebPage()
		{ }
	}

	public class WorkList
	{
		public IList<MusicalWork> MusicalWorks { get; set; }
		public string LanguageAndScriptCode { get; set; }

		public WorkList(XElement element)
		{
			MusicalWorks = element.Elements().Where(e => e.Name == "MusicalWork").Select(e => new MusicalWork(e)).ToList();
			LanguageAndScriptCode = element.Attributes().Where(a=>a.Name=="LanguageAndScriptCode").Select(a=>a.Value).FirstOrDefault();
		}

		public WorkList()
		{ }
	}

	public class WsMessageStatus
	{
		public override string ToString(){return Value;}
		public static implicit operator string(WsMessageStatus obj){return obj.Value;}

		public string Value { get; set; }
		public string Namespace { get; set; }
		public string UserDefinedValue { get; set; }

		public WsMessageStatus(XElement element)
		{
			Value = element.Value;
			Namespace = element.Attributes().Where(a=>a.Name=="Namespace").Select(a=>a.Value).FirstOrDefault();
			UserDefinedValue = element.Attributes().Where(a=>a.Name=="UserDefinedValue").Select(a=>a.Value).FirstOrDefault();
		}

		public WsMessageStatus()
		{ }
	}

}