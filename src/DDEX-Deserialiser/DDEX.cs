using System.IO;
using System.Runtime.CompilerServices;
using System.Xml.Linq;
using System.Xml.Schema;
using DDEX_Deserialiser.AutoGenerated;

namespace DDEX_Deserialiser
{
	public class DDEX
	{
		private static XmlSchemaSet _ddex_schema;

		public NewReleaseMessage Root { get; private set; }

		public DDEX(string sourceFilePath, bool verifySchema = false)
			: this(XDocument.Load(sourceFilePath), verifySchema)
		{
		}

		public DDEX(Stream stream, bool verifySchema = false)
			: this(XDocument.Load(stream), verifySchema)
		{
		}

		public DDEX(XDocument doc, bool verifySchema = false)
		{
			if (verifySchema)
				doc.Validate(GetDdexSchema(), null);

			Root = new NewReleaseMessage(doc.Root);
		}

		[MethodImpl(MethodImplOptions.Synchronized)]
		private static XmlSchemaSet GetDdexSchema()
		{
			if (_ddex_schema == null)
			{
				var schemas = new XmlSchemaSet();

				AddXsdToSchema(schemas, "iso3166a2.xsd");
				AddXsdToSchema(schemas, "iso4217a.xsd");
				AddXsdToSchema(schemas, "iso639a2.xsd");
				AddXsdToSchema(schemas, "ddex.xsd");
				AddXsdToSchema(schemas, "ddexC.xsd");
				AddXsdToSchema(schemas, "release-notification.xsd");

				_ddex_schema = schemas;
			}
			return _ddex_schema;
		}

		private static void AddXsdToSchema(XmlSchemaSet schemas, string xsdFile)
		{
			Stream xsd = GetXsdStream(xsdFile);
			schemas.Add(XmlSchema.Read(xsd, (o, e) => { }));
		}

		private static Stream GetXsdStream(string fileName)
		{
			return typeof(DDEX).Assembly.GetManifestResourceStream("DDEX_Deserialiser.xsds." + fileName);
		}
	}
}
